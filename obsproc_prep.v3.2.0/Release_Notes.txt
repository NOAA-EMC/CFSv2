XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
obsproc_prep release 3.2.0 --> released Sep 14, 2014

files:
  obsproc_prep/fix/prepobs_cqc_statbge
  obsproc_prep/fix/prepobs_landc
 *obsproc_prep/fix/prepobs_prep.bufrtable
  obsproc_prep/fix/syndat_syndata.slmask.t126.gaussian
  obsproc_prep/fix/syndat_weight
  obsproc_prep/sorc/prepobs_cqcbufr.fd/cqcbufr.f
  obsproc_prep/sorc/prepobs_cqcbufr.fd/makefile
  obsproc_prep/sorc/prepobs_cqcbufr.fd/radcor.f
 *obsproc_prep/sorc/prepobs_cqcvad.fd/cqcvad.f
  obsproc_prep/sorc/prepobs_cqcvad.fd/makefile
  obsproc_prep/sorc/prepobs_listheaders.fd/listheaders.f90
  obsproc_prep/sorc/prepobs_listheaders.fd/makefile
  obsproc_prep/sorc/prepobs_monoprepbufr.fd/makefile
  obsproc_prep/sorc/prepobs_monoprepbufr.fd/monoprepbufr.f90
  obsproc_prep/sorc/prepobs_mpcopybufr.fd/makefile
  obsproc_prep/sorc/prepobs_mpcopybufr.fd/mpcopybufr.f90
  obsproc_prep/sorc/prepobs_oiqcbufr.fd/makefile
  obsproc_prep/sorc/prepobs_oiqcbufr.fd/oiqcbufr.f
  obsproc_prep/sorc/prepobs_prepacpf.fd/makefile
  obsproc_prep/sorc/prepobs_prepacpf.fd/prepacpf.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/acftobs_qc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/indexc40.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/input_acqc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/makefile
  obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_noprof.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_prof.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/prepacqc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_mer.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_um.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/tranQCflags.f
  obsproc_prep/sorc/prepobs_prepdata.fd/inc_w3unpkb7.inc
  obsproc_prep/sorc/prepobs_prepdata.fd/iw3unpbf.f
  obsproc_prep/sorc/prepobs_prepdata.fd/makefile
 *obsproc_prep/sorc/prepobs_prepdata.fd/prepdata.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3atovsunp.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3cnvxtovs.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3rtovsunp.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3unpkb7.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3tovseds.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3tovsmnd.f
  obsproc_prep/sorc/prepobs_prepdata.fd/wordlength.f
  obsproc_prep/sorc/prepobs_prevents.fd/gblevents_cdas.f
  obsproc_prep/sorc/prepobs_prevents.fd/makefile
  obsproc_prep/sorc/prepobs_prevents.fd/prevents.f
  obsproc_prep/sorc/prepobs_profcqc.fd/makefile
  obsproc_prep/sorc/prepobs_profcqc.fd/profcqc.f
  obsproc_prep/sorc/syndat_syndata.fd/makefile
 *obsproc_prep/sorc/syndat_syndata.fd/syndata.f
  obsproc_prep/sorc/build.sh
  obsproc_prep/sorc/clean.sh
  obsproc_prep/sorc/install.sh
 *obsproc_prep/sorc/load_libs.rc
  obsproc_prep/sorc/README.build
 *obsproc_prep/sorc/setlibs.rc
  obsproc_prep/ush/prepobs_cqcbufr.sh
  obsproc_prep/ush/prepobs_cqcvad.sh
  obsproc_prep/ush/prepobs_makeprepbufr.sh
  obsproc_prep/ush/prepobs_oiqcbufr.sh
 *obsproc_prep/ush/prepobs_prepacqc.sh
  obsproc_prep/ush/prepobs_prevents.sh
  obsproc_prep/ush/prepobs_profcqc.sh
  obsproc_prep/ush/prepobs_syndata.sh

( * - changed)


 USH script changes:
   prepobs_prepacqc.sh
    - If status code returned from running of prepobs_prepacqc is 4 (meaning no
      input aircraft reports of any type read in, see below), send a diagnostic
      message to the joblog file.  Also in this case, retain the original input
      PREPBUFR file as the working PREPBUFR file coming out of this script
      (since no changes are made to it).  Also in this case, do not run
      prepobs_prepacpf regardless of whether or not it was set to run in the
      upstream job script.
      BENEFIT: Notification when prepobs_prepacqc program stops because there
               were no aircraft reports in the input PREPBUFR file.  Overall
               PREPBUFR processing continues.

 Source code changes:
   load_libs.rc and setlibs.rc in sorc directory:
    - Increment the sp version from v2.0.1 to v2.0.2 to link to the newest
      operational version of this library.
   load_libs.rc in sorc directory:
    - remove "module use -a /nwprod/lib/modulefiles" and
             "module avail"
      BENEFIT: No longer needed and can slow down compilation.
   prepobs_prepdata:
      prepdata:
       - Added encoding of wind direction/speed quality mark (DFQ) for all
         types that already encode wind direction (DDO) and either wind speed
         in knots (FFO) or wind speed in m/sec (SOB). DFQ will now be encoded
         with overall wind quality mark in both cases when u-comp wind obs
         (UOB) and v-comp wind obs (VOB) are encoded [in which case DFQ will be
         the same as u-/v- comp quality mark (WQM)] and in cases when, for
         surface reports UOB and VOB are not encoded because either direction
         or speed is missing.
         BENEFIT: This change links WQM to only UOB and VOB.  Prior to this,
                  WQM could be filled for surface reports when UOB and VOB were
                  missing but either DDO or SOB were present. This led to
                  issues in the CDAS analysis (and perhaps in other GSI
                  systems). This change also links DFQ to only DDO and either
                  FFO ot SOB.  Prior to this, DFQ was always missing. In
                  addition, the entire W__EVENT sequence [UOB VOB WQM WPC WRC]
                  is now missing (and replaced with only a single 8-bit
                  replication value of zero) for surface reports when UOB and
                  VOB are both missing.  Prior to this, it had to be expanded
                  out since WQM was present in such stuations.
       - Added encoding of wind direction/speed program code (DFP) for surface
         reports in both cases when UOB and VOB are encoded [in which case DFP
         will be the same as u-/v- comp program code (WPC)] and in cases when
         UOB and VOB are not encoded because either direction or speed is
         missing.
         BENEFIT: This changes populates DFP in cases where it was always
                  missing before.
       - Added encoding of wind direction/speed reason code (DFR), if it is
         non-missing, in both cases when UOB and VOB are encoded [in which case
         DFR will be the same as u-/v- comp reason code (WRC)] and in cases
         when, for surface reports, UOB and VOB are not encoded because either
         direction or speed is missing.
         BENEFIT: This changes populates DFR in cases where it was always
                  missing before.
       - Added logic to reset longitude to 0.0 when it is very close to 360.0.
         BENEFIT:  This ensures that array clobbering will not occur if a
                   report (with high precision native lat/lon) is right at
                   Prime Meridian.
   prepobs_cqcvad:
    - Adjusted size of UW, VW, and MSK arrays from 1000 to 3600 to accommodate
      maximum potential size.
      BENEFIT:  This will eliminate array out of bounds situations that can
                cause the program to exit prematurely.
   prepobs_prepacqc:
      prepacqc (main program), input_acqc:
       - If no aircraft reports of any type are read from input PREPBUFR file
         by subroutine input_acqc, no further processing is performed in this
         subroutine other than the usual stdout print summary at its end.
         After its return back to the calling main program (prepacqc), the main
         program also, in this case, does no further processing.  Instead
         prepacqc stops with condition code 4 (to alert executing ush script
         prepobs_prepacqc.sh, see above) after printing a diagnostic message to
         stdout.
      BENEFIT: If there are no aircraft reports of any type in the input
               PREPBUFR file, this program will now stop with a non-fatal
               condition code 4 after printing diagnostic messages to stdout
               and to the (production) joblog file.  PREPBUFR processing will
               continue normally from this point on.  Prior to this, this
               program stopped with a fatal error resulting the the PREP job
               failing.
   syndat_syndata:
    - Changes made in entry VWNCOM to prevent array overflow in 2nd element of
      variable AXIWND when Mathur 2-D Vortex Routine is run.  (Note: This had
      occurred only when debugging was turned on at run time, which it still is
      in production.)
      BENEFIT: The code now runs to completion and generates bogus winds rather
               than stopping abnormally with condition code 152. The changes
               made here are "brute force" and may not be the ultimate best
               solution but they do yield the same output bogus winds (in one
               case checked) as when no changes were made but the code is run
               with debugging turned off.
    - Changes made in subroutine SURPRP to skip reading in wind obs from report
      levels in the vicinity of tropical systems if either UOB or VOB (or both)
      are missing.  (UOB and VOB are used to construct the bogus wind reports
      coming out of this program.)
      BENEFIT: UOB and/or VOB can now be missing for surface wind reports [as
               of an implementation on 24 June 2014 which introduces reports
               with only wind speed or only wind direction into the PREPBUFR
               files (encoded in SOB and DDO, resp.)].  Prior to this fix,
               missing values for UOB and VOB were generating nonsensical bogus
               winds or causing the program to stop abnormally with condition
               code 64.
    - Parameters LDXDIM and NDATMX (storage limit for number of observations in
      storm vicinity) increased from 500 to 1000 in subroutine CMPSIT.
      BENEFIT: There can be > 500 obs in the storm vicinity.  This change
               ensures that all obs are processed.
    - A trap remains set for arrays exceeding LDXDIM in entry ANLCOM and for
      arrays exceeding NDATMX in entry OWNCOM.  However, the trap for LDXDIM
      had to be fixed as it was previously invoked only when the limit was
      exceeded by 1.
      BENEFIT: Prevents array overflow (and program termination when debugging
               is turned on at run time). (These traps should not be hit since
               the limits LDXDIM and NDATMX have been now been increased, see
               change above).

 Fixed file changes:
   prepobs_prep.bufrtable (all related to changes in prepdata above):
    - 1) Added Table D event sequence W1_EVENT to record events for wind
         dir/speed (kts) for non-surface reports. This is added to Table D
         sequences PRSLEVEL and PRSLEVLA.
    - 2) Added Table D event sequence W2_EVENT to record events for wind
         dir/speed (m/sec) for surface reports. This is added to Table A
         entries ADPSFC, SFCSHP and MSONET.
    - 3) Table D sequence PRSLEVEL is replaced by
         CAT <P___INFO> <Q___INFO> <T___INFO> <Z___INFO> <W___INFO>
         in Table A entries ADPSFC, SFCSHP and MSONET and by
         CAT <P___INFO> <Z___INFO>
         in Table A entry SFCBOG.
    - 4) Removed Table D event sequence DF_EVENT as it is replaced by W1_EVENT
         and W2_EVENT.  This is removed from Table D sequence W___INFO.
    - 5) Removed Table D sequence WSPD_SEQ as it is replaced by W2_EVENT. This
         is removed from Table A entries ADPSFC, SFCSHP and MSONET.
    - 6) Updates to some Table B and D descriptions related to wind.


 Output changes:
 ---------------
  (For specific network changes see " Output changes" in Release Notes for that
   network.)


 Shared Software:
 ----------------
    - All source codes:
         link to version 2.0.6 of w3nco library
         link to version 10.2.5 of bufr library
    - Source codes prepobs_cqcbufr, prepobs_prepacpf, prepobs_prepacqc,
      prepobs_prepdata, prepobs_prevents, syndat_syndata:
         link to version 2.2.0 of w3emc library
    - Source codes prepobs_prepdata, prepobs_prevents, syndat_syndata
         link to version 2.0.1 of bacio library
         link to version 2.0.2 of sp library (previously version 2.0.1)
         link to version 1.0.1 of sigio library


 Preimplementation Testing Requirements:
 ---------------------------------------
   There are no jobs in obsproc_prep.  All jobs executing this version of
   obsproc_prep will be part of the  parallel-production test of the OBSPROC
   FY14Q4 bundle.


 Dissemination:
 --------------
   See information about dissemination in the release notes for
   obsproc_<NETWORK> packages which execute this version of obsproc_prep.


 Special Instructions:
 ---------------------
   This must be implemented simultaneously with the implementations of:
      v1.2.1 of obsproc_dump_monitor,
      v2.0.2 of obsproc_global, obsproc_nam, obsproc_rap, obsproc_rtma,
      v2.0.2 of obsproc_urma,
      v2.3.0 of obsproc_satingest,
      v3.2.0 of obsproc_dump,
      v2.0.1 of obsproc_prep_post,
      v1.0.0 of obsproc_dump_alert, radar_reflectivity_mosaic,
      v1.0.0 of radar_reflectivity_ref2grb,
      v1.0.1 of obsproc_shared/bufr_avgdata.

   Since there are no jobs in obsproc_prep, an obsproc_prep.ver file is not
   needed.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
obsproc_prep release 3.1.0 --> released Jul 23, 2014, updated Aug 5, 2014
                           --> implemented Aug 12, 2014

files:
  obsproc_prep/fix/prepobs_cqc_statbge
  obsproc_prep/fix/prepobs_landc
  obsproc_prep/fix/prepobs_prep.bufrtable
  obsproc_prep/fix/syndat_syndata.slmask.t126.gaussian
  obsproc_prep/fix/syndat_weight
  obsproc_prep/sorc/prepobs_cqcbufr.fd/cqcbufr.f
  obsproc_prep/sorc/prepobs_cqcbufr.fd/makefile
  obsproc_prep/sorc/prepobs_cqcbufr.fd/radcor.f
  obsproc_prep/sorc/prepobs_cqcvad.fd/cqcvad.f
  obsproc_prep/sorc/prepobs_cqcvad.fd/makefile
  obsproc_prep/sorc/prepobs_listheaders.fd/listheaders.f90
  obsproc_prep/sorc/prepobs_listheaders.fd/makefile
  obsproc_prep/sorc/prepobs_monoprepbufr.fd/makefile
  obsproc_prep/sorc/prepobs_monoprepbufr.fd/monoprepbufr.f90
  obsproc_prep/sorc/prepobs_mpcopybufr.fd/makefile
  obsproc_prep/sorc/prepobs_mpcopybufr.fd/mpcopybufr.f90
  obsproc_prep/sorc/prepobs_oiqcbufr.fd/makefile
  obsproc_prep/sorc/prepobs_oiqcbufr.fd/oiqcbufr.f
  obsproc_prep/sorc/prepobs_prepacpf.fd/makefile
  obsproc_prep/sorc/prepobs_prepacpf.fd/prepacpf.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/acftobs_qc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/indexc40.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/input_acqc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/makefile
  obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_noprof.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_prof.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/prepacqc.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_mer.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_um.f
  obsproc_prep/sorc/prepobs_prepacqc.fd/tranQCflags.f
  obsproc_prep/sorc/prepobs_prepdata.fd/inc_w3unpkb7.inc
  obsproc_prep/sorc/prepobs_prepdata.fd/iw3unpbf.f
  obsproc_prep/sorc/prepobs_prepdata.fd/makefile
  obsproc_prep/sorc/prepobs_prepdata.fd/prepdata.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3atovsunp.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3cnvxtovs.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3rtovsunp.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3unpkb7.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3tovseds.f
  obsproc_prep/sorc/prepobs_prepdata.fd/w3tovsmnd.f
  obsproc_prep/sorc/prepobs_prepdata.fd/wordlength.f
  obsproc_prep/sorc/prepobs_prevents.fd/gblevents_cdas.f
  obsproc_prep/sorc/prepobs_prevents.fd/makefile
  obsproc_prep/sorc/prepobs_prevents.fd/prevents.f
  obsproc_prep/sorc/prepobs_profcqc.fd/makefile
  obsproc_prep/sorc/prepobs_profcqc.fd/profcqc.f
  obsproc_prep/sorc/syndat_syndata.fd/makefile
  obsproc_prep/sorc/syndat_syndata.fd/syndata.f
 *obsproc_prep/sorc/build.sh
  obsproc_prep/sorc/clean.sh
  obsproc_prep/sorc/install.sh
  obsproc_prep/sorc/load_libs.rc
 *obsproc_prep/sorc/README.build
  obsproc_prep/sorc/setlibs.rc
  obsproc_prep/ush/prepobs_cqcbufr.sh
  obsproc_prep/ush/prepobs_cqcvad.sh
 *obsproc_prep/ush/prepobs_makeprepbufr.sh
  obsproc_prep/ush/prepobs_oiqcbufr.sh
  obsproc_prep/ush/prepobs_prepacqc.sh
  obsproc_prep/ush/prepobs_prevents.sh
  obsproc_prep/ush/prepobs_profcqc.sh
  obsproc_prep/ush/prepobs_syndata.sh

( * - changed)


 USH script changes:
   prepobs_makeprepbufr.sh:
    - Imported script environment variable DICTPREP now defaults to new
      vertical structure directory path location for metar.tbl dictionary,
      /nw${envir}/decoders/decod_shared/dictionaries, rather than old
      horizontal structure location, /nw${envir}/dictionaries (the latter will
      be removed in September 2014).


 Source code changes:
   build.sh in sorc directory:
    - If environment variable $clobber is exported to this script with value
      "clobber_no", then the "make clobber" step is skipped. If $clobber not
      imported, "make clobber" will proceed as before.
      BENEFIT: This may be useful if one is debugging only one source code
               within a program with multiple source codes.
   README.build in sorc directory:
    - Updated to reflect changes in build.sh (see above).
   prepobs_prepacqc:
      prepacqc (main program):
       - Increased maximum number of flights that can be processed "maxflt"
         from 5000 to 7500.
         BENEFIT: Accounts for a gradual increase in aircraft reports over
                  recent months.  A recent production failure occurred when
                  there were 5002 flights.
       - Increased maximum number of merged reports that can be processed
         "max_reps" from 185K to 220K.
         BENEFIT: The number of merged reports currently processed routinely
                  exceeds 90% of 185K, so it is getting close to the limit.
                  More and more reports are expected in the future.
       - If subroutine acftobs_qc returns abnormally to main program due to the
         maximum value for number of flights calculated at some point during
         its processing exceeding "maxflt", program will no longer stop with
         r.c. 98.  Instead it will continue on with processing and post a
         diagnostic warning message to the production joblog file.
         BENEFIT: Program will no longer fail, but notification will be made
                  that "maxflt" needs to be increased a.s.a.p.  The vast
                  majority of output aircraft obs will still be QC'd (and maybe
                  even all will be QC'd if the number of flights barely exceeds
                  "maxflt").  All reports originally in the PREPBUFR file will
                  always be retained.  (Note that a gradual increase in the
                  number of flights will now eventually trigger a warning in
                  the production joblog when it get too close to "maxflt" - see
                  change to subroutine acftobs_qc below).
       - Increased format width from I5 to I6 in all places where aircraft obs
         index is listed out.
         BENEFIT: There are now > 99999 reports processed in most runs.  This
                  change will eliminate format integer overflow.
      acftobs_qc (subroutine) and its child subroutines:
       - Keeps track of maximum value for number of flights calculated at some
         point during processing.  If, at the end of processing, this value is
         at least 90% of the allowed limit ("maxflt", set in the main program),
         posts a diagnostic warning message to the production joblog file prior
         to exiting back to main program.
         BENEFIT: Provides a warning that "maxflt" is close to being hit and
                  that it should be increased in value before this happens.
                  There should be a sufficient time period of warning if the
                  number of reports is gradually increasing.
       - In subroutines do_flt and do_reg, return (abnormally) immediately if
         "maxflt" is exceeded [rather than waiting to test for this at end of
         do_flt and do_reg, and then returning (abnormally) as before].
         BENEFIT:  Avoids the potential clobbering of memory in these cases.
       - In subroutine reorder, where any new flight exceeding "maxflt"
         replaces the previous flight at index "maxflt" in the arrays to avoid
         an array overflow (done in two places in original NRL version), now
         posts a diagnostic warning message to the production joblog file.
         BENEFIT: Provides a warning that "maxflt" is exceeded here and that
                  some flights may contain reports not fully QC'd.
          - Related to above, found a third instance where this needs to be
            done in subr. reorder.
            BENEFIT: The original NRL version did not trap it and arrays
                     limited to length "maxflt" would have overflowed).
       - If "maxflt" is exceeded in subr. dupchk (1 place possible) or in subr.
         do_flt (2 places possible), the abnormal return back to
         subr. acftobs_qc results in subr. acftobs_qc now continuing on but
         setting a flag for "maxflt_exceeded".  Prior to this, subr.
         acftobs_qc itself immediately performed an abnormal return back to
         main program in such cases resulting in no more NRL QC processing.
         BENEFIT: NRL QC processing will continue on to the end of subr.
                  acftobs_qc where the abnormal return back to the main program
                  will be triggered by the "maxflt_exceeded" flag.  This should
                  allow nearly full QC to still be performed in this situation.


 Output changes:
 ---------------
   No changes.


 Compute Resource Information:
 -----------------------------
   All source codes:
    - continue to link to version 2.0.6 of w3nco library
    - continue to link to version 10.2.5 of bufr library
   Source codes prepobs_cqcbufr, prepobs_prepacpf, prepobs_prepacqc,
   prepobs_prepdata, prepobs_prevents, syndat_syndata:
    - continue to link to version 2.2.0 of w3emc library
   Source codes prepobs_prepdata, prepobs_prevents, syndat_syndata
    - continue to link to version 2.0.1 of bacio library
    - continue to link to version 2.0.1 of sp library
    - continue to link to version 1.0.1 of sigio library


 Preimplementation Testing Requirements:
 ---------------------------------------
   There are no jobs in obsproc_prep.  Jobs executing this version of
   obsproc_prep will be tested.


 Dissemination:
 --------------
   See information about dissemination in the latest release notes for
   obsproc_<NETWORK> packages which execute this version of obsproc_prep.


 Special Instructions:
 ---------------------
   This must be implemented simultaneously with the implementations of
   obsproc_global.v2.0.1, obsproc_nam.v2.0.1, obsproc_rap.v2.0.1,
   obsproc_rtma.v2.0.1 and obsproc_urma.v2.0.1, and simultaneously with the
   implementation of the FY14Q3 NAM Upgrade bundle (v3.1.0).

   Since there are no jobs in obsproc_prep, an obsproc_prep.ver file is not
   needed.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
obsproc_prep release 3.0.0 --> released May 5, 2014
                           --> implemented Jun 24, 2014

Initial population of vertical structure.

files:
 *obsproc_prep/fix/prepobs_cqc_statbge
 *obsproc_prep/fix/prepobs_landc
 *obsproc_prep/fix/prepobs_prep.bufrtable
 *obsproc_prep/fix/syndat_syndata.slmask.t126.gaussian
 *obsproc_prep/fix/syndat_weight
 *obsproc_prep/sorc/prepobs_cqcbufr.fd/cqcbufr.f
 *obsproc_prep/sorc/prepobs_cqcbufr.fd/makefile
 *obsproc_prep/sorc/prepobs_cqcbufr.fd/radcor.f
 *obsproc_prep/sorc/prepobs_cqcvad.fd/cqcvad.f
 *obsproc_prep/sorc/prepobs_cqcvad.fd/makefile
 *obsproc_prep/sorc/prepobs_listheaders.fd/listheaders.f90
 *obsproc_prep/sorc/prepobs_listheaders.fd/makefile
 *obsproc_prep/sorc/prepobs_monoprepbufr.fd/makefile
 *obsproc_prep/sorc/prepobs_monoprepbufr.fd/monoprepbufr.f90
 *obsproc_prep/sorc/prepobs_mpcopybufr.fd/makefile
 *obsproc_prep/sorc/prepobs_mpcopybufr.fd/mpcopybufr.f90
 *obsproc_prep/sorc/prepobs_oiqcbufr.fd/makefile
 *obsproc_prep/sorc/prepobs_oiqcbufr.fd/oiqcbufr.f
 *obsproc_prep/sorc/prepobs_prepacpf.fd/makefile
 *obsproc_prep/sorc/prepobs_prepacpf.fd/prepacpf.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/acftobs_qc.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/indexc40.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/input_acqc.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/makefile
 *obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_noprof.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/output_acqc_prof.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/prepacqc.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_mer.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/sub2mem_um.f
 *obsproc_prep/sorc/prepobs_prepacqc.fd/tranQCflags.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/inc_w3unpkb7.inc
 *obsproc_prep/sorc/prepobs_prepdata.fd/iw3unpbf.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/makefile
 *obsproc_prep/sorc/prepobs_prepdata.fd/prepdata.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3atovsunp.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3cnvxtovs.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3rtovsunp.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3unpkb7.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3tovseds.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/w3tovsmnd.f
 *obsproc_prep/sorc/prepobs_prepdata.fd/wordlength.f
 *obsproc_prep/sorc/prepobs_prevents.fd/gblevents_cdas.f
 *obsproc_prep/sorc/prepobs_prevents.fd/makefile
 *obsproc_prep/sorc/prepobs_prevents.fd/prevents.f
 *obsproc_prep/sorc/prepobs_profcqc.fd/makefile
 *obsproc_prep/sorc/prepobs_profcqc.fd/profcqc.f
 *obsproc_prep/sorc/syndat_syndata.fd/makefile
 *obsproc_prep/sorc/syndat_syndata.fd/syndata.f
 *obsproc_prep/sorc/build.sh
 *obsproc_prep/sorc/clean.sh
 *obsproc_prep/sorc/install.sh
 *obsproc_prep/sorc/load_libs.rc
 *obsproc_prep/sorc/README.build
 *obsproc_prep/sorc/setlibs.rc
 *obsproc_prep/ush/prepobs_cqcbufr.sh
 *obsproc_prep/ush/prepobs_cqcvad.sh
 *obsproc_prep/ush/prepobs_makeprepbufr.sh
 *obsproc_prep/ush/prepobs_oiqcbufr.sh
 *obsproc_prep/ush/prepobs_prepacqc.sh
 *obsproc_prep/ush/prepobs_prevents.sh
 *obsproc_prep/ush/prepobs_profcqc.sh
 *obsproc_prep/ush/prepobs_syndata.sh

( * - changed)


 USH script changes:
   prepobs_makeprepbufr.sh:
    - Imports new environment variable $HOMEobsproc_prep which points to
      directory path for generic prep subdirectories under version control (in
      production this is normally /nwprod/obsproc_prep.vX.Y.Z where X.Y.Z
      version number being used, usually the latest).  This replaces
      /nw${envir}.
    - Imports new environment variable $HOMEobsproc_network which points to
      directory path for network-specific prep subdirectories under version
      control (in production this is normally /nwprod/obsproc_NETWORK.vX.Y.Z
      where NETWORK is, e.g., global, nam, rap, rtma, urma, and X.Y.Z is
      version number being used, usually the latest).  This replaces
      /nw${envir}.
    - Removed all references to RUC and CDC networks (obsolete).
    - Added references to URMA network.
    - Removed option to run on MACHINE=sgi - this is obsolete (as a result
      variables $MACHINE and $HOMEALL are no longer used in this script).
    - Replaced variable $EXECUTIL with $utilexec for directory path to utility
      program ndate (both were exported from job scripts with same value,
      $EXECUTIL has now been removed from all parent PREP job scripts).
   prepobs_syndata.sh:
    - Modified export variable FORT14 to point to renamed fix file:
      syndat_syndata.slmask.t126.gaussian 
   prepobs_prevents.sh
    - Removed all references to CDC network (obsolete).
    - Added references to URMA network.
   prepobs_cqcbufr.sh, prepobs_cqcvad.sh, prepobs_oiqcbufr.sh,
   prepobs_prepacqc.sh, prepobs_profcqc.sh: 
    - No changes (other than move to vertical structure).
      
 Source code changes:
   build.sh in sorc directory:
    - New. Used to build one or all executables in the *.fd sub-directories of
      the sorc directory.  Reads either load_libs.rc or setlibs.rc file to
      point to library version numbers needed by makefiles.
   clean.sh in sorc directory:
    - New. Used to "make clean" one or more *.fd sub-directories in the sorc
      directory (generally after a build).
   install.sh in sorc directory:
    - New. Used to install (move) one or more executables (after build) in exec
      directory (assumed to be in same root directory as sorc).
   load_libs.rc in sorc directory:
    - New. Read by build.sh - contains library version numbers needed by
      makefiles.  (Not read if setlibs.rc is read.)
   README.build in sorc directory:
    - New. Documentation on using build.sh, install.sh and clean.sh.
   setlibs.rc in sorc directory:
    - New. Read by build.sh - contains library version numbers needed by
      makefiles.  (Not read if load_libs.rc is read.)
   All source codes:
    - Makefile modified to use environment variables to point to library
      version numbers and to add sample build script and info in sorc
      directory.  This generalizes the library version information.
   prepobs_cqcbufr, prepobs_listheaders, prepobs_monoprepbufr,
   prepobs_mpcopybufr, prepobs_oiqcbufr, prepobs_prepacpf, prepobs_prevents,
   prepobs_profcqc, syndat_syndata:
    - No change to source.
   prepobs_prepdata, prepobs_prevents, syndat_syndata:
      gblevents (in w3emc library - version 2.2.0):
       - Added new namelist switch "DOPMSL" which, when TRUE, derives pmsl
         (mnemonic "PMO") from reported station pressure ("POB"), station
         height/elevation ("ZOB") and the just-computed virtual temperature for
         surface reports in cases when pmsl initially encoded in PREPBUFR file
         by prepobs_prepdata is missing (including all mesonet reports)
         (derivation done in subroutine GBLEVN08).  DOVTMP
         must be TRUE and DOANLS must be FALSE ("PREVENTS" mode). The derived
         pmsl either gets a quality mark ("PMQ") of 3 or inherits the station
         pressure quality mark ("PQM"), whichever is greater. The value of the
         pmsl indicator (new mnemonic "PMIN") is set to 1 to denote pmsl was
         derived rather than observed.  The default for "DOPMSL" is FALSE
         (normally only TRUE in RTMA and URMA runs).  It is forced to be FALSE
         in "POSTEVENTS" mode (DOANLS=TRUE).
         BENEFIT: More complete and thorough pressure information for surface
                  data is available in the RTMA and URMA GSI via this derived
                  pmsl since many more reports will have a pmsl now (whether
                  observed or derived).  The RTMA/URMA GSI analyzes pmsl.
       - In subroutine GBLEVN02, SFCSHP reports with calm winds and non-missing
         background u- or v-component wind .ge. 5 m/sec are flagged with Q.M. 8
         (event pgm "PREVENT", reason code 8).
         BENEFIT: These data are suspect and will now not be assimilated by any
                  GSI system.
   prepobs_cqcvad:
    - Increased total number of levels amongst all VAD reports that can be
      processed and total number of events amongst all VAD reports that can be
      processed from 160000 to 500000.
      BENEFIT: This increase will accommodate both (Radar Coded Message) and
               Level 2 decoder VAD wind reports.
    - Generated a new dynamic variable "icntmx" (product of number of stations
      reporting (max=200), number of reporting times in the dataset time span
      (max=6), and the number of data type increments (max=3, but more
      realistically 2, u and v)) to allocate the upper limit of a multi-nested
      DO loop in subroutines INCDIST and RESIDST.  The static limit of 1000
      was occasionally being exceeded.
      BENEFIT: This change does not affect the output PREPBUFR file but it does
               improve the statistical evaluation of both legacy (Radar Coded
               Message) and Level 2 decoder VAD wind reports.
   prepobs_prepacqc:
    - In final subroutine which copies all BUFR messages from input to output
      PREPBUFR file (including aircraft reports undated by this program), moved
      BUFRLIB routine OPENMB call to after time-window and geographic-domain
      checks to prevent creation of an empty, but open, BUFR message (of type
      AIRCAR) in (rare) cases where absolutely no aircraft reports pass these
      checks
      BENEFIT: Prevents a BUFRLIB abort due to previous message being open
               when attempting to copy first non-aircraft message from input to
               output PREPBUFR file in such cases where no aircraft reports are
               written back out.  This occurred in the 07z 20140214 RAP_PREP
               production run when the number of aircraft reports was severely
               reduced due to a fiber cut and no reports survived the time-
               window check.
   prepobs_prepdata:
      prepdata:
       - Added processing of Coast Guard tide gauge data (read from SFCSHP
         dump, dump report type 534). A 12'th word added to following namelist
         switches to account for these new reports: FWINDO, JSURFM, JSURFW.
         BENEFIT: Now Coast Guard tide gauge reports are available to be
                  encoded into the PREPBUFR file for all networks that process
                  the SFCSHP dump file.
       - Added new namelist switch NPKRPT (12 elements), if TRUE all of the
         below occurs:
            - Will process surface reports that would otherwise be tossed due
              to their having a missing pstn.
            - These reports estimate pstn from the reported or U.S. Standard
              Atmosphere pmsl, the reported or U.S. Standard Atmosphere
              sensible temperature, and the reported elevation (only marine
              reports > 7.5 m can have a reported pmsl and fall into this
              category). This estimated pstn (POB) is used to estimate q (QOB).
              Both POB and QOB are assigned minimum q.m.'s (PQM, QQM) of 3.
              This estimated POB is encoded into PREPBUFR file.
            - These reports are then assigned new PREPBUFR report types 192/292
              (SYNOP), 193/293 (METAR), 194/294 (marine) and 195/295 (mesonet).
            - ATLAS buoy wind reports which also have missing pstn and pmsl
              will continue to be processed as before (PREPBUFR report type 282
              (Note: This means that if an ATLAS buoy ever had T,q info, its
                     mass piece would still be tossed rather than getting into
                     PREPBUFR file under under report type 194 (may need to fix
                     this logic someday).
            - MESONETS will no longer have "x" in character 8 of id, instead
              they will get PREPBUFR report types 195/295 rather than 188/288.
         BENEFIT: ADPSFC, SFCSHP, and MSONET reports that do not contain
                  station pressure information are now retained (previously,
                  they were discarded) when NPKRPT(x)=TRUE for surface ITYP=x.
                  They are now available for the analysis. Currently all words
                  of NPKRPT are set to TRUE in the NAM/NDAS, RAP, RTMA and URMA
                  networks.
       - Added new mnemonic "PMIN" (mean sea-level pressure indicator) which
         is encoded with a value of zero for all surface reports with an
         observed mean sea-level pressure encoded in "PMO" (currently all
         surface types except mesonet). "PMIN" will be encoded with a value of
         1 in w3emc routine GBLEVENTS for cases where a mean sea-level pressure
         is derived because it was encoded as missing in PREPBUFR file by
         prepobs_prepdata in PREP (e.g., for all mesonet reports) (see
         GBLEVENTS change info above and docblock in GBLEVENTS for more
         information) (See changes #1, 4 & 5 to fix file
         prepobs_prep.bufrtable below.)
         BENEFIT: Downstream codes will be able to differentiate between
                  observed and derived PMO via the PMIN value.
       - Modified subroutine GETC06 to skip over PREPBUFR encoding if u- or
         v-comp of wind (m/sec * 100) exceeds 32767 (a BUFR bit limitation).
         BENEFIT: Erroneously large upper-air wind reports will no longer be
                  encoded into the PREPBUFR file.
       - Modified to always encode wind speed obs in m/sec ("SOB") and wind
         direction obs ("DDO") for all types of surface reports (even if one or
         the other are missing but also if both are present). Removed logic
         which encoded "SOB" only for METAR reports when direction was missing
         and speed was .LE. 3 m/sec (direction was never encoded in any
         situation for surface reports). Also removed encoding of "SQM" (wind
         speed quality mark) for these types of METAR reports.  All surface
         reports now encode wind qm as "WQM" regardless of whether or not it
         also encodes direction, speed, u-comp or v-comp [note this change does
         not affect non-surface reports which can still encode speed in knots
         ("FFO") and direction ("DDO") when "UOB" and "VOB" are also encoded.]
         (See changes #3 & 7 to fix file prepobs_prep.bufrtable below.)
         BENEFIT: Surface data wind reports that have incomplete wind direction
                  or speed information will now be retained so that at least
                  wind speed (or direction) will be available to the GSI. The
                  GSI (or other downstream processing) will now be able to
                  pull SOB and DDO out of PREPBUFR for all surface reports.
       - For all satellite-derived wind reports, now encodes PREPBUFR report
         sub-type (mnemonic "TSB", previously missing) as BUFR satellite id
         times 10 plus "satellite derived wind computation method ("SWCM" -
         BUFR code table 0-02-023).  (See change #6 to fix file
         prepobs_prep.bufrtable below.)
         BENEFIT: Allows GSI to identify cloud-top vs. deep-layer WV winds and
                  IR vs. visible winds for METEOSAT and JMA since, unlike
                  NESDIS, both have same rpt types (250-JMA & 254-EUMETSAT for
                  WV, 242/252-JMA & 243/253-EUMETSAT for IR/VIS)
       - 1-dim array OBS2 returned from IW3UNPBF increased from 42 to 43 words
         to hold satellite zenith angle (degrees, for all satwnd types),
         encoded into PREPBUFR file (mnemonic "SAZA"). (See changes #1 & 2 to
         fix file prepobs_prep.bufrtable below.)
         BENEFIT: For use by GSI (to possibly screen satwnds with high SAZA
                  values).
       - Changed IRNMRK value for Unrestricted Mesoscale Analysis (URMA)
         network from 9 to 10.
         BENEFIT: Allows URMA to have its own RUN mark value, instead of
                  combining it with the RTMA value of 9.
       - Process new VAD wind reports from level 2 decoder. Do not convert
         winds from dir/speed to u/v these are already u/v and are stored in
         m/sec.
         BENEFIT: VAD wind reports from Level 2 decoder can now be processed
                  and encoded into the PREPBUFR file for use by GSI systems.
       - Differentiate between Radar Coded Message and new Level 2 decoder VAD
         wind reports via use of report subtype (TSB=1 for former and =2 for
         latter).
         BENEFIT: Needed by GSI since both types will be in PREPBUFR file.
       - Increase the maximum number of levels that can be processed (MXLVL)
         from 300 to 600.
         BENEFIT: Allows runs that might include interpolated levels (e.g.,
                  special AFOS graphics, IRNMRK=2) to still work properly as
                  more and more radiosonde levels become available in the new
                  RRS.
       - No longer aborts with RC=99 if number of levels in a report exceeds
         the limit of MXLVL (just updated from 300 to 600, see above). Instead,
         now skips the offending report(s) and, at the very end, posts a
         message to the joblog file noting how many reports were skipped due to
         this issue.
         BENEFIT: PREP job will not longer stop dead in its tracks in this
                  case. EMC's monitoring utilities will quickly detect this
                  issue since it will be reported in the joblog file.
       - Report type 183 now stores moisture quality mark no lower than 3
         (suspect) (before type 183 stored observed moisture quality mark read
         from the ADPSFC dump file).
         BENEFIT: The pressure used to generate specific humidty has always
                  been at best suspect.  Now the moisture follows suit.
      iw3unpbf:
       - Added ability to read in and process percent confidence based on
         EUMETSAT Quality Indicator with and without forecast for NESDIS GOES
         winds pulled from NESDIS server (which originally stored them in dump
         file explicitly as "QIFY" and "QIFN" but later stored them both as
         before and as replicated "PCCF" values as with v10 BUFR, and even
         later stored them only as replicated "PCCF" values as with v10 BUFR)
         if they are present.
         (Note: As noted, will also work if these are stored in replicated
                "PCCF" values as with v10 BUFR, e.g., MODIS winds, AVHRR winds,
                JMA winds, EUMETSAT winds.)
       - Added ability to read in and process percent confidence based on
         NESDIS Recursive Filter Function for types which might store it in
         dump file in replicated "PCCF" values as with v10 BUFR (in this case
         NESDIS GOES winds, MODIS winds, AVHRR winds, JMA winds - already in
         place for EUMETSAT winds) if it is present.
         (Note: Will still work if this is stored explicitly as "RFFL" as
                originally with GOES winds pulled from NESDIS server.)
       - Added ability to read in and process percent confidence based on
         NESDIS Expected Error for types which might store it in dump file in
         replicated "PCCF" values as with v10 BUFR (in this case MODIS or AVHRR
         winds) if it is present.
         (Note: Will still work if this is stored explicitly as "EEQF" as
                originally with GOES winds pulled from NESDIS server.
       - Now stores cloud-top/deep-layer indicator in byte 3 of header reserve
         character word 1 for foreign-produced satellite winds (as already done
         for NESDIS-produced satellite winds) - JMA and EUMETSAT imager water
         vapor winds can now be of both types, before they were only cloud-top.
       - Output array OBS2 creased from length 42 to 43 words, where word 43
         contains satellite zenith angle (degrees, satwnd types only)
       - Added new dump report type 534 for surface marine Coast Guard tide
         gauge reports.
         BENEFIT: Now Coast Guard tide gauge reports are available to be
                  encoded into the PREPBUFR file for all networks that process
                  the SFCSHP dump file.
      w3unpkb7:
       - Modified to handle VAD wind reports from Level 2 decoder (subset
         "NC002017") in addition to those from Radar Coded Message (subset
         "NC002008")}.
       - Parameterized maximum number of levels allowed for each category and
         calculated parameter "IDMAX" (size of output "RDATA" array) based on
         these.  All of these are now placed in new include file
         'inc_w3unpkb7.inc'.
      inc_w3unpkb7.inc:
       - Maximum number of cat. 04 winds-by-height levels (excluding first,
         surface, level) increased from 64 to 254 to account for more levels in
         new VAD wind reports from Level 2 decoder.
       - Maximum number of cat. 11 wind profiler levels (excluding first,
         surface, level) increased from 102 to 200 to account for some MAP
         profilers with more levels than before.
       - The resulting "IDMAX" is now 2270, up from 1200 before.

 Fixed file changes:
   prepobs_cqc_statbge, prepobs_landc, syndat_weight:
    - No changes to contents.
   prepobs_prep.bufrtable:
    - 1) Added two new mnemonics to Table B: Satellite Zenith Angle (SAZA),
         Mean Sea-Level Indicator (PMIN).
    - 2) Added SAZA to the Table A SATWND mnemonic sequence.
    - 3) Added existing Table D 1-bit repl. sequence <WSPD_SEQ> to Table A
         SFCSHP and MSONET mnemonic sequences.
    - 4) Added PMIN to PMSL_SEQ mnemonic sequence.
    - 5) Added existing Table D 1-bit repl. sequence <PMSL_SEQ> to Table A
         MSONET mnemonic sequence.
    - 6) Increased Table B mnemonic TSB (Report Subtype) bit width from 10 to
         14.
    - 7) Removed Table B mnemonic SQM (wind speed quality marker).  It had been
         a part of Table D sequence WSPD_SEQ.  It was used only by METAR
         reports with missing direction and speed .LE. 3 m/sec when wind speed
         obs was encoded in SOB.  Since all surface reports now encode SOB, the
         wind quality marker (whether UOB and VOB are reported or not) will
         just be encoded in existing menmonic WQM.
   syndat_syndata.slmask.t126.gaussian:
    - Renamed from syndat_slmask.t126.gaussian to distinguish from file in
      /nwprod/tropcy_qc_reloc.v*/fix
    - No changes to contents.


 Output changes:
 ---------------
  (For specific network changes see " Output changes" in Release Notes for that
   network.)


 Compute Resource Information:
 -----------------------------
   All source codes:
    - continue to link to version 2.0.6 of w3nco library
    - continue to link to version 10.2.5 of bufr library
   Source codes prepobs_cqcbufr, prepobs_prepacpf, prepobs_prepacqc,
   prepobs_prepdata, prepobs_prevents, syndat_syndata:
    - now links to version 2.2.0 of w3emc library (previously linked to
      version 2.0.5)
   Source codes prepobs_prepdata, prepobs_prevents, syndat_syndata
    - continue to link to version 2.0.1 of bacio library
    - continue to link to version 2.0.1 of sp library
    - continue to link to version 1.0.1 of sigio library


 Preimplementation Testing Requirements:
 ---------------------------------------
   There are no jobs in obsproc_prep.  All jobs executing this version of
   obsproc_prep will be part of the parallel-production test of the OBSPROC 
   Phase 2 bundle.


 Dissemination:
 --------------
   See information about dissemination in the latest release notes for
   obsproc_<NETWORK> packages which execute this version of obsproc_prep.


 Special Instructions:
 ---------------------
   This must be implemented simultaneously with the implementations of
   obsproc_dump_monitor.v1.2.0, obsproc_global.v2.0.0, obsproc_nam.v2.0.0,
   obsproc_rap.v2.0.0, obsproc_rtma.v2.0.0, obsproc_urma.v2.0.0,
   obsproc_dump.v3.1.0, obsproc_dump_post.v2.0.0, obsproc_prep_post.v2.0.0,
   obsproc_satingest.v2.2.0, obsproc_shared/bufr_remorest.v1.0.0 and
   obsproc_shared/bufr_avgdata.v1.0.0.

   This must also be implemented simultaneously with or immediately after the
   w3emc_v2.2.0 implementation.

   Since there are no jobs in obsproc_prep, an obsproc_prep.ver file is not
   needed.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
