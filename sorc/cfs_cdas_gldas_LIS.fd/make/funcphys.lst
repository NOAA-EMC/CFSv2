IBM XL Fortran for AIX, V12.1 (5724-U82) Version 12.01.0000.0001 --- ../lsms/noah.20071219/funcphys.F 03/09/11 11:03:54
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             ESCAPE          FULLPATH
         I4              INLGLUE         NOLIBESSL       NOLIBPOSIX
         OBJECT          SOURCE          STRICT          SWAPOMP
         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(2)
         SPILLSIZE(2000)       STACKTEMP(0)
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,NOINTPTR)   ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR(FULL)            AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         FREE(F90)             HALT(S)               IEEE(NEAR)
         INTSIZE(4)            LANGLVL(EXTENDED)     REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
          1 |#line 1 "../lsms/noah.20071219/funcphys.F"
          1 |!-------------------------------------------------------------------------------
          2 |module funcphys
          3 |!$$$  Module Documentation Block
          4 |!
          5 |! Module:    funcphys        API for basic thermodynamic physics
          6 |!   Author: Iredell          Org: W/NX23     Date: 1999-03-01
          7 |!
          8 |! Abstract: This module provides an Application Program Interface
          9 |!   for computing basic thermodynamic physics functions, in particular
         10 |!     (1) saturation vapor pressure as a function of temperature,
         11 |!     (2) dewpoint temperature as a function of vapor pressure,
         12 |!     (3) equivalent potential temperature as a function of temperature
         13 |!         and scaled pressure to the kappa power,
         14 |!     (4) temperature and specific humidity along a moist adiabat
         15 |!         as functions of equivalent potential temperature and
         16 |!         scaled pressure to the kappa power,
         17 |!     (5) scaled pressure to the kappa power as a function of pressure, and
         18 |!     (6) temperature at the lifting condensation level as a function
         19 |!         of temperature and dewpoint depression.
         20 |!   The entry points required to set up lookup tables start with a "g".
         21 |!   All the other entry points are functions starting with an "f" or
         22 |!   are subroutines starting with an "s".  These other functions and
         23 |!   subroutines are elemental; that is, they return a scalar if they
         24 |!   are passed only scalars, but they return an array if they are passed
         25 |!   an array.  These other functions and subroutines can be inlined, too.
         26 |!
         27 |! Program History Log:
         28 |!   1999-03-01  Mark Iredell
         29 |!   1999-10-15  Mark Iredell  SI unit for pressure (Pascals)
         30 |!   2001-02-26  Mark Iredell  Ice phase changes of Hong and Moorthi
         31 |!
         32 |! Public Variables:
         33 |!   krealfp         Integer parameter kind or length of reals (=kind_phys)
         34 |!
         35 |! Public Subprograms:
         36 |!   gpvsl            Compute saturation vapor pressure over liquid table
         37 |!
         38 |!   fpvsl           Elementally compute saturation vapor pressure over liquid
         39 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         40 |!     t               Real(krealfp) temperature in Kelvin
         41 |!
         42 |!   fpvslq          Elementally compute saturation vapor pressure over liquid
         43 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         44 |!     t               Real(krealfp) temperature in Kelvin
         45 |!
         46 |!   fpvslx          Elementally compute saturation vapor pressure over liquid
         47 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         48 |!     t               Real(krealfp) temperature in Kelvin
         49 |!
         50 |!   gpvsi            Compute saturation vapor pressure over ice table
         51 |!
         52 |!   fpvsi           Elementally compute saturation vapor pressure over ice
         53 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         54 |!     t               Real(krealfp) temperature in Kelvin
         55 |!
         56 |!   fpvsiq          Elementally compute saturation vapor pressure over ice
         57 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         58 |!     t               Real(krealfp) temperature in Kelvin
         59 |!
         60 |!   fpvsix          Elementally compute saturation vapor pressure over ice
         61 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         62 |!     t               Real(krealfp) temperature in Kelvin
         63 |!
         64 |!   gpvs            Compute saturation vapor pressure table
         65 |!
         66 |!   fpvs            Elementally compute saturation vapor pressure
         67 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         68 |!     t               Real(krealfp) temperature in Kelvin
         69 |!
         70 |!   fpvsq           Elementally compute saturation vapor pressure
         71 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         72 |!     t               Real(krealfp) temperature in Kelvin
         73 |!
         74 |!   fpvsx           Elementally compute saturation vapor pressure
         75 |!     function result Real(krealfp) saturation vapor pressure in Pascals
         76 |!     t               Real(krealfp) temperature in Kelvin
         77 |!
         78 |!   gtdpl           Compute dewpoint temperature over liquid table
         79 |!
         80 |!   ftdpl           Elementally compute dewpoint temperature over liquid
         81 |!     function result Real(krealfp) dewpoint temperature in Kelvin
         82 |!     pv              Real(krealfp) vapor pressure in Pascals
         83 |!
         84 |!   ftdplq          Elementally compute dewpoint temperature over liquid
         85 |!     function result Real(krealfp) dewpoint temperature in Kelvin
         86 |!     pv              Real(krealfp) vapor pressure in Pascals
         87 |!
         88 |!   ftdplx          Elementally compute dewpoint temperature over liquid
         89 |!     function result Real(krealfp) dewpoint temperature in Kelvin
         90 |!     pv              Real(krealfp) vapor pressure in Pascals
         91 |!
         92 |!   ftdplxg         Elementally compute dewpoint temperature over liquid
         93 |!     function result Real(krealfp) dewpoint temperature in Kelvin
         94 |!     t               Real(krealfp) guess dewpoint temperature in Kelvin
         95 |!     pv              Real(krealfp) vapor pressure in Pascals
         96 |!
         97 |!   gtdpi           Compute dewpoint temperature table over ice
         98 |!
         99 |!   ftdpi           Elementally compute dewpoint temperature over ice
        100 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        101 |!     pv              Real(krealfp) vapor pressure in Pascals
        102 |!
        103 |!   ftdpiq          Elementally compute dewpoint temperature over ice
        104 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        105 |!     pv              Real(krealfp) vapor pressure in Pascals
        106 |!
        107 |!   ftdpix          Elementally compute dewpoint temperature over ice
        108 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        109 |!     pv              Real(krealfp) vapor pressure in Pascals
        110 |!
        111 |!   ftdpixg         Elementally compute dewpoint temperature over ice
        112 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        113 |!     t               Real(krealfp) guess dewpoint temperature in Kelvin
        114 |!     pv              Real(krealfp) vapor pressure in Pascals
        115 |!
        116 |!   gtdp            Compute dewpoint temperature table
        117 |!
        118 |!   ftdp            Elementally compute dewpoint temperature
        119 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        120 |!     pv              Real(krealfp) vapor pressure in Pascals
        121 |!
        122 |!   ftdpq           Elementally compute dewpoint temperature
        123 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        124 |!     pv              Real(krealfp) vapor pressure in Pascals
        125 |!
        126 |!   ftdpx           Elementally compute dewpoint temperature
        127 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        128 |!     pv              Real(krealfp) vapor pressure in Pascals
        129 |!
        130 |!   ftdpxg          Elementally compute dewpoint temperature
        131 |!     function result Real(krealfp) dewpoint temperature in Kelvin
        132 |!     t               Real(krealfp) guess dewpoint temperature in Kelvin
        133 |!     pv              Real(krealfp) vapor pressure in Pascals
        134 |!
        135 |!   gthe            Compute equivalent potential temperature table
        136 |!
        137 |!   fthe            Elementally compute equivalent potential temperature
        138 |!     function result Real(krealfp) equivalent potential temperature in Kelvin
        139 |!     t               Real(krealfp) LCL temperature in Kelvin
        140 |!     pk              Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
        141 |!
        142 |!   ftheq           Elementally compute equivalent potential temperature
        143 |!     function result Real(krealfp) equivalent potential temperature in Kelvin
        144 |!     t               Real(krealfp) LCL temperature in Kelvin
        145 |!     pk              Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
        146 |!
        147 |!   fthex           Elementally compute equivalent potential temperature
        148 |!     function result Real(krealfp) equivalent potential temperature in Kelvin
        149 |!     t               Real(krealfp) LCL temperature in Kelvin
        150 |!     pk              Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
        151 |!
        152 |!   gtma            Compute moist adiabat tables
        153 |!
        154 |!   stma            Elementally compute moist adiabat temperature and moisture
        155 |!     the             Real(krealfp) equivalent potential temperature in Kelvin
        156 |!     pk              Real(krealfp) pressure over 1e5 Pa to the kappa power
        157 |!     tma             Real(krealfp) parcel temperature in Kelvin
        158 |!     qma             Real(krealfp) parcel specific humidity in kg/kg
        159 |!
        160 |!   stmaq           Elementally compute moist adiabat temperature and moisture
        161 |!     the             Real(krealfp) equivalent potential temperature in Kelvin
        162 |!     pk              Real(krealfp) pressure over 1e5 Pa to the kappa power
        163 |!     tma             Real(krealfp) parcel temperature in Kelvin
        164 |!     qma             Real(krealfp) parcel specific humidity in kg/kg
        165 |!
        166 |!   stmax           Elementally compute moist adiabat temperature and moisture
        167 |!     the             Real(krealfp) equivalent potential temperature in Kelvin
        168 |!     pk              Real(krealfp) pressure over 1e5 Pa to the kappa power
        169 |!     tma             Real(krealfp) parcel temperature in Kelvin
        170 |!     qma             Real(krealfp) parcel specific humidity in kg/kg
        171 |!
        172 |!   stmaxg          Elementally compute moist adiabat temperature and moisture
        173 |!     tg              Real(krealfp) guess parcel temperature in Kelvin
        174 |!     the             Real(krealfp) equivalent potential temperature in Kelvin
        175 |!     pk              Real(krealfp) pressure over 1e5 Pa to the kappa power
        176 |!     tma             Real(krealfp) parcel temperature in Kelvin
        177 |!     qma             Real(krealfp) parcel specific humidity in kg/kg
        178 |!
        179 |!   gpkap           Compute pressure to the kappa table
        180 |!
        181 |!   fpkap           Elementally raise pressure to the kappa power.
        182 |!     function result Real(krealfp) p over 1e5 Pa to the kappa power
        183 |!     p               Real(krealfp) pressure in Pascals
        184 |!
        185 |!   fpkapq          Elementally raise pressure to the kappa power.
        186 |!     function result Real(krealfp) p over 1e5 Pa to the kappa power
        187 |!     p               Real(krealfp) pressure in Pascals
        188 |!
        189 |!   fpkapo          Elementally raise pressure to the kappa power.
        190 |!     function result Real(krealfp) p over 1e5 Pa to the kappa power
        191 |!     p               Real(krealfp) surface pressure in Pascals
        192 |!
        193 |!   fpkapx          Elementally raise pressure to the kappa power.
        194 |!     function result Real(krealfp) p over 1e5 Pa to the kappa power
        195 |!     p               Real(krealfp) pressure in Pascals
        196 |!
        197 |!   grkap           Compute pressure to the 1/kappa table
        198 |!
        199 |!   frkap           Elementally raise pressure to the 1/kappa power.
        200 |!     function result Real(krealfp) pressure in Pascals
        201 |!     pkap            Real(krealfp) p over 1e5 Pa to the 1/kappa power
        202 |!
        203 |!   frkapq          Elementally raise pressure to the kappa power.
        204 |!     function result Real(krealfp) pressure in Pascals
        205 |!     pkap            Real(krealfp) p over 1e5 Pa to the kappa power
        206 |!
        207 |!   frkapx          Elementally raise pressure to the kappa power.
        208 |!     function result Real(krealfp) pressure in Pascals
        209 |!     pkap            Real(krealfp) p over 1e5 Pa to the kappa power
        210 |!
        211 |!   gtlcl           Compute LCL temperature table
        212 |!
        213 |!   ftlcl           Elementally compute LCL temperature.
        214 |!     function result Real(krealfp) temperature at the LCL in Kelvin
        215 |!     t               Real(krealfp) temperature in Kelvin
        216 |!     tdpd            Real(krealfp) dewpoint depression in Kelvin
        217 |!
        218 |!   ftlclq          Elementally compute LCL temperature.
        219 |!     function result Real(krealfp) temperature at the LCL in Kelvin
        220 |!     t               Real(krealfp) temperature in Kelvin
        221 |!     tdpd            Real(krealfp) dewpoint depression in Kelvin
        222 |!
        223 |!   ftlclo          Elementally compute LCL temperature.
        224 |!     function result Real(krealfp) temperature at the LCL in Kelvin
        225 |!     t               Real(krealfp) temperature in Kelvin
        226 |!     tdpd            Real(krealfp) dewpoint depression in Kelvin
        227 |!
        228 |!   ftlclx          Elementally compute LCL temperature.
        229 |!     function result Real(krealfp) temperature at the LCL in Kelvin
        230 |!     t               Real(krealfp) temperature in Kelvin
        231 |!     tdpd            Real(krealfp) dewpoint depression in Kelvin
        232 |!
        233 |!   gfuncphys       Compute all physics function tables
        234 |!
        235 |! Attributes:
        236 |!   Language: Fortran 90
        237 |!
        238 |!$$$
        239 |  use machine,only:kind_phys
        240 |  use physcons
        241 |  implicit none
        242 |  private
        243 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        244 |! Public Variables
        245 |! integer,public,parameter:: krealfp=selected_real_kind(15,45)
        246 |  integer,public,parameter:: krealfp=kind_phys
        247 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        248 |! Private Variables
        249 |  real(krealfp),parameter:: psatb=con_psat*1.e-5
        250 |  integer,parameter:: nxpvsl=7501
        251 |  real(krealfp) c1xpvsl,c2xpvsl,tbpvsl(nxpvsl)
        252 |  integer,parameter:: nxpvsi=7501
        253 |  real(krealfp) c1xpvsi,c2xpvsi,tbpvsi(nxpvsi)
        254 |  integer,parameter:: nxpvs=7501
        255 |  real(krealfp) c1xpvs,c2xpvs,tbpvs(nxpvs)
        256 |  integer,parameter:: nxtdpl=5001
        257 |  real(krealfp) c1xtdpl,c2xtdpl,tbtdpl(nxtdpl)
        258 |  integer,parameter:: nxtdpi=5001
        259 |  real(krealfp) c1xtdpi,c2xtdpi,tbtdpi(nxtdpi)
        260 |  integer,parameter:: nxtdp=5001
        261 |  real(krealfp) c1xtdp,c2xtdp,tbtdp(nxtdp)
        262 |  integer,parameter:: nxthe=241,nythe=151
        263 |  real(krealfp) c1xthe,c2xthe,c1ythe,c2ythe,tbthe(nxthe,nythe)
        264 |  integer,parameter:: nxma=151,nyma=121
        265 |  real(krealfp) c1xma,c2xma,c1yma,c2yma,tbtma(nxma,nyma),tbqma(nxma,nyma)
        266 |  integer,parameter:: nxpkap=11001
        267 |  real(krealfp) c1xpkap,c2xpkap,tbpkap(nxpkap)
        268 |  integer,parameter:: nxrkap=11001
        269 |  real(krealfp) c1xrkap,c2xrkap,tbrkap(nxrkap)
        270 |  integer,parameter:: nxtlcl=151,nytlcl=61
        271 |  real(krealfp) c1xtlcl,c2xtlcl,c1ytlcl,c2ytlcl,tbtlcl(nxtlcl,nytlcl)
        272 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        273 |! Public Subprograms
        274 |  public gpvsl,fpvsl,fpvslq,fpvslx
        275 |  public gpvsi,fpvsi,fpvsiq,fpvsix
        276 |  public gpvs,fpvs,fpvsq,fpvsx
        277 |  public gtdpl,ftdpl,ftdplq,ftdplx,ftdplxg
        278 |  public gtdpi,ftdpi,ftdpiq,ftdpix,ftdpixg
        279 |  public gtdp,ftdp,ftdpq,ftdpx,ftdpxg
        280 |  public gthe,fthe,ftheq,fthex
        281 |  public gtma,stma,stmaq,stmax,stmaxg
        282 |  public gpkap,fpkap,fpkapq,fpkapo,fpkapx
        283 |  public grkap,frkap,frkapq,frkapx
        284 |  public gtlcl,ftlcl,ftlclq,ftlclo,ftlclx
        285 |  public gfuncphys
        286 |contains
        287 |!-------------------------------------------------------------------------------
        288 |  subroutine gpvsl
        289 |!$$$     Subprogram Documentation Block
        290 |!
        291 |! Subprogram: gpvsl        Compute saturation vapor pressure table over liquid
        292 |!   Author: N Phillips            W/NMC2X2   Date: 30 dec 82
        293 |!
        294 |! Abstract: Computes saturation vapor pressure table as a function of
        295 |!   temperature for the table lookup function fpvsl.
        296 |!   Exact saturation vapor pressures are calculated in subprogram fpvslx.
        297 |!   The current implementation computes a table with a length
        298 |!   of 7501 for temperatures ranging from 180. to 330. Kelvin.
        299 |!
        300 |! Program History Log:
        301 |!   91-05-07  Iredell
        302 |!   94-12-30  Iredell             expand table
        303 |! 1999-03-01  Iredell             f90 module
        304 |!
        305 |! Usage:  call gpvsl
        306 |!
        307 |! Subprograms called:
        308 |!   (fpvslx)   inlinable function to compute saturation vapor pressure
        309 |!
        310 |! Attributes:
        311 |!   Language: Fortran 90.
        312 |!
        313 |!$$$
        314 |    implicit none
        315 |    integer jx
        316 |    real(krealfp) xmin,xmax,xinc,x,t
        317 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        318 |    xmin=180.0_krealfp
        319 |    xmax=330.0_krealfp
        320 |    xinc=(xmax-xmin)/(nxpvsl-1)
        321 |    c1xpvsl=1.-xmin/xinc
        322 |    c2xpvsl=1./xinc
        323 |    do jx=1,nxpvsl
        324 |      x=xmin+(jx-1)*xinc
        325 |      t=x
        326 |      tbpvsl(jx)=fpvslx(t)
        327 |    enddo
        328 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        329 |  end subroutine
        330 |!-------------------------------------------------------------------------------
        331 |  elemental function fpvsl(t)
        332 |!$$$     Subprogram Documentation Block
        333 |!
        334 |! Subprogram: fpvsl        Compute saturation vapor pressure over liquid
        335 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        336 |!
        337 |! Abstract: Compute saturation vapor pressure from the temperature.
        338 |!   A linear interpolation is done between values in a lookup table
        339 |!   computed in gpvsl. See documentation for fpvslx for details.
        340 |!   Input values outside table range are reset to table extrema.
        341 |!   The interpolation accuracy is almost 6 decimal places.
        342 |!   On the Cray, fpvsl is about 4 times faster than exact calculation.
        343 |!   This function should be expanded inline in the calling routine.
        344 |!
        345 |! Program History Log:
        346 |!   91-05-07  Iredell             made into inlinable function
        347 |!   94-12-30  Iredell             expand table
        348 |! 1999-03-01  Iredell             f90 module
        349 |!
        350 |! Usage:   pvsl=fpvsl(t)
        351 |!
        352 |!   Input argument list:
        353 |!     t          Real(krealfp) temperature in Kelvin
        354 |!
        355 |!   Output argument list:
        356 |!     fpvsl      Real(krealfp) saturation vapor pressure in Pascals
        357 |!
        358 |! Attributes:
        359 |!   Language: Fortran 90.
        360 |!
        361 |!$$$
        362 |    implicit none
        363 |    real(krealfp) fpvsl
        364 |    real(krealfp),intent(in):: t
        365 |    integer jx
        366 |    real(krealfp) xj
        367 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        368 |    xj=min(max(c1xpvsl+c2xpvsl*t,1._krealfp),real(nxpvsl,krealfp))
        369 |    jx=min(xj,nxpvsl-1._krealfp)
        370 |    fpvsl=tbpvsl(jx)+(xj-jx)*(tbpvsl(jx+1)-tbpvsl(jx))
        371 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        372 |  end function
        373 |!-------------------------------------------------------------------------------
        374 |  elemental function fpvslq(t)
        375 |!$$$     Subprogram Documentation Block
        376 |!
        377 |! Subprogram: fpvslq       Compute saturation vapor pressure over liquid
        378 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        379 |!
        380 |! Abstract: Compute saturation vapor pressure from the temperature.
        381 |!   A quadratic interpolation is done between values in a lookup table
        382 |!   computed in gpvsl. See documentation for fpvslx for details.
        383 |!   Input values outside table range are reset to table extrema.
        384 |!   The interpolation accuracy is almost 9 decimal places.
        385 |!   On the Cray, fpvslq is about 3 times faster than exact calculation.
        386 |!   This function should be expanded inline in the calling routine.
        387 |!
        388 |! Program History Log:
        389 |!   91-05-07  Iredell             made into inlinable function
        390 |!   94-12-30  Iredell             quadratic interpolation
        391 |! 1999-03-01  Iredell             f90 module
        392 |!
        393 |! Usage:   pvsl=fpvslq(t)
        394 |!
        395 |!   Input argument list:
        396 |!     t          Real(krealfp) temperature in Kelvin
        397 |!
        398 |!   Output argument list:
        399 |!     fpvslq     Real(krealfp) saturation vapor pressure in Pascals
        400 |!
        401 |! Attributes:
        402 |!   Language: Fortran 90.
        403 |!
        404 |!$$$
        405 |    implicit none
        406 |    real(krealfp) fpvslq
        407 |    real(krealfp),intent(in):: t
        408 |    integer jx
        409 |    real(krealfp) xj,dxj,fj1,fj2,fj3
        410 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        411 |    xj=min(max(c1xpvsl+c2xpvsl*t,1._krealfp),real(nxpvsl,krealfp))
        412 |    jx=min(max(nint(xj),2),nxpvsl-1)
        413 |    dxj=xj-jx
        414 |    fj1=tbpvsl(jx-1)
        415 |    fj2=tbpvsl(jx)
        416 |    fj3=tbpvsl(jx+1)
        417 |    fpvslq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
        418 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        419 |  end function
        420 |!-------------------------------------------------------------------------------
        421 |  elemental function fpvslx(t)
        422 |!$$$     Subprogram Documentation Block
        423 |!
        424 |! Subprogram: fpvslx       Compute saturation vapor pressure over liquid
        425 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        426 |!
        427 |! Abstract: Exactly compute saturation vapor pressure from temperature.
        428 |!   The water model assumes a perfect gas, constant specific heats
        429 |!   for gas and liquid, and neglects the volume of the liquid.
        430 |!   The model does account for the variation of the latent heat
        431 |!   of condensation with temperature.  The ice option is not included.
        432 |!   The Clausius-Clapeyron equation is integrated from the triple point
        433 |!   to get the formula
        434 |!       pvsl=con_psat*(tr**xa)*exp(xb*(1.-tr))
        435 |!   where tr is ttp/t and other values are physical constants.
        436 |!   This function should be expanded inline in the calling routine.
        437 |!
        438 |! Program History Log:
        439 |!   91-05-07  Iredell             made into inlinable function
        440 |!   94-12-30  Iredell             exact computation
        441 |! 1999-03-01  Iredell             f90 module
        442 |!
        443 |! Usage:   pvsl=fpvslx(t)
        444 |!
        445 |!   Input argument list:
        446 |!     t          Real(krealfp) temperature in Kelvin
        447 |!
        448 |!   Output argument list:
        449 |!     fpvslx     Real(krealfp) saturation vapor pressure in Pascals
        450 |!
        451 |! Attributes:
        452 |!   Language: Fortran 90.
        453 |!
        454 |!$$$
        455 |    implicit none
        456 |    real(krealfp) fpvslx
        457 |    real(krealfp),intent(in):: t
        458 |    real(krealfp),parameter:: dldt=con_cvap-con_cliq
        459 |    real(krealfp),parameter:: heat=con_hvap
        460 |    real(krealfp),parameter:: xpona=-dldt/con_rv
        461 |    real(krealfp),parameter:: xponb=-dldt/con_rv+heat/(con_rv*con_ttp)
        462 |    real(krealfp) tr
        463 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        464 |    tr=con_ttp/t
        465 |    fpvslx=con_psat*(tr**xpona)*exp(xponb*(1.-tr))
        466 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        467 |  end function
        468 |!-------------------------------------------------------------------------------
        469 |  subroutine gpvsi
        470 |!$$$     Subprogram Documentation Block
        471 |!
        472 |! Subprogram: gpvsi        Compute saturation vapor pressure table over ice
        473 |!   Author: N Phillips            W/NMC2X2   Date: 30 dec 82
        474 |!
        475 |! Abstract: Computes saturation vapor pressure table as a function of
        476 |!   temperature for the table lookup function fpvsi.
        477 |!   Exact saturation vapor pressures are calculated in subprogram fpvsix.
        478 |!   The current implementation computes a table with a length
        479 |!   of 7501 for temperatures ranging from 180. to 330. Kelvin.
        480 |!
        481 |! Program History Log:
        482 |!   91-05-07  Iredell
        483 |!   94-12-30  Iredell             expand table
        484 |! 1999-03-01  Iredell             f90 module
        485 |! 2001-02-26  Iredell             ice phase
        486 |!
        487 |! Usage:  call gpvsi
        488 |!
        489 |! Subprograms called:
        490 |!   (fpvsix)   inlinable function to compute saturation vapor pressure
        491 |!
        492 |! Attributes:
        493 |!   Language: Fortran 90.
        494 |!
        495 |!$$$
        496 |    implicit none
        497 |    integer jx
        498 |    real(krealfp) xmin,xmax,xinc,x,t
        499 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        500 |    xmin=180.0_krealfp
        501 |    xmax=330.0_krealfp
        502 |    xinc=(xmax-xmin)/(nxpvsi-1)
        503 |    c1xpvsi=1.-xmin/xinc
        504 |    c2xpvsi=1./xinc
        505 |    do jx=1,nxpvsi
        506 |      x=xmin+(jx-1)*xinc
        507 |      t=x
        508 |      tbpvsi(jx)=fpvsix(t)
        509 |    enddo
        510 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        511 |  end subroutine
        512 |!-------------------------------------------------------------------------------
        513 |  elemental function fpvsi(t)
        514 |!$$$     Subprogram Documentation Block
        515 |!
        516 |! Subprogram: fpvsi        Compute saturation vapor pressure over ice
        517 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        518 |!
        519 |! Abstract: Compute saturation vapor pressure from the temperature.
        520 |!   A linear interpolation is done between values in a lookup table
        521 |!   computed in gpvsi. See documentation for fpvsix for details.
        522 |!   Input values outside table range are reset to table extrema.
        523 |!   The interpolation accuracy is almost 6 decimal places.
        524 |!   On the Cray, fpvsi is about 4 times faster than exact calculation.
        525 |!   This function should be expanded inline in the calling routine.
        526 |!
        527 |! Program History Log:
        528 |!   91-05-07  Iredell             made into inlinable function
        529 |!   94-12-30  Iredell             expand table
        530 |! 1999-03-01  Iredell             f90 module
        531 |! 2001-02-26  Iredell             ice phase
        532 |!
        533 |! Usage:   pvsi=fpvsi(t)
        534 |!
        535 |!   Input argument list:
        536 |!     t          Real(krealfp) temperature in Kelvin
        537 |!
        538 |!   Output argument list:
        539 |!     fpvsi      Real(krealfp) saturation vapor pressure in Pascals
        540 |!
        541 |! Attributes:
        542 |!   Language: Fortran 90.
        543 |!
        544 |!$$$
        545 |    implicit none
        546 |    real(krealfp) fpvsi
        547 |    real(krealfp),intent(in):: t
        548 |    integer jx
        549 |    real(krealfp) xj
        550 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        551 |    xj=min(max(c1xpvsi+c2xpvsi*t,1._krealfp),real(nxpvsi,krealfp))
        552 |    jx=min(xj,nxpvsi-1._krealfp)
        553 |    fpvsi=tbpvsi(jx)+(xj-jx)*(tbpvsi(jx+1)-tbpvsi(jx))
        554 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        555 |  end function
        556 |!-------------------------------------------------------------------------------
        557 |  elemental function fpvsiq(t)
        558 |!$$$     Subprogram Documentation Block
        559 |!
        560 |! Subprogram: fpvsiq       Compute saturation vapor pressure over ice
        561 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        562 |!
        563 |! Abstract: Compute saturation vapor pressure from the temperature.
        564 |!   A quadratic interpolation is done between values in a lookup table
        565 |!   computed in gpvsi. See documentation for fpvsix for details.
        566 |!   Input values outside table range are reset to table extrema.
        567 |!   The interpolation accuracy is almost 9 decimal places.
        568 |!   On the Cray, fpvsiq is about 3 times faster than exact calculation.
        569 |!   This function should be expanded inline in the calling routine.
        570 |!
        571 |! Program History Log:
        572 |!   91-05-07  Iredell             made into inlinable function
        573 |!   94-12-30  Iredell             quadratic interpolation
        574 |! 1999-03-01  Iredell             f90 module
        575 |! 2001-02-26  Iredell             ice phase
        576 |!
        577 |! Usage:   pvsi=fpvsiq(t)
        578 |!
        579 |!   Input argument list:
        580 |!     t          Real(krealfp) temperature in Kelvin
        581 |!
        582 |!   Output argument list:
        583 |!     fpvsiq     Real(krealfp) saturation vapor pressure in Pascals
        584 |!
        585 |! Attributes:
        586 |!   Language: Fortran 90.
        587 |!
        588 |!$$$
        589 |    implicit none
        590 |    real(krealfp) fpvsiq
        591 |    real(krealfp),intent(in):: t
        592 |    integer jx
        593 |    real(krealfp) xj,dxj,fj1,fj2,fj3
        594 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        595 |    xj=min(max(c1xpvsi+c2xpvsi*t,1._krealfp),real(nxpvsi,krealfp))
        596 |    jx=min(max(nint(xj),2),nxpvsi-1)
        597 |    dxj=xj-jx
        598 |    fj1=tbpvsi(jx-1)
        599 |    fj2=tbpvsi(jx)
        600 |    fj3=tbpvsi(jx+1)
        601 |    fpvsiq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
        602 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        603 |  end function
        604 |!-------------------------------------------------------------------------------
        605 |  elemental function fpvsix(t)
        606 |!$$$     Subprogram Documentation Block
        607 |!
        608 |! Subprogram: fpvsix       Compute saturation vapor pressure over ice
        609 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        610 |!
        611 |! Abstract: Exactly compute saturation vapor pressure from temperature.
        612 |!   The water model assumes a perfect gas, constant specific heats
        613 |!   for gas and ice, and neglects the volume of the ice.
        614 |!   The model does account for the variation of the latent heat
        615 |!   of condensation with temperature.  The liquid option is not included.
        616 |!   The Clausius-Clapeyron equation is integrated from the triple point
        617 |!   to get the formula
        618 |!       pvsi=con_psat*(tr**xa)*exp(xb*(1.-tr))
        619 |!   where tr is ttp/t and other values are physical constants.
        620 |!   This function should be expanded inline in the calling routine.
        621 |!
        622 |! Program History Log:
        623 |!   91-05-07  Iredell             made into inlinable function
        624 |!   94-12-30  Iredell             exact computation
        625 |! 1999-03-01  Iredell             f90 module
        626 |! 2001-02-26  Iredell             ice phase
        627 |!
        628 |! Usage:   pvsi=fpvsix(t)
        629 |!
        630 |!   Input argument list:
        631 |!     t          Real(krealfp) temperature in Kelvin
        632 |!
        633 |!   Output argument list:
        634 |!     fpvsix     Real(krealfp) saturation vapor pressure in Pascals
        635 |!
        636 |! Attributes:
        637 |!   Language: Fortran 90.
        638 |!
        639 |!$$$
        640 |    implicit none
        641 |    real(krealfp) fpvsix
        642 |    real(krealfp),intent(in):: t
        643 |    real(krealfp),parameter:: dldt=con_cvap-con_csol
        644 |    real(krealfp),parameter:: heat=con_hvap+con_hfus
        645 |    real(krealfp),parameter:: xpona=-dldt/con_rv
        646 |    real(krealfp),parameter:: xponb=-dldt/con_rv+heat/(con_rv*con_ttp)
        647 |    real(krealfp) tr
        648 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        649 |    tr=con_ttp/t
        650 |    fpvsix=con_psat*(tr**xpona)*exp(xponb*(1.-tr))
        651 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        652 |  end function
        653 |!-------------------------------------------------------------------------------
        654 |  subroutine gpvs
        655 |!$$$     Subprogram Documentation Block
        656 |!
        657 |! Subprogram: gpvs         Compute saturation vapor pressure table
        658 |!   Author: N Phillips            W/NMC2X2   Date: 30 dec 82
        659 |!
        660 |! Abstract: Computes saturation vapor pressure table as a function of
        661 |!   temperature for the table lookup function fpvs.
        662 |!   Exact saturation vapor pressures are calculated in subprogram fpvsx.
        663 |!   The current implementation computes a table with a length
        664 |!   of 7501 for temperatures ranging from 180. to 330. Kelvin.
        665 |!
        666 |! Program History Log:
        667 |!   91-05-07  Iredell
        668 |!   94-12-30  Iredell             expand table
        669 |! 1999-03-01  Iredell             f90 module
        670 |! 2001-02-26  Iredell             ice phase
        671 |!
        672 |! Usage:  call gpvs
        673 |!
        674 |! Subprograms called:
        675 |!   (fpvsx)    inlinable function to compute saturation vapor pressure
        676 |!
        677 |! Attributes:
        678 |!   Language: Fortran 90.
        679 |!
        680 |!$$$
        681 |    implicit none
        682 |    integer jx
        683 |    real(krealfp) xmin,xmax,xinc,x,t
        684 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        685 |    xmin=180.0_krealfp
        686 |    xmax=330.0_krealfp
        687 |    xinc=(xmax-xmin)/(nxpvs-1)
        688 |    c1xpvs=1.-xmin/xinc
        689 |    c2xpvs=1./xinc
        690 |    do jx=1,nxpvs
        691 |      x=xmin+(jx-1)*xinc
        692 |      t=x
        693 |      tbpvs(jx)=fpvsx(t)
        694 |    enddo
        695 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        696 |  end subroutine
        697 |!-------------------------------------------------------------------------------
        698 |  elemental function fpvs(t)
        699 |!$$$     Subprogram Documentation Block
        700 |!
        701 |! Subprogram: fpvs         Compute saturation vapor pressure
        702 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        703 |!
        704 |! Abstract: Compute saturation vapor pressure from the temperature.
        705 |!   A linear interpolation is done between values in a lookup table
        706 |!   computed in gpvs. See documentation for fpvsx for details.
        707 |!   Input values outside table range are reset to table extrema.
        708 |!   The interpolation accuracy is almost 6 decimal places.
        709 |!   On the Cray, fpvs is about 4 times faster than exact calculation.
        710 |!   This function should be expanded inline in the calling routine.
        711 |!
        712 |! Program History Log:
        713 |!   91-05-07  Iredell             made into inlinable function
        714 |!   94-12-30  Iredell             expand table
        715 |! 1999-03-01  Iredell             f90 module
        716 |! 2001-02-26  Iredell             ice phase
        717 |!
        718 |! Usage:   pvs=fpvs(t)
        719 |!
        720 |!   Input argument list:
        721 |!     t          Real(krealfp) temperature in Kelvin
        722 |!
        723 |!   Output argument list:
        724 |!     fpvs       Real(krealfp) saturation vapor pressure in Pascals
        725 |!
        726 |! Attributes:
        727 |!   Language: Fortran 90.
        728 |!
        729 |!$$$
        730 |    implicit none
        731 |    real(krealfp) fpvs
        732 |    real(krealfp),intent(in):: t
        733 |    integer jx
        734 |    real(krealfp) xj
        735 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        736 |    xj=min(max(c1xpvs+c2xpvs*t,1._krealfp),real(nxpvs,krealfp))
        737 |    jx=min(xj,nxpvs-1._krealfp)
        738 |    fpvs=tbpvs(jx)+(xj-jx)*(tbpvs(jx+1)-tbpvs(jx))
        739 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        740 |  end function
        741 |!-------------------------------------------------------------------------------
        742 |  elemental function fpvsq(t)
        743 |!$$$     Subprogram Documentation Block
        744 |!
        745 |! Subprogram: fpvsq        Compute saturation vapor pressure
        746 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        747 |!
        748 |! Abstract: Compute saturation vapor pressure from the temperature.
        749 |!   A quadratic interpolation is done between values in a lookup table
        750 |!   computed in gpvs. See documentation for fpvsx for details.
        751 |!   Input values outside table range are reset to table extrema.
        752 |!   The interpolation accuracy is almost 9 decimal places.
        753 |!   On the Cray, fpvsq is about 3 times faster than exact calculation.
        754 |!   This function should be expanded inline in the calling routine.
        755 |!
        756 |! Program History Log:
        757 |!   91-05-07  Iredell             made into inlinable function
        758 |!   94-12-30  Iredell             quadratic interpolation
        759 |! 1999-03-01  Iredell             f90 module
        760 |! 2001-02-26  Iredell             ice phase
        761 |!
        762 |! Usage:   pvs=fpvsq(t)
        763 |!
        764 |!   Input argument list:
        765 |!     t          Real(krealfp) temperature in Kelvin
        766 |!
        767 |!   Output argument list:
        768 |!     fpvsq      Real(krealfp) saturation vapor pressure in Pascals
        769 |!
        770 |! Attributes:
        771 |!   Language: Fortran 90.
        772 |!
        773 |!$$$
        774 |    implicit none
        775 |    real(krealfp) fpvsq
        776 |    real(krealfp),intent(in):: t
        777 |    integer jx
        778 |    real(krealfp) xj,dxj,fj1,fj2,fj3
        779 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        780 |    xj=min(max(c1xpvs+c2xpvs*t,1._krealfp),real(nxpvs,krealfp))
        781 |    jx=min(max(nint(xj),2),nxpvs-1)
        782 |    dxj=xj-jx
        783 |    fj1=tbpvs(jx-1)
        784 |    fj2=tbpvs(jx)
        785 |    fj3=tbpvs(jx+1)
        786 |    fpvsq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
        787 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        788 |  end function
        789 |!-------------------------------------------------------------------------------
        790 |  elemental function fpvsx(t)
        791 |!$$$     Subprogram Documentation Block
        792 |!
        793 |! Subprogram: fpvsx        Compute saturation vapor pressure
        794 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        795 |!
        796 |! Abstract: Exactly compute saturation vapor pressure from temperature.
        797 |!   The saturation vapor pressure over either liquid and ice is computed
        798 |!   over liquid for temperatures above the triple point,
        799 |!   over ice for temperatures 20 degress below the triple point,
        800 |!   and a linear combination of the two for temperatures in between.
        801 |!   The water model assumes a perfect gas, constant specific heats
        802 |!   for gas, liquid and ice, and neglects the volume of the condensate.
        803 |!   The model does account for the variation of the latent heat
        804 |!   of condensation and sublimation with temperature.
        805 |!   The Clausius-Clapeyron equation is integrated from the triple point
        806 |!   to get the formula
        807 |!       pvsl=con_psat*(tr**xa)*exp(xb*(1.-tr))
        808 |!   where tr is ttp/t and other values are physical constants.
        809 |!   The reference for this computation is Emanuel(1994), pages 116-117.
        810 |!   This function should be expanded inline in the calling routine.
        811 |!
        812 |! Program History Log:
        813 |!   91-05-07  Iredell             made into inlinable function
        814 |!   94-12-30  Iredell             exact computation
        815 |! 1999-03-01  Iredell             f90 module
        816 |! 2001-02-26  Iredell             ice phase
        817 |!
        818 |! Usage:   pvs=fpvsx(t)
        819 |!
        820 |!   Input argument list:
        821 |!     t          Real(krealfp) temperature in Kelvin
        822 |!
        823 |!   Output argument list:
        824 |!     fpvsx      Real(krealfp) saturation vapor pressure in Pascals
        825 |!
        826 |! Attributes:
        827 |!   Language: Fortran 90.
        828 |!
        829 |!$$$
        830 |    implicit none
        831 |    real(krealfp) fpvsx
        832 |    real(krealfp),intent(in):: t
        833 |    real(krealfp),parameter:: tliq=con_ttp
        834 |    real(krealfp),parameter:: tice=con_ttp-20.0
        835 |    real(krealfp),parameter:: dldtl=con_cvap-con_cliq
        836 |    real(krealfp),parameter:: heatl=con_hvap
        837 |    real(krealfp),parameter:: xponal=-dldtl/con_rv
        838 |    real(krealfp),parameter:: xponbl=-dldtl/con_rv+heatl/(con_rv*con_ttp)
        839 |    real(krealfp),parameter:: dldti=con_cvap-con_csol
        840 |    real(krealfp),parameter:: heati=con_hvap+con_hfus
        841 |    real(krealfp),parameter:: xponai=-dldti/con_rv
        842 |    real(krealfp),parameter:: xponbi=-dldti/con_rv+heati/(con_rv*con_ttp)
        843 |    real(krealfp) tr,w,pvl,pvi
        844 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        845 |    tr=con_ttp/t
        846 |    if(t.ge.tliq) then
        847 |      fpvsx=con_psat*(tr**xponal)*exp(xponbl*(1.-tr))
        848 |    elseif(t.lt.tice) then
        849 |      fpvsx=con_psat*(tr**xponai)*exp(xponbi*(1.-tr))
        850 |    else
        851 |      w=(t-tice)/(tliq-tice)
        852 |      pvl=con_psat*(tr**xponal)*exp(xponbl*(1.-tr))
        853 |      pvi=con_psat*(tr**xponai)*exp(xponbi*(1.-tr))
        854 |      fpvsx=w*pvl+(1.-w)*pvi
        855 |    endif
        856 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        857 |  end function
        858 |!-------------------------------------------------------------------------------
        859 |  subroutine gtdpl
        860 |!$$$     Subprogram Documentation Block
        861 |!
        862 |! Subprogram: gtdpl        Compute dewpoint temperature over liquid table
        863 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        864 |!
        865 |! Abstract: Compute dewpoint temperature table as a function of
        866 |!   vapor pressure for inlinable function ftdpl.
        867 |!   Exact dewpoint temperatures are calculated in subprogram ftdplxg.
        868 |!   The current implementation computes a table with a length
        869 |!   of 5001 for vapor pressures ranging from 1 to 10001 Pascals
        870 |!   giving a dewpoint temperature range of 208 to 319 Kelvin.
        871 |!
        872 |! Program History Log:
        873 |!   91-05-07  Iredell
        874 |!   94-12-30  Iredell             expand table
        875 |! 1999-03-01  Iredell             f90 module
        876 |!
        877 |! Usage:  call gtdpl
        878 |!
        879 |! Subprograms called:
        880 |!   (ftdplxg)  inlinable function to compute dewpoint temperature over liquid
        881 |!
        882 |! Attributes:
        883 |!   Language: Fortran 90.
        884 |!
        885 |!$$$
        886 |    implicit none
        887 |    integer jx
        888 |    real(krealfp) xmin,xmax,xinc,t,x,pv
        889 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        890 |    xmin=1
        891 |    xmax=10001
        892 |    xinc=(xmax-xmin)/(nxtdpl-1)
        893 |    c1xtdpl=1.-xmin/xinc
        894 |    c2xtdpl=1./xinc
        895 |    t=208.0
        896 |    do jx=1,nxtdpl
        897 |      x=xmin+(jx-1)*xinc
        898 |      pv=x
        899 |      t=ftdplxg(t,pv)
        900 |      tbtdpl(jx)=t
        901 |    enddo
        902 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        903 |  end subroutine
        904 |!-------------------------------------------------------------------------------
        905 |  elemental function ftdpl(pv)
        906 |!$$$     Subprogram Documentation Block
        907 |!
        908 |! Subprogram: ftdpl        Compute dewpoint temperature over liquid
        909 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        910 |!
        911 |! Abstract: Compute dewpoint temperature from vapor pressure.
        912 |!   A linear interpolation is done between values in a lookup table
        913 |!   computed in gtdpl. See documentation for ftdplxg for details.
        914 |!   Input values outside table range are reset to table extrema.
        915 |!   The interpolation accuracy is better than 0.0005 Kelvin
        916 |!   for dewpoint temperatures greater than 250 Kelvin,
        917 |!   but decreases to 0.02 Kelvin for a dewpoint around 230 Kelvin.
        918 |!   On the Cray, ftdpl is about 75 times faster than exact calculation.
        919 |!   This function should be expanded inline in the calling routine.
        920 |!
        921 |! Program History Log:
        922 |!   91-05-07  Iredell             made into inlinable function
        923 |!   94-12-30  Iredell             expand table
        924 |! 1999-03-01  Iredell             f90 module
        925 |!
        926 |! Usage:   tdpl=ftdpl(pv)
        927 |!
        928 |!   Input argument list:
        929 |!     pv         Real(krealfp) vapor pressure in Pascals
        930 |!
        931 |!   Output argument list:
        932 |!     ftdpl      Real(krealfp) dewpoint temperature in Kelvin
        933 |!
        934 |! Attributes:
        935 |!   Language: Fortran 90.
        936 |!
        937 |!$$$
        938 |    implicit none
        939 |    real(krealfp) ftdpl
        940 |    real(krealfp),intent(in):: pv
        941 |    integer jx
        942 |    real(krealfp) xj
        943 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        944 |    xj=min(max(c1xtdpl+c2xtdpl*pv,1._krealfp),real(nxtdpl,krealfp))
        945 |    jx=min(xj,nxtdpl-1._krealfp)
        946 |    ftdpl=tbtdpl(jx)+(xj-jx)*(tbtdpl(jx+1)-tbtdpl(jx))
        947 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        948 |  end function
        949 |!-------------------------------------------------------------------------------
        950 |  elemental function ftdplq(pv)
        951 |!$$$     Subprogram Documentation Block
        952 |!
        953 |! Subprogram: ftdplq       Compute dewpoint temperature over liquid
        954 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
        955 |!
        956 |! Abstract: Compute dewpoint temperature from vapor pressure.
        957 |!   A quadratic interpolation is done between values in a lookup table
        958 |!   computed in gtdpl. see documentation for ftdplxg for details.
        959 |!   Input values outside table range are reset to table extrema.
        960 |!   the interpolation accuracy is better than 0.00001 Kelvin
        961 |!   for dewpoint temperatures greater than 250 Kelvin,
        962 |!   but decreases to 0.002 Kelvin for a dewpoint around 230 Kelvin.
        963 |!   On the Cray, ftdplq is about 60 times faster than exact calculation.
        964 |!   This function should be expanded inline in the calling routine.
        965 |!
        966 |! Program History Log:
        967 |!   91-05-07  Iredell             made into inlinable function
        968 |!   94-12-30  Iredell             quadratic interpolation
        969 |! 1999-03-01  Iredell             f90 module
        970 |!
        971 |! Usage:   tdpl=ftdplq(pv)
        972 |!
        973 |!   Input argument list:
        974 |!     pv         Real(krealfp) vapor pressure in Pascals
        975 |!
        976 |!   Output argument list:
        977 |!     ftdplq     Real(krealfp) dewpoint temperature in Kelvin
        978 |!
        979 |! Attributes:
        980 |!   Language: Fortran 90.
        981 |!
        982 |!$$$
        983 |    implicit none
        984 |    real(krealfp) ftdplq
        985 |    real(krealfp),intent(in):: pv
        986 |    integer jx
        987 |    real(krealfp) xj,dxj,fj1,fj2,fj3
        988 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        989 |    xj=min(max(c1xtdpl+c2xtdpl*pv,1._krealfp),real(nxtdpl,krealfp))
        990 |    jx=min(max(nint(xj),2),nxtdpl-1)
        991 |    dxj=xj-jx
        992 |    fj1=tbtdpl(jx-1)
        993 |    fj2=tbtdpl(jx)
        994 |    fj3=tbtdpl(jx+1)
        995 |    ftdplq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
        996 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        997 |  end function
        998 |!-------------------------------------------------------------------------------
        999 |  elemental function ftdplx(pv)
       1000 |!$$$     Subprogram Documentation Block
       1001 |!
       1002 |! Subprogram: ftdplx       Compute dewpoint temperature over liquid
       1003 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1004 |!
       1005 |! Abstract: exactly compute dewpoint temperature from vapor pressure.
       1006 |!   An approximate dewpoint temperature for function ftdplxg
       1007 |!   is obtained using ftdpl so gtdpl must be already called.
       1008 |!   See documentation for ftdplxg for details.
       1009 |!
       1010 |! Program History Log:
       1011 |!   91-05-07  Iredell             made into inlinable function
       1012 |!   94-12-30  Iredell             exact computation
       1013 |! 1999-03-01  Iredell             f90 module
       1014 |!
       1015 |! Usage:   tdpl=ftdplx(pv)
       1016 |!
       1017 |!   Input argument list:
       1018 |!     pv         Real(krealfp) vapor pressure in Pascals
       1019 |!
       1020 |!   Output argument list:
       1021 |!     ftdplx     Real(krealfp) dewpoint temperature in Kelvin
       1022 |!
       1023 |! Subprograms called:
       1024 |!   (ftdpl)    inlinable function to compute dewpoint temperature over liquid
       1025 |!   (ftdplxg)  inlinable function to compute dewpoint temperature over liquid
       1026 |!
       1027 |! Attributes:
       1028 |!   Language: Fortran 90.
       1029 |!
       1030 |!$$$
       1031 |    implicit none
       1032 |    real(krealfp) ftdplx
       1033 |    real(krealfp),intent(in):: pv
       1034 |    real(krealfp) tg
       1035 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1036 |    tg=ftdpl(pv)
       1037 |    ftdplx=ftdplxg(tg,pv)
       1038 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1039 |  end function
       1040 |!-------------------------------------------------------------------------------
       1041 |  elemental function ftdplxg(tg,pv)
       1042 |!$$$     Subprogram Documentation Block
       1043 |!
       1044 |! Subprogram: ftdplxg      Compute dewpoint temperature over liquid
       1045 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1046 |!
       1047 |! Abstract: Exactly compute dewpoint temperature from vapor pressure.
       1048 |!   A guess dewpoint temperature must be provided.
       1049 |!   The water model assumes a perfect gas, constant specific heats
       1050 |!   for gas and liquid, and neglects the volume of the liquid.
       1051 |!   The model does account for the variation of the latent heat
       1052 |!   of condensation with temperature.  The ice option is not included.
       1053 |!   The Clausius-Clapeyron equation is integrated from the triple point
       1054 |!   to get the formula
       1055 |!       pvs=con_psat*(tr**xa)*exp(xb*(1.-tr))
       1056 |!   where tr is ttp/t and other values are physical constants.
       1057 |!   The formula is inverted by iterating Newtonian approximations
       1058 |!   for each pvs until t is found to within 1.e-6 Kelvin.
       1059 |!   This function can be expanded inline in the calling routine.
       1060 |!
       1061 |! Program History Log:
       1062 |!   91-05-07  Iredell             made into inlinable function
       1063 |!   94-12-30  Iredell             exact computation
       1064 |! 1999-03-01  Iredell             f90 module
       1065 |!
       1066 |! Usage:   tdpl=ftdplxg(tg,pv)
       1067 |!
       1068 |!   Input argument list:
       1069 |!     tg         Real(krealfp) guess dewpoint temperature in Kelvin
       1070 |!     pv         Real(krealfp) vapor pressure in Pascals
       1071 |!
       1072 |!   Output argument list:
       1073 |!     ftdplxg    Real(krealfp) dewpoint temperature in Kelvin
       1074 |!
       1075 |! Attributes:
       1076 |!   Language: Fortran 90.
       1077 |!
       1078 |!$$$
       1079 |    implicit none
       1080 |    real(krealfp) ftdplxg
       1081 |    real(krealfp),intent(in):: tg,pv
       1082 |    real(krealfp),parameter:: terrm=1.e-6
       1083 |    real(krealfp),parameter:: dldt=con_cvap-con_cliq
       1084 |    real(krealfp),parameter:: heat=con_hvap
       1085 |    real(krealfp),parameter:: xpona=-dldt/con_rv
       1086 |    real(krealfp),parameter:: xponb=-dldt/con_rv+heat/(con_rv*con_ttp)
       1087 |    real(krealfp) t,tr,pvt,el,dpvt,terr
       1088 |    integer i
       1089 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1090 |    t=tg
       1091 |    do i=1,100
       1092 |      tr=con_ttp/t
       1093 |      pvt=con_psat*(tr**xpona)*exp(xponb*(1.-tr))
       1094 |      el=heat+dldt*(t-con_ttp)
       1095 |      dpvt=el*pvt/(con_rv*t**2)
       1096 |      terr=(pvt-pv)/dpvt
       1097 |      t=t-terr
       1098 |      if(abs(terr).le.terrm) exit
       1099 |    enddo
       1100 |    ftdplxg=t
       1101 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1102 |  end function
       1103 |!-------------------------------------------------------------------------------
       1104 |  subroutine gtdpi
       1105 |!$$$     Subprogram Documentation Block
       1106 |!
       1107 |! Subprogram: gtdpi        Compute dewpoint temperature over ice table
       1108 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1109 |!
       1110 |! Abstract: Compute dewpoint temperature table as a function of
       1111 |!   vapor pressure for inlinable function ftdpi.
       1112 |!   Exact dewpoint temperatures are calculated in subprogram ftdpixg.
       1113 |!   The current implementation computes a table with a length
       1114 |!   of 5001 for vapor pressures ranging from 0.1 to 1000.1 Pascals
       1115 |!   giving a dewpoint temperature range of 197 to 279 Kelvin.
       1116 |!
       1117 |! Program History Log:
       1118 |!   91-05-07  Iredell
       1119 |!   94-12-30  Iredell             expand table
       1120 |! 1999-03-01  Iredell             f90 module
       1121 |! 2001-02-26  Iredell             ice phase
       1122 |!
       1123 |! Usage:  call gtdpi
       1124 |!
       1125 |! Subprograms called:
       1126 |!   (ftdpixg)  inlinable function to compute dewpoint temperature over ice
       1127 |!
       1128 |! Attributes:
       1129 |!   Language: Fortran 90.
       1130 |!
       1131 |!$$$
       1132 |    implicit none
       1133 |    integer jx
       1134 |    real(krealfp) xmin,xmax,xinc,t,x,pv
       1135 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1136 |    xmin=0.1
       1137 |    xmax=1000.1
       1138 |    xinc=(xmax-xmin)/(nxtdpi-1)
       1139 |    c1xtdpi=1.-xmin/xinc
       1140 |    c2xtdpi=1./xinc
       1141 |    t=197.0
       1142 |    do jx=1,nxtdpi
       1143 |      x=xmin+(jx-1)*xinc
       1144 |      pv=x
       1145 |      t=ftdpixg(t,pv)
       1146 |      tbtdpi(jx)=t
       1147 |    enddo
       1148 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1149 |  end subroutine
       1150 |!-------------------------------------------------------------------------------
       1151 |  elemental function ftdpi(pv)
       1152 |!$$$     Subprogram Documentation Block
       1153 |!
       1154 |! Subprogram: ftdpi        Compute dewpoint temperature over ice
       1155 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1156 |!
       1157 |! Abstract: Compute dewpoint temperature from vapor pressure.
       1158 |!   A linear interpolation is done between values in a lookup table
       1159 |!   computed in gtdpi. See documentation for ftdpixg for details.
       1160 |!   Input values outside table range are reset to table extrema.
       1161 |!   The interpolation accuracy is better than 0.0005 Kelvin
       1162 |!   for dewpoint temperatures greater than 250 Kelvin,
       1163 |!   but decreases to 0.02 Kelvin for a dewpoint around 230 Kelvin.
       1164 |!   On the Cray, ftdpi is about 75 times faster than exact calculation.
       1165 |!   This function should be expanded inline in the calling routine.
       1166 |!
       1167 |! Program History Log:
       1168 |!   91-05-07  Iredell             made into inlinable function
       1169 |!   94-12-30  Iredell             expand table
       1170 |! 1999-03-01  Iredell             f90 module
       1171 |! 2001-02-26  Iredell             ice phase
       1172 |!
       1173 |! Usage:   tdpi=ftdpi(pv)
       1174 |!
       1175 |!   Input argument list:
       1176 |!     pv         Real(krealfp) vapor pressure in Pascals
       1177 |!
       1178 |!   Output argument list:
       1179 |!     ftdpi      Real(krealfp) dewpoint temperature in Kelvin
       1180 |!
       1181 |! Attributes:
       1182 |!   Language: Fortran 90.
       1183 |!
       1184 |!$$$
       1185 |    implicit none
       1186 |    real(krealfp) ftdpi
       1187 |    real(krealfp),intent(in):: pv
       1188 |    integer jx
       1189 |    real(krealfp) xj
       1190 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1191 |    xj=min(max(c1xtdpi+c2xtdpi*pv,1._krealfp),real(nxtdpi,krealfp))
       1192 |    jx=min(xj,nxtdpi-1._krealfp)
       1193 |    ftdpi=tbtdpi(jx)+(xj-jx)*(tbtdpi(jx+1)-tbtdpi(jx))
       1194 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1195 |  end function
       1196 |!-------------------------------------------------------------------------------
       1197 |  elemental function ftdpiq(pv)
       1198 |!$$$     Subprogram Documentation Block
       1199 |!
       1200 |! Subprogram: ftdpiq       Compute dewpoint temperature over ice
       1201 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1202 |!
       1203 |! Abstract: Compute dewpoint temperature from vapor pressure.
       1204 |!   A quadratic interpolation is done between values in a lookup table
       1205 |!   computed in gtdpi. see documentation for ftdpixg for details.
       1206 |!   Input values outside table range are reset to table extrema.
       1207 |!   the interpolation accuracy is better than 0.00001 Kelvin
       1208 |!   for dewpoint temperatures greater than 250 Kelvin,
       1209 |!   but decreases to 0.002 Kelvin for a dewpoint around 230 Kelvin.
       1210 |!   On the Cray, ftdpiq is about 60 times faster than exact calculation.
       1211 |!   This function should be expanded inline in the calling routine.
       1212 |!
       1213 |! Program History Log:
       1214 |!   91-05-07  Iredell             made into inlinable function
       1215 |!   94-12-30  Iredell             quadratic interpolation
       1216 |! 1999-03-01  Iredell             f90 module
       1217 |! 2001-02-26  Iredell             ice phase
       1218 |!
       1219 |! Usage:   tdpi=ftdpiq(pv)
       1220 |!
       1221 |!   Input argument list:
       1222 |!     pv         Real(krealfp) vapor pressure in Pascals
       1223 |!
       1224 |!   Output argument list:
       1225 |!     ftdpiq     Real(krealfp) dewpoint temperature in Kelvin
       1226 |!
       1227 |! Attributes:
       1228 |!   Language: Fortran 90.
       1229 |!
       1230 |!$$$
       1231 |    implicit none
       1232 |    real(krealfp) ftdpiq
       1233 |    real(krealfp),intent(in):: pv
       1234 |    integer jx
       1235 |    real(krealfp) xj,dxj,fj1,fj2,fj3
       1236 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1237 |    xj=min(max(c1xtdpi+c2xtdpi*pv,1._krealfp),real(nxtdpi,krealfp))
       1238 |    jx=min(max(nint(xj),2),nxtdpi-1)
       1239 |    dxj=xj-jx
       1240 |    fj1=tbtdpi(jx-1)
       1241 |    fj2=tbtdpi(jx)
       1242 |    fj3=tbtdpi(jx+1)
       1243 |    ftdpiq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
       1244 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1245 |  end function
       1246 |!-------------------------------------------------------------------------------
       1247 |  elemental function ftdpix(pv)
       1248 |!$$$     Subprogram Documentation Block
       1249 |!
       1250 |! Subprogram: ftdpix       Compute dewpoint temperature over ice
       1251 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1252 |!
       1253 |! Abstract: exactly compute dewpoint temperature from vapor pressure.
       1254 |!   An approximate dewpoint temperature for function ftdpixg
       1255 |!   is obtained using ftdpi so gtdpi must be already called.
       1256 |!   See documentation for ftdpixg for details.
       1257 |!
       1258 |! Program History Log:
       1259 |!   91-05-07  Iredell             made into inlinable function
       1260 |!   94-12-30  Iredell             exact computation
       1261 |! 1999-03-01  Iredell             f90 module
       1262 |! 2001-02-26  Iredell             ice phase
       1263 |!
       1264 |! Usage:   tdpi=ftdpix(pv)
       1265 |!
       1266 |!   Input argument list:
       1267 |!     pv         Real(krealfp) vapor pressure in Pascals
       1268 |!
       1269 |!   Output argument list:
       1270 |!     ftdpix     Real(krealfp) dewpoint temperature in Kelvin
       1271 |!
       1272 |! Subprograms called:
       1273 |!   (ftdpi)    inlinable function to compute dewpoint temperature over ice
       1274 |!   (ftdpixg)  inlinable function to compute dewpoint temperature over ice
       1275 |!
       1276 |! Attributes:
       1277 |!   Language: Fortran 90.
       1278 |!
       1279 |!$$$
       1280 |    implicit none
       1281 |    real(krealfp) ftdpix
       1282 |    real(krealfp),intent(in):: pv
       1283 |    real(krealfp) tg
       1284 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1285 |    tg=ftdpi(pv)
       1286 |    ftdpix=ftdpixg(tg,pv)
       1287 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1288 |  end function
       1289 |!-------------------------------------------------------------------------------
       1290 |  elemental function ftdpixg(tg,pv)
       1291 |!$$$     Subprogram Documentation Block
       1292 |!
       1293 |! Subprogram: ftdpixg      Compute dewpoint temperature over ice
       1294 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1295 |!
       1296 |! Abstract: Exactly compute dewpoint temperature from vapor pressure.
       1297 |!   A guess dewpoint temperature must be provided.
       1298 |!   The water model assumes a perfect gas, constant specific heats
       1299 |!   for gas and ice, and neglects the volume of the ice.
       1300 |!   The model does account for the variation of the latent heat
       1301 |!   of sublimation with temperature.  The liquid option is not included.
       1302 |!   The Clausius-Clapeyron equation is integrated from the triple point
       1303 |!   to get the formula
       1304 |!       pvs=con_psat*(tr**xa)*exp(xb*(1.-tr))
       1305 |!   where tr is ttp/t and other values are physical constants.
       1306 |!   The formula is inverted by iterating Newtonian approximations
       1307 |!   for each pvs until t is found to within 1.e-6 Kelvin.
       1308 |!   This function can be expanded inline in the calling routine.
       1309 |!
       1310 |! Program History Log:
       1311 |!   91-05-07  Iredell             made into inlinable function
       1312 |!   94-12-30  Iredell             exact computation
       1313 |! 1999-03-01  Iredell             f90 module
       1314 |! 2001-02-26  Iredell             ice phase
       1315 |!
       1316 |! Usage:   tdpi=ftdpixg(tg,pv)
       1317 |!
       1318 |!   Input argument list:
       1319 |!     tg         Real(krealfp) guess dewpoint temperature in Kelvin
       1320 |!     pv         Real(krealfp) vapor pressure in Pascals
       1321 |!
       1322 |!   Output argument list:
       1323 |!     ftdpixg    Real(krealfp) dewpoint temperature in Kelvin
       1324 |!
       1325 |! Attributes:
       1326 |!   Language: Fortran 90.
       1327 |!
       1328 |!$$$
       1329 |    implicit none
       1330 |    real(krealfp) ftdpixg
       1331 |    real(krealfp),intent(in):: tg,pv
       1332 |    real(krealfp),parameter:: terrm=1.e-6
       1333 |    real(krealfp),parameter:: dldt=con_cvap-con_csol
       1334 |    real(krealfp),parameter:: heat=con_hvap+con_hfus
       1335 |    real(krealfp),parameter:: xpona=-dldt/con_rv
       1336 |    real(krealfp),parameter:: xponb=-dldt/con_rv+heat/(con_rv*con_ttp)
       1337 |    real(krealfp) t,tr,pvt,el,dpvt,terr
       1338 |    integer i
       1339 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1340 |    t=tg
       1341 |    do i=1,100
       1342 |      tr=con_ttp/t
       1343 |      pvt=con_psat*(tr**xpona)*exp(xponb*(1.-tr))
       1344 |      el=heat+dldt*(t-con_ttp)
       1345 |      dpvt=el*pvt/(con_rv*t**2)
       1346 |      terr=(pvt-pv)/dpvt
       1347 |      t=t-terr
       1348 |      if(abs(terr).le.terrm) exit
       1349 |    enddo
       1350 |    ftdpixg=t
       1351 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1352 |  end function
       1353 |!-------------------------------------------------------------------------------
       1354 |  subroutine gtdp
       1355 |!$$$     Subprogram Documentation Block
       1356 |!
       1357 |! Subprogram: gtdp         Compute dewpoint temperature table
       1358 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1359 |!
       1360 |! Abstract: Compute dewpoint temperature table as a function of
       1361 |!   vapor pressure for inlinable function ftdp.
       1362 |!   Exact dewpoint temperatures are calculated in subprogram ftdpxg.
       1363 |!   The current implementation computes a table with a length
       1364 |!   of 5001 for vapor pressures ranging from 0.5 to 1000.5 Pascals
       1365 |!   giving a dewpoint temperature range of 208 to 319 Kelvin.
       1366 |!
       1367 |! Program History Log:
       1368 |!   91-05-07  Iredell
       1369 |!   94-12-30  Iredell             expand table
       1370 |! 1999-03-01  Iredell             f90 module
       1371 |! 2001-02-26  Iredell             ice phase
       1372 |!
       1373 |! Usage:  call gtdp
       1374 |!
       1375 |! Subprograms called:
       1376 |!   (ftdpxg)   inlinable function to compute dewpoint temperature
       1377 |!
       1378 |! Attributes:
       1379 |!   Language: Fortran 90.
       1380 |!
       1381 |!$$$
       1382 |    implicit none
       1383 |    integer jx
       1384 |    real(krealfp) xmin,xmax,xinc,t,x,pv
       1385 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1386 |    xmin=0.5
       1387 |    xmax=10000.5
       1388 |    xinc=(xmax-xmin)/(nxtdp-1)
       1389 |    c1xtdp=1.-xmin/xinc
       1390 |    c2xtdp=1./xinc
       1391 |    t=208.0
       1392 |    do jx=1,nxtdp
       1393 |      x=xmin+(jx-1)*xinc
       1394 |      pv=x
       1395 |      t=ftdpxg(t,pv)
       1396 |      tbtdp(jx)=t
       1397 |    enddo
       1398 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1399 |  end subroutine
       1400 |!-------------------------------------------------------------------------------
       1401 |  elemental function ftdp(pv)
       1402 |!$$$     Subprogram Documentation Block
       1403 |!
       1404 |! Subprogram: ftdp         Compute dewpoint temperature
       1405 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1406 |!
       1407 |! Abstract: Compute dewpoint temperature from vapor pressure.
       1408 |!   A linear interpolation is done between values in a lookup table
       1409 |!   computed in gtdp. See documentation for ftdpxg for details.
       1410 |!   Input values outside table range are reset to table extrema.
       1411 |!   The interpolation accuracy is better than 0.0005 Kelvin
       1412 |!   for dewpoint temperatures greater than 250 Kelvin,
       1413 |!   but decreases to 0.02 Kelvin for a dewpoint around 230 Kelvin.
       1414 |!   On the Cray, ftdp is about 75 times faster than exact calculation.
       1415 |!   This function should be expanded inline in the calling routine.
       1416 |!
       1417 |! Program History Log:
       1418 |!   91-05-07  Iredell             made into inlinable function
       1419 |!   94-12-30  Iredell             expand table
       1420 |! 1999-03-01  Iredell             f90 module
       1421 |! 2001-02-26  Iredell             ice phase
       1422 |!
       1423 |! Usage:   tdp=ftdp(pv)
       1424 |!
       1425 |!   Input argument list:
       1426 |!     pv         Real(krealfp) vapor pressure in Pascals
       1427 |!
       1428 |!   Output argument list:
       1429 |!     ftdp       Real(krealfp) dewpoint temperature in Kelvin
       1430 |!
       1431 |! Attributes:
       1432 |!   Language: Fortran 90.
       1433 |!
       1434 |!$$$
       1435 |    implicit none
       1436 |    real(krealfp) ftdp
       1437 |    real(krealfp),intent(in):: pv
       1438 |    integer jx
       1439 |    real(krealfp) xj
       1440 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1441 |    xj=min(max(c1xtdp+c2xtdp*pv,1._krealfp),real(nxtdp,krealfp))
       1442 |    jx=min(xj,nxtdp-1._krealfp)
       1443 |    ftdp=tbtdp(jx)+(xj-jx)*(tbtdp(jx+1)-tbtdp(jx))
       1444 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1445 |  end function
       1446 |!-------------------------------------------------------------------------------
       1447 |  elemental function ftdpq(pv)
       1448 |!$$$     Subprogram Documentation Block
       1449 |!
       1450 |! Subprogram: ftdpq        Compute dewpoint temperature
       1451 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1452 |!
       1453 |! Abstract: Compute dewpoint temperature from vapor pressure.
       1454 |!   A quadratic interpolation is done between values in a lookup table
       1455 |!   computed in gtdp. see documentation for ftdpxg for details.
       1456 |!   Input values outside table range are reset to table extrema.
       1457 |!   the interpolation accuracy is better than 0.00001 Kelvin
       1458 |!   for dewpoint temperatures greater than 250 Kelvin,
       1459 |!   but decreases to 0.002 Kelvin for a dewpoint around 230 Kelvin.
       1460 |!   On the Cray, ftdpq is about 60 times faster than exact calculation.
       1461 |!   This function should be expanded inline in the calling routine.
       1462 |!
       1463 |! Program History Log:
       1464 |!   91-05-07  Iredell             made into inlinable function
       1465 |!   94-12-30  Iredell             quadratic interpolation
       1466 |! 1999-03-01  Iredell             f90 module
       1467 |! 2001-02-26  Iredell             ice phase
       1468 |!
       1469 |! Usage:   tdp=ftdpq(pv)
       1470 |!
       1471 |!   Input argument list:
       1472 |!     pv         Real(krealfp) vapor pressure in Pascals
       1473 |!
       1474 |!   Output argument list:
       1475 |!     ftdpq      Real(krealfp) dewpoint temperature in Kelvin
       1476 |!
       1477 |! Attributes:
       1478 |!   Language: Fortran 90.
       1479 |!
       1480 |!$$$
       1481 |    implicit none
       1482 |    real(krealfp) ftdpq
       1483 |    real(krealfp),intent(in):: pv
       1484 |    integer jx
       1485 |    real(krealfp) xj,dxj,fj1,fj2,fj3
       1486 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1487 |    xj=min(max(c1xtdp+c2xtdp*pv,1._krealfp),real(nxtdp,krealfp))
       1488 |    jx=min(max(nint(xj),2),nxtdp-1)
       1489 |    dxj=xj-jx
       1490 |    fj1=tbtdp(jx-1)
       1491 |    fj2=tbtdp(jx)
       1492 |    fj3=tbtdp(jx+1)
       1493 |    ftdpq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
       1494 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1495 |  end function
       1496 |!-------------------------------------------------------------------------------
       1497 |  elemental function ftdpx(pv)
       1498 |!$$$     Subprogram Documentation Block
       1499 |!
       1500 |! Subprogram: ftdpx        Compute dewpoint temperature
       1501 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1502 |!
       1503 |! Abstract: exactly compute dewpoint temperature from vapor pressure.
       1504 |!   An approximate dewpoint temperature for function ftdpxg
       1505 |!   is obtained using ftdp so gtdp must be already called.
       1506 |!   See documentation for ftdpxg for details.
       1507 |!
       1508 |! Program History Log:
       1509 |!   91-05-07  Iredell             made into inlinable function
       1510 |!   94-12-30  Iredell             exact computation
       1511 |! 1999-03-01  Iredell             f90 module
       1512 |! 2001-02-26  Iredell             ice phase
       1513 |!
       1514 |! Usage:   tdp=ftdpx(pv)
       1515 |!
       1516 |!   Input argument list:
       1517 |!     pv         Real(krealfp) vapor pressure in Pascals
       1518 |!
       1519 |!   Output argument list:
       1520 |!     ftdpx      Real(krealfp) dewpoint temperature in Kelvin
       1521 |!
       1522 |! Subprograms called:
       1523 |!   (ftdp)     inlinable function to compute dewpoint temperature
       1524 |!   (ftdpxg)   inlinable function to compute dewpoint temperature
       1525 |!
       1526 |! Attributes:
       1527 |!   Language: Fortran 90.
       1528 |!
       1529 |!$$$
       1530 |    implicit none
       1531 |    real(krealfp) ftdpx
       1532 |    real(krealfp),intent(in):: pv
       1533 |    real(krealfp) tg
       1534 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1535 |    tg=ftdp(pv)
       1536 |    ftdpx=ftdpxg(tg,pv)
       1537 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1538 |  end function
       1539 |!-------------------------------------------------------------------------------
       1540 |  elemental function ftdpxg(tg,pv)
       1541 |!$$$     Subprogram Documentation Block
       1542 |!
       1543 |! Subprogram: ftdpxg       Compute dewpoint temperature
       1544 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1545 |!
       1546 |! Abstract: Exactly compute dewpoint temperature from vapor pressure.
       1547 |!   A guess dewpoint temperature must be provided.
       1548 |!   The saturation vapor pressure over either liquid and ice is computed
       1549 |!   over liquid for temperatures above the triple point,
       1550 |!   over ice for temperatures 20 degress below the triple point,
       1551 |!   and a linear combination of the two for temperatures in between.
       1552 |!   The water model assumes a perfect gas, constant specific heats
       1553 |!   for gas, liquid and ice, and neglects the volume of the condensate.
       1554 |!   The model does account for the variation of the latent heat
       1555 |!   of condensation and sublimation with temperature.
       1556 |!   The Clausius-Clapeyron equation is integrated from the triple point
       1557 |!   to get the formula
       1558 |!       pvsl=con_psat*(tr**xa)*exp(xb*(1.-tr))
       1559 |!   where tr is ttp/t and other values are physical constants.
       1560 |!   The reference for this decision is Emanuel(1994), pages 116-117.
       1561 |!   The formula is inverted by iterating Newtonian approximations
       1562 |!   for each pvs until t is found to within 1.e-6 Kelvin.
       1563 |!   This function can be expanded inline in the calling routine.
       1564 |!
       1565 |! Program History Log:
       1566 |!   91-05-07  Iredell             made into inlinable function
       1567 |!   94-12-30  Iredell             exact computation
       1568 |! 1999-03-01  Iredell             f90 module
       1569 |! 2001-02-26  Iredell             ice phase
       1570 |!
       1571 |! Usage:   tdp=ftdpxg(tg,pv)
       1572 |!
       1573 |!   Input argument list:
       1574 |!     tg         Real(krealfp) guess dewpoint temperature in Kelvin
       1575 |!     pv         Real(krealfp) vapor pressure in Pascals
       1576 |!
       1577 |!   Output argument list:
       1578 |!     ftdpxg     Real(krealfp) dewpoint temperature in Kelvin
       1579 |!
       1580 |! Attributes:
       1581 |!   Language: Fortran 90.
       1582 |!
       1583 |!$$$
       1584 |    implicit none
       1585 |    real(krealfp) ftdpxg
       1586 |    real(krealfp),intent(in):: tg,pv
       1587 |    real(krealfp),parameter:: terrm=1.e-6
       1588 |    real(krealfp),parameter:: tliq=con_ttp
       1589 |    real(krealfp),parameter:: tice=con_ttp-20.0
       1590 |    real(krealfp),parameter:: dldtl=con_cvap-con_cliq
       1591 |    real(krealfp),parameter:: heatl=con_hvap
       1592 |    real(krealfp),parameter:: xponal=-dldtl/con_rv
       1593 |    real(krealfp),parameter:: xponbl=-dldtl/con_rv+heatl/(con_rv*con_ttp)
       1594 |    real(krealfp),parameter:: dldti=con_cvap-con_csol
       1595 |    real(krealfp),parameter:: heati=con_hvap+con_hfus
       1596 |    real(krealfp),parameter:: xponai=-dldti/con_rv
       1597 |    real(krealfp),parameter:: xponbi=-dldti/con_rv+heati/(con_rv*con_ttp)
       1598 |    real(krealfp) t,tr,w,pvtl,pvti,pvt,ell,eli,el,dpvt,terr
       1599 |    integer i
       1600 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1601 |    t=tg
       1602 |    do i=1,100
       1603 |      tr=con_ttp/t
       1604 |      if(t.ge.tliq) then
       1605 |        pvt=con_psat*(tr**xponal)*exp(xponbl*(1.-tr))
       1606 |        el=heatl+dldtl*(t-con_ttp)
       1607 |        dpvt=el*pvt/(con_rv*t**2)
       1608 |      elseif(t.lt.tice) then
       1609 |        pvt=con_psat*(tr**xponai)*exp(xponbi*(1.-tr))
       1610 |        el=heati+dldti*(t-con_ttp)
       1611 |        dpvt=el*pvt/(con_rv*t**2)
       1612 |      else
       1613 |        w=(t-tice)/(tliq-tice)
       1614 |        pvtl=con_psat*(tr**xponal)*exp(xponbl*(1.-tr))
       1615 |        pvti=con_psat*(tr**xponai)*exp(xponbi*(1.-tr))
       1616 |        pvt=w*pvtl+(1.-w)*pvti
       1617 |        ell=heatl+dldtl*(t-con_ttp)
       1618 |        eli=heati+dldti*(t-con_ttp)
       1619 |        dpvt=(w*ell*pvtl+(1.-w)*eli*pvti)/(con_rv*t**2)
       1620 |      endif
       1621 |      terr=(pvt-pv)/dpvt
       1622 |      t=t-terr
       1623 |      if(abs(terr).le.terrm) exit
       1624 |    enddo
       1625 |    ftdpxg=t
       1626 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1627 |  end function
       1628 |!-------------------------------------------------------------------------------
       1629 |  subroutine gthe
       1630 |!$$$     Subprogram Documentation Block
       1631 |!
       1632 |! Subprogram: gthe        Compute equivalent potential temperature table
       1633 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1634 |!
       1635 |! Abstract: Compute equivalent potential temperature table
       1636 |!   as a function of LCL temperature and pressure over 1e5 Pa
       1637 |!   to the kappa power for function fthe.
       1638 |!   Equivalent potential temperatures are calculated in subprogram fthex
       1639 |!   the current implementation computes a table with a first dimension
       1640 |!   of 241 for temperatures ranging from 183.16 to 303.16 Kelvin
       1641 |!   and a second dimension of 151 for pressure over 1e5 Pa
       1642 |!   to the kappa power ranging from 0.04**rocp to 1.10**rocp.
       1643 |!
       1644 |! Program History Log:
       1645 |!   91-05-07  Iredell
       1646 |!   94-12-30  Iredell             expand table
       1647 |! 1999-03-01  Iredell             f90 module
       1648 |!
       1649 |! Usage:  call gthe
       1650 |!
       1651 |! Subprograms called:
       1652 |!   (fthex)    inlinable function to compute equiv. pot. temperature
       1653 |!
       1654 |! Attributes:
       1655 |!   Language: Fortran 90.
       1656 |!
       1657 |!$$$
       1658 |    implicit none
       1659 |    integer jx,jy
       1660 |    real(krealfp) xmin,xmax,ymin,ymax,xinc,yinc,x,y,pk,t
       1661 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1662 |    xmin=con_ttp-90._krealfp
       1663 |    xmax=con_ttp+30._krealfp
       1664 |    ymin=0.04_krealfp**con_rocp
       1665 |    ymax=1.10_krealfp**con_rocp
       1666 |    xinc=(xmax-xmin)/(nxthe-1)
       1667 |    c1xthe=1.-xmin/xinc
       1668 |    c2xthe=1./xinc
       1669 |    yinc=(ymax-ymin)/(nythe-1)
       1670 |    c1ythe=1.-ymin/yinc
       1671 |    c2ythe=1./yinc
       1672 |    do jy=1,nythe
       1673 |      y=ymin+(jy-1)*yinc
       1674 |      pk=y
       1675 |      do jx=1,nxthe
       1676 |        x=xmin+(jx-1)*xinc
       1677 |        t=x
       1678 |        tbthe(jx,jy)=fthex(t,pk)
       1679 |      enddo
       1680 |    enddo
       1681 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1682 |  end subroutine
       1683 |!-------------------------------------------------------------------------------
       1684 |  elemental function fthe(t,pk)
       1685 |!$$$     Subprogram Documentation Block
       1686 |!
       1687 |! Subprogram: fthe         Compute equivalent potential temperature
       1688 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1689 |!
       1690 |! Abstract: Compute equivalent potential temperature at the LCL
       1691 |!   from temperature and pressure over 1e5 Pa to the kappa power.
       1692 |!   A bilinear interpolation is done between values in a lookup table
       1693 |!   computed in gthe. see documentation for fthex for details.
       1694 |!   Input values outside table range are reset to table extrema,
       1695 |!   except zero is returned for too cold or high LCLs.
       1696 |!   The interpolation accuracy is better than 0.01 Kelvin.
       1697 |!   On the Cray, fthe is almost 6 times faster than exact calculation.
       1698 |!   This function should be expanded inline in the calling routine.
       1699 |!
       1700 |! Program History Log:
       1701 |!   91-05-07  Iredell             made into inlinable function
       1702 |!   94-12-30  Iredell             expand table
       1703 |! 1999-03-01  Iredell             f90 module
       1704 |!
       1705 |! Usage:   the=fthe(t,pk)
       1706 |!
       1707 |!   Input argument list:
       1708 |!     t          Real(krealfp) LCL temperature in Kelvin
       1709 |!     pk         Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
       1710 |!
       1711 |!   Output argument list:
       1712 |!     fthe       Real(krealfp) equivalent potential temperature in Kelvin
       1713 |!
       1714 |! Attributes:
       1715 |!   Language: Fortran 90.
       1716 |!
       1717 |!$$$
       1718 |    implicit none
       1719 |    real(krealfp) fthe
       1720 |    real(krealfp),intent(in):: t,pk
       1721 |    integer jx,jy
       1722 |    real(krealfp) xj,yj,ftx1,ftx2
       1723 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1724 |    xj=min(c1xthe+c2xthe*t,real(nxthe,krealfp))
       1725 |    yj=min(c1ythe+c2ythe*pk,real(nythe,krealfp))
       1726 |    if(xj.ge.1..and.yj.ge.1.) then
       1727 |      jx=min(xj,nxthe-1._krealfp)
       1728 |      jy=min(yj,nythe-1._krealfp)
       1729 |      ftx1=tbthe(jx,jy)+(xj-jx)*(tbthe(jx+1,jy)-tbthe(jx,jy))
       1730 |      ftx2=tbthe(jx,jy+1)+(xj-jx)*(tbthe(jx+1,jy+1)-tbthe(jx,jy+1))
       1731 |      fthe=ftx1+(yj-jy)*(ftx2-ftx1)
       1732 |    else
       1733 |      fthe=0.
       1734 |    endif
       1735 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1736 |  end function
       1737 |!-------------------------------------------------------------------------------
       1738 |  elemental function ftheq(t,pk)
       1739 |!$$$     Subprogram Documentation Block
       1740 |!
       1741 |! Subprogram: ftheq        Compute equivalent potential temperature
       1742 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1743 |!
       1744 |! Abstract: Compute equivalent potential temperature at the LCL
       1745 |!   from temperature and pressure over 1e5 Pa to the kappa power.
       1746 |!   A biquadratic interpolation is done between values in a lookup table
       1747 |!   computed in gthe. see documentation for fthex for details.
       1748 |!   Input values outside table range are reset to table extrema,
       1749 |!   except zero is returned for too cold or high LCLs.
       1750 |!   The interpolation accuracy is better than 0.0002 Kelvin.
       1751 |!   On the Cray, ftheq is almost 3 times faster than exact calculation.
       1752 |!   This function should be expanded inline in the calling routine.
       1753 |!
       1754 |! Program History Log:
       1755 |!   91-05-07  Iredell             made into inlinable function
       1756 |!   94-12-30  Iredell             quadratic interpolation
       1757 |! 1999-03-01  Iredell             f90 module
       1758 |!
       1759 |! Usage:   the=ftheq(t,pk)
       1760 |!
       1761 |!   Input argument list:
       1762 |!     t          Real(krealfp) LCL temperature in Kelvin
       1763 |!     pk         Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
       1764 |!
       1765 |!   Output argument list:
       1766 |!     ftheq      Real(krealfp) equivalent potential temperature in Kelvin
       1767 |!
       1768 |! Attributes:
       1769 |!   Language: Fortran 90.
       1770 |!
       1771 |!$$$
       1772 |    implicit none
       1773 |    real(krealfp) ftheq
       1774 |    real(krealfp),intent(in):: t,pk
       1775 |    integer jx,jy
       1776 |    real(krealfp) xj,yj,dxj,dyj
       1777 |    real(krealfp) ft11,ft12,ft13,ft21,ft22,ft23,ft31,ft32,ft33
       1778 |    real(krealfp) ftx1,ftx2,ftx3
       1779 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1780 |    xj=min(c1xthe+c2xthe*t,real(nxthe,krealfp))
       1781 |    yj=min(c1ythe+c2ythe*pk,real(nythe,krealfp))
       1782 |    if(xj.ge.1..and.yj.ge.1.) then
       1783 |      jx=min(max(nint(xj),2),nxthe-1)
       1784 |      jy=min(max(nint(yj),2),nythe-1)
       1785 |      dxj=xj-jx
       1786 |      dyj=yj-jy
       1787 |      ft11=tbthe(jx-1,jy-1)
       1788 |      ft12=tbthe(jx-1,jy)
       1789 |      ft13=tbthe(jx-1,jy+1)
       1790 |      ft21=tbthe(jx,jy-1)
       1791 |      ft22=tbthe(jx,jy)
       1792 |      ft23=tbthe(jx,jy+1)
       1793 |      ft31=tbthe(jx+1,jy-1)
       1794 |      ft32=tbthe(jx+1,jy)
       1795 |      ft33=tbthe(jx+1,jy+1)
       1796 |      ftx1=(((ft31+ft11)/2-ft21)*dxj+(ft31-ft11)/2)*dxj+ft21
       1797 |      ftx2=(((ft32+ft12)/2-ft22)*dxj+(ft32-ft12)/2)*dxj+ft22
       1798 |      ftx3=(((ft33+ft13)/2-ft23)*dxj+(ft33-ft13)/2)*dxj+ft23
       1799 |      ftheq=(((ftx3+ftx1)/2-ftx2)*dyj+(ftx3-ftx1)/2)*dyj+ftx2
       1800 |    else
       1801 |      ftheq=0.
       1802 |    endif
       1803 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1804 |  end function
       1805 |!-------------------------------------------------------------------------------
       1806 |! elemental function fthex(t,pk)
       1807 |            function fthex(t,pk)
       1808 |!$$$     Subprogram Documentation Block
       1809 |!
       1810 |! Subprogram: fthex        Compute equivalent potential temperature
       1811 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1812 |!
       1813 |! Abstract: Exactly compute equivalent potential temperature at the LCL
       1814 |!   from temperature and pressure over 1e5 Pa to the kappa power.
       1815 |!   Equivalent potential temperature is constant for a saturated parcel
       1816 |!   rising adiabatically up a moist adiabat when the heat and mass
       1817 |!   of the condensed water are neglected.  Ice is also neglected.
       1818 |!   The formula for equivalent potential temperature (Holton) is
       1819 |!       the=t*(pd**(-rocp))*exp(el*eps*pv/(cp*t*pd))
       1820 |!   where t is the temperature, pv is the saturated vapor pressure,
       1821 |!   pd is the dry pressure p-pv, el is the temperature dependent
       1822 |!   latent heat of condensation hvap+dldt*(t-ttp), and other values
       1823 |!   are physical constants defined in parameter statements in the code.
       1824 |!   Zero is returned if the input values make saturation impossible.
       1825 |!   This function should be expanded inline in the calling routine.
       1826 |!
       1827 |! Program History Log:
       1828 |!   91-05-07  Iredell             made into inlinable function
       1829 |!   94-12-30  Iredell             exact computation
       1830 |! 1999-03-01  Iredell             f90 module
       1831 |!
       1832 |! Usage:   the=fthex(t,pk)
       1833 |!
       1834 |!   Input argument list:
       1835 |!     t          Real(krealfp) LCL temperature in Kelvin
       1836 |!     pk         Real(krealfp) LCL pressure over 1e5 Pa to the kappa power
       1837 |!
       1838 |!   Output argument list:
       1839 |!     fthex      Real(krealfp) equivalent potential temperature in Kelvin
       1840 |!
       1841 |! Attributes:
       1842 |!   Language: Fortran 90.
       1843 |!
       1844 |!$$$
       1845 |    implicit none
       1846 |    real(krealfp) fthex
       1847 |    real(krealfp),intent(in):: t,pk
       1848 |    real(krealfp) p,tr,pv,pd,el,expo,expmax
       1849 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1850 |    p=pk**con_cpor
       1851 |    tr=con_ttp/t
       1852 |    pv=psatb*(tr**con_xpona)*exp(con_xponb*(1.-tr))
       1853 |    pd=p-pv
       1854 |    if(pd.gt.pv) then
       1855 |      el=con_hvap+con_dldt*(t-con_ttp)
       1856 |      expo=el*con_eps*pv/(con_cp*t*pd)
       1857 |      fthex=t*pd**(-con_rocp)*exp(expo)
       1858 |    else
       1859 |      fthex=0.
       1860 |    endif
       1861 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1862 |  end function
       1863 |!-------------------------------------------------------------------------------
       1864 |  subroutine gtma
       1865 |!$$$     Subprogram Documentation Block
       1866 |!
       1867 |! Subprogram: gtma         Compute moist adiabat tables
       1868 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1869 |!
       1870 |! Abstract: Compute temperature and specific humidity tables
       1871 |!   as a function of equivalent potential temperature and
       1872 |!   pressure over 1e5 Pa to the kappa power for subprogram stma.
       1873 |!   Exact parcel temperatures are calculated in subprogram stmaxg.
       1874 |!   The current implementation computes a table with a first dimension
       1875 |!   of 151 for equivalent potential temperatures ranging from 200 to 500
       1876 |!   Kelvin and a second dimension of 121 for pressure over 1e5 Pa
       1877 |!   to the kappa power ranging from 0.01**rocp to 1.10**rocp.
       1878 |!
       1879 |! Program History Log:
       1880 |!   91-05-07  Iredell
       1881 |!   94-12-30  Iredell             expand table
       1882 |! 1999-03-01  Iredell             f90 module
       1883 |!
       1884 |! Usage:  call gtma
       1885 |!
       1886 |! Subprograms called:
       1887 |!   (stmaxg)   inlinable subprogram to compute parcel temperature
       1888 |!
       1889 |! Attributes:
       1890 |!   Language: Fortran 90.
       1891 |!
       1892 |!$$$
       1893 |    implicit none
       1894 |    integer jx,jy
       1895 |    real(krealfp) xmin,xmax,ymin,ymax,xinc,yinc,x,y,pk,the,t,q,tg
       1896 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1897 |    xmin=200._krealfp
       1898 |    xmax=500._krealfp
       1899 |    ymin=0.01_krealfp**con_rocp
       1900 |    ymax=1.10_krealfp**con_rocp
       1901 |    xinc=(xmax-xmin)/(nxma-1)
       1902 |    c1xma=1.-xmin/xinc
       1903 |    c2xma=1./xinc
       1904 |    yinc=(ymax-ymin)/(nyma-1)
       1905 |    c1yma=1.-ymin/yinc
       1906 |    c2yma=1./yinc
       1907 |    do jy=1,nyma
       1908 |      y=ymin+(jy-1)*yinc
       1909 |      pk=y
       1910 |      tg=xmin*y
       1911 |      do jx=1,nxma
       1912 |        x=xmin+(jx-1)*xinc
       1913 |        the=x
       1914 |        call stmaxg(tg,the,pk,t,q)
       1915 |        tbtma(jx,jy)=t
       1916 |        tbqma(jx,jy)=q
       1917 |        tg=t
       1918 |      enddo
       1919 |    enddo
       1920 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1921 |  end subroutine
       1922 |!-------------------------------------------------------------------------------
       1923 |  elemental subroutine stma(the,pk,tma,qma)
       1924 |!$$$     Subprogram Documentation Block
       1925 |!
       1926 |! Subprogram: stma         Compute moist adiabat temperature
       1927 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1928 |!
       1929 |! Abstract: Compute temperature and specific humidity of a parcel
       1930 |!   lifted up a moist adiabat from equivalent potential temperature
       1931 |!   at the LCL and pressure over 1e5 Pa to the kappa power.
       1932 |!   Bilinear interpolations are done between values in a lookup table
       1933 |!   computed in gtma. See documentation for stmaxg for details.
       1934 |!   Input values outside table range are reset to table extrema.
       1935 |!   The interpolation accuracy is better than 0.01 Kelvin
       1936 |!   and 5.e-6 kg/kg for temperature and humidity, respectively.
       1937 |!   On the Cray, stma is about 35 times faster than exact calculation.
       1938 |!   This subprogram should be expanded inline in the calling routine.
       1939 |!
       1940 |! Program History Log:
       1941 |!   91-05-07  Iredell             made into inlinable function
       1942 |!   94-12-30  Iredell             expand table
       1943 |! 1999-03-01  Iredell             f90 module
       1944 |!
       1945 |! Usage:  call stma(the,pk,tma,qma)
       1946 |!
       1947 |!   Input argument list:
       1948 |!     the        Real(krealfp) equivalent potential temperature in Kelvin
       1949 |!     pk         Real(krealfp) pressure over 1e5 Pa to the kappa power
       1950 |!
       1951 |!   Output argument list:
       1952 |!     tma        Real(krealfp) parcel temperature in Kelvin
       1953 |!     qma        Real(krealfp) parcel specific humidity in kg/kg
       1954 |!
       1955 |! Attributes:
       1956 |!   Language: Fortran 90.
       1957 |!
       1958 |!$$$
       1959 |    implicit none
       1960 |    real(krealfp),intent(in):: the,pk
       1961 |    real(krealfp),intent(out):: tma,qma
       1962 |    integer jx,jy
       1963 |    real(krealfp) xj,yj,ftx1,ftx2,qx1,qx2
       1964 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1965 |    xj=min(max(c1xma+c2xma*the,1._krealfp),real(nxma,krealfp))
       1966 |    yj=min(max(c1yma+c2yma*pk,1._krealfp),real(nyma,krealfp))
       1967 |    jx=min(xj,nxma-1._krealfp)
       1968 |    jy=min(yj,nyma-1._krealfp)
       1969 |    ftx1=tbtma(jx,jy)+(xj-jx)*(tbtma(jx+1,jy)-tbtma(jx,jy))
       1970 |    ftx2=tbtma(jx,jy+1)+(xj-jx)*(tbtma(jx+1,jy+1)-tbtma(jx,jy+1))
       1971 |    tma=ftx1+(yj-jy)*(ftx2-ftx1)
       1972 |    qx1=tbqma(jx,jy)+(xj-jx)*(tbqma(jx+1,jy)-tbqma(jx,jy))
       1973 |    qx2=tbqma(jx,jy+1)+(xj-jx)*(tbqma(jx+1,jy+1)-tbqma(jx,jy+1))
       1974 |    qma=qx1+(yj-jy)*(qx2-qx1)
       1975 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       1976 |  end subroutine
       1977 |!-------------------------------------------------------------------------------
       1978 |  elemental subroutine stmaq(the,pk,tma,qma)
       1979 |!$$$     Subprogram Documentation Block
       1980 |!
       1981 |! Subprogram: stmaq        Compute moist adiabat temperature
       1982 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       1983 |!
       1984 |! Abstract: Compute temperature and specific humidity of a parcel
       1985 |!   lifted up a moist adiabat from equivalent potential temperature
       1986 |!   at the LCL and pressure over 1e5 Pa to the kappa power.
       1987 |!   Biquadratic interpolations are done between values in a lookup table
       1988 |!   computed in gtma. See documentation for stmaxg for details.
       1989 |!   Input values outside table range are reset to table extrema.
       1990 |!   the interpolation accuracy is better than 0.0005 Kelvin
       1991 |!   and 1.e-7 kg/kg for temperature and humidity, respectively.
       1992 |!   On the Cray, stmaq is about 25 times faster than exact calculation.
       1993 |!   This subprogram should be expanded inline in the calling routine.
       1994 |!
       1995 |! Program History Log:
       1996 |!   91-05-07  Iredell             made into inlinable function
       1997 |!   94-12-30  Iredell             quadratic interpolation
       1998 |! 1999-03-01  Iredell             f90 module
       1999 |!
       2000 |! Usage:  call stmaq(the,pk,tma,qma)
       2001 |!
       2002 |!   Input argument list:
       2003 |!     the        Real(krealfp) equivalent potential temperature in Kelvin
       2004 |!     pk         Real(krealfp) pressure over 1e5 Pa to the kappa power
       2005 |!
       2006 |!   Output argument list:
       2007 |!     tmaq       Real(krealfp) parcel temperature in Kelvin
       2008 |!     qma        Real(krealfp) parcel specific humidity in kg/kg
       2009 |!
       2010 |! Attributes:
       2011 |!   Language: Fortran 90.
       2012 |!
       2013 |!$$$
       2014 |    implicit none
       2015 |    real(krealfp),intent(in):: the,pk
       2016 |    real(krealfp),intent(out):: tma,qma
       2017 |    integer jx,jy
       2018 |    real(krealfp) xj,yj,dxj,dyj
       2019 |    real(krealfp) ft11,ft12,ft13,ft21,ft22,ft23,ft31,ft32,ft33
       2020 |    real(krealfp) ftx1,ftx2,ftx3
       2021 |    real(krealfp) q11,q12,q13,q21,q22,q23,q31,q32,q33,qx1,qx2,qx3
       2022 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2023 |    xj=min(max(c1xma+c2xma*the,1._krealfp),real(nxma,krealfp))
       2024 |    yj=min(max(c1yma+c2yma*pk,1._krealfp),real(nyma,krealfp))
       2025 |    jx=min(max(nint(xj),2),nxma-1)
       2026 |    jy=min(max(nint(yj),2),nyma-1)
       2027 |    dxj=xj-jx
       2028 |    dyj=yj-jy
       2029 |    ft11=tbtma(jx-1,jy-1)
       2030 |    ft12=tbtma(jx-1,jy)
       2031 |    ft13=tbtma(jx-1,jy+1)
       2032 |    ft21=tbtma(jx,jy-1)
       2033 |    ft22=tbtma(jx,jy)
       2034 |    ft23=tbtma(jx,jy+1)
       2035 |    ft31=tbtma(jx+1,jy-1)
       2036 |    ft32=tbtma(jx+1,jy)
       2037 |    ft33=tbtma(jx+1,jy+1)
       2038 |    ftx1=(((ft31+ft11)/2-ft21)*dxj+(ft31-ft11)/2)*dxj+ft21
       2039 |    ftx2=(((ft32+ft12)/2-ft22)*dxj+(ft32-ft12)/2)*dxj+ft22
       2040 |    ftx3=(((ft33+ft13)/2-ft23)*dxj+(ft33-ft13)/2)*dxj+ft23
       2041 |    tma=(((ftx3+ftx1)/2-ftx2)*dyj+(ftx3-ftx1)/2)*dyj+ftx2
       2042 |    q11=tbqma(jx-1,jy-1)
       2043 |    q12=tbqma(jx-1,jy)
       2044 |    q13=tbqma(jx-1,jy+1)
       2045 |    q21=tbqma(jx,jy-1)
       2046 |    q22=tbqma(jx,jy)
       2047 |    q23=tbqma(jx,jy+1)
       2048 |    q31=tbqma(jx+1,jy-1)
       2049 |    q32=tbqma(jx+1,jy)
       2050 |    q33=tbqma(jx+1,jy+1)
       2051 |    qx1=(((q31+q11)/2-q21)*dxj+(q31-q11)/2)*dxj+q21
       2052 |    qx2=(((q32+q12)/2-q22)*dxj+(q32-q12)/2)*dxj+q22
       2053 |    qx3=(((q33+q13)/2-q23)*dxj+(q33-q13)/2)*dxj+q23
       2054 |    qma=(((qx3+qx1)/2-qx2)*dyj+(qx3-qx1)/2)*dyj+qx2
       2055 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2056 |  end subroutine
       2057 |!-------------------------------------------------------------------------------
       2058 |  elemental subroutine stmax(the,pk,tma,qma)
       2059 |!$$$     Subprogram Documentation Block
       2060 |!
       2061 |! Subprogram: stmax        Compute moist adiabat temperature
       2062 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2063 |!
       2064 |! Abstract: Exactly compute temperature and humidity of a parcel
       2065 |!   lifted up a moist adiabat from equivalent potential temperature
       2066 |!   at the LCL and pressure over 1e5 Pa to the kappa power.
       2067 |!   An approximate parcel temperature for subprogram stmaxg
       2068 |!   is obtained using stma so gtma must be already called.
       2069 |!   See documentation for stmaxg for details.
       2070 |!
       2071 |! Program History Log:
       2072 |!   91-05-07  Iredell             made into inlinable function
       2073 |!   94-12-30  Iredell             exact computation
       2074 |! 1999-03-01  Iredell             f90 module
       2075 |!
       2076 |! Usage:  call stmax(the,pk,tma,qma)
       2077 |!
       2078 |!   Input argument list:
       2079 |!     the        Real(krealfp) equivalent potential temperature in Kelvin
       2080 |!     pk         Real(krealfp) pressure over 1e5 Pa to the kappa power
       2081 |!
       2082 |!   Output argument list:
       2083 |!     tma        Real(krealfp) parcel temperature in Kelvin
       2084 |!     qma        Real(krealfp) parcel specific humidity in kg/kg
       2085 |!
       2086 |! Subprograms called:
       2087 |!   (stma)     inlinable subprogram to compute parcel temperature
       2088 |!   (stmaxg)   inlinable subprogram to compute parcel temperature
       2089 |!
       2090 |! Attributes:
       2091 |!   Language: Fortran 90.
       2092 |!
       2093 |!$$$
       2094 |    implicit none
       2095 |    real(krealfp),intent(in):: the,pk
       2096 |    real(krealfp),intent(out):: tma,qma
       2097 |    real(krealfp) tg,qg
       2098 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2099 |    call stma(the,pk,tg,qg)
       2100 |    call stmaxg(tg,the,pk,tma,qma)
       2101 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2102 |  end subroutine
       2103 |!-------------------------------------------------------------------------------
       2104 |  elemental subroutine stmaxg(tg,the,pk,tma,qma)
       2105 |!$$$     Subprogram Documentation Block
       2106 |!
       2107 |! Subprogram: stmaxg       Compute moist adiabat temperature
       2108 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2109 |!
       2110 |! Abstract: exactly compute temperature and humidity of a parcel
       2111 |!   lifted up a moist adiabat from equivalent potential temperature
       2112 |!   at the LCL and pressure over 1e5 Pa to the kappa power.
       2113 |!   A guess parcel temperature must be provided.
       2114 |!   Equivalent potential temperature is constant for a saturated parcel
       2115 |!   rising adiabatically up a moist adiabat when the heat and mass
       2116 |!   of the condensed water are neglected.  Ice is also neglected.
       2117 |!   The formula for equivalent potential temperature (Holton) is
       2118 |!       the=t*(pd**(-rocp))*exp(el*eps*pv/(cp*t*pd))
       2119 |!   where t is the temperature, pv is the saturated vapor pressure,
       2120 |!   pd is the dry pressure p-pv, el is the temperature dependent
       2121 |!   latent heat of condensation hvap+dldt*(t-ttp), and other values
       2122 |!   are physical constants defined in parameter statements in the code.
       2123 |!   The formula is inverted by iterating Newtonian approximations
       2124 |!   for each the and p until t is found to within 1.e-4 Kelvin.
       2125 |!   The specific humidity is then computed from pv and pd.
       2126 |!   This subprogram can be expanded inline in the calling routine.
       2127 |!
       2128 |! Program History Log:
       2129 |!   91-05-07  Iredell             made into inlinable function
       2130 |!   94-12-30  Iredell             exact computation
       2131 |! 1999-03-01  Iredell             f90 module
       2132 |!
       2133 |! Usage:  call stmaxg(tg,the,pk,tma,qma)
       2134 |!
       2135 |!   Input argument list:
       2136 |!     tg         Real(krealfp) guess parcel temperature in Kelvin
       2137 |!     the        Real(krealfp) equivalent potential temperature in Kelvin
       2138 |!     pk         Real(krealfp) pressure over 1e5 Pa to the kappa power
       2139 |!
       2140 |!   Output argument list:
       2141 |!     tma        Real(krealfp) parcel temperature in Kelvin
       2142 |!     qma        Real(krealfp) parcel specific humidity in kg/kg
       2143 |!
       2144 |! Attributes:
       2145 |!   Language: Fortran 90.
       2146 |!
       2147 |!$$$
       2148 |    implicit none
       2149 |    real(krealfp),intent(in):: tg,the,pk
       2150 |    real(krealfp),intent(out):: tma,qma
       2151 |    real(krealfp),parameter:: terrm=1.e-4
       2152 |    real(krealfp) t,p,tr,pv,pd,el,expo,thet,dthet,terr
       2153 |    integer i
       2154 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2155 |    t=tg
       2156 |    p=pk**con_cpor
       2157 |    do i=1,100
       2158 |      tr=con_ttp/t
       2159 |      pv=psatb*(tr**con_xpona)*exp(con_xponb*(1.-tr))
       2160 |      pd=p-pv
       2161 |      el=con_hvap+con_dldt*(t-con_ttp)
       2162 |      expo=el*con_eps*pv/(con_cp*t*pd)
       2163 |      thet=t*pd**(-con_rocp)*exp(expo)
       2164 |      dthet=thet/t*(1.+expo*(con_dldt*t/el+el*p/(con_rv*t*pd)))
       2165 |      terr=(thet-the)/dthet
       2166 |      t=t-terr
       2167 |      if(abs(terr).le.terrm) exit
       2168 |    enddo
       2169 |    tma=t
       2170 |    tr=con_ttp/t
       2171 |    pv=psatb*(tr**con_xpona)*exp(con_xponb*(1.-tr))
       2172 |    pd=p-pv
       2173 |    qma=con_eps*pv/(pd+con_eps*pv)
       2174 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2175 |  end subroutine
       2176 |!-------------------------------------------------------------------------------
       2177 |  subroutine gpkap
       2178 |!$$$   Subprogram  documentation  block
       2179 |!
       2180 |! Subprogram: gpkap        Compute coefficients for p**kappa
       2181 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2182 |!
       2183 |! Abstract: Computes pressure to the kappa table as a function of pressure
       2184 |!   for the table lookup function fpkap.
       2185 |!   Exact pressure to the kappa values are calculated in subprogram fpkapx.
       2186 |!   The current implementation computes a table with a length
       2187 |!   of 11001 for pressures ranging up to 110000 Pascals.
       2188 |!
       2189 |! Program History Log:
       2190 |!   94-12-30  Iredell
       2191 |! 1999-03-01  Iredell             f90 module
       2192 |! 1999-03-24  Iredell             table lookup
       2193 |!
       2194 |! Usage:  call gpkap
       2195 |!
       2196 |! Subprograms called:
       2197 |!   fpkapx     function to compute exact pressure to the kappa
       2198 |!
       2199 |! Attributes:
       2200 |!   Language: Fortran 90.
       2201 |!
       2202 |!$$$
       2203 |    implicit none
       2204 |    integer jx
       2205 |    real(krealfp) xmin,xmax,xinc,x,p
       2206 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2207 |    xmin=0._krealfp
       2208 |    xmax=110000._krealfp
       2209 |    xinc=(xmax-xmin)/(nxpkap-1)
       2210 |    c1xpkap=1.-xmin/xinc
       2211 |    c2xpkap=1./xinc
       2212 |    do jx=1,nxpkap
       2213 |      x=xmin+(jx-1)*xinc
       2214 |      p=x
       2215 |      tbpkap(jx)=fpkapx(p)
       2216 |    enddo
       2217 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2218 |  end subroutine
       2219 |!-------------------------------------------------------------------------------
       2220 |  elemental function fpkap(p)
       2221 |!$$$     Subprogram Documentation Block
       2222 |!
       2223 |! Subprogram: fpkap        raise pressure to the kappa power.
       2224 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2225 |!
       2226 |! Abstract: Raise pressure over 1e5 Pa to the kappa power.
       2227 |!   A linear interpolation is done between values in a lookup table
       2228 |!   computed in gpkap. See documentation for fpkapx for details.
       2229 |!   Input values outside table range are reset to table extrema.
       2230 |!   The interpolation accuracy ranges from 9 decimal places
       2231 |!   at 100000 Pascals to 5 decimal places at 1000 Pascals.
       2232 |!   On the Cray, fpkap is over 5 times faster than exact calculation.
       2233 |!   This function should be expanded inline in the calling routine.
       2234 |!
       2235 |! Program History Log:
       2236 |!   91-05-07  Iredell             made into inlinable function
       2237 |!   94-12-30  Iredell             standardized kappa,
       2238 |!                                 increased range and accuracy
       2239 |! 1999-03-01  Iredell             f90 module
       2240 |! 1999-03-24  Iredell             table lookup
       2241 |!
       2242 |! Usage:   pkap=fpkap(p)
       2243 |!
       2244 |!   Input argument list:
       2245 |!     p          Real(krealfp) pressure in Pascals
       2246 |!
       2247 |!   Output argument list:
       2248 |!     fpkap      Real(krealfp) p over 1e5 Pa to the kappa power
       2249 |!
       2250 |! Attributes:
       2251 |!   Language: Fortran 90.
       2252 |!
       2253 |!$$$
       2254 |    implicit none
       2255 |    real(krealfp) fpkap
       2256 |    real(krealfp),intent(in):: p
       2257 |    integer jx
       2258 |    real(krealfp) xj
       2259 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2260 |    xj=min(max(c1xpkap+c2xpkap*p,1._krealfp),real(nxpkap,krealfp))
       2261 |    jx=min(xj,nxpkap-1._krealfp)
       2262 |    fpkap=tbpkap(jx)+(xj-jx)*(tbpkap(jx+1)-tbpkap(jx))
       2263 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2264 |  end function
       2265 |!-------------------------------------------------------------------------------
       2266 |  elemental function fpkapq(p)
       2267 |!$$$     Subprogram Documentation Block
       2268 |!
       2269 |! Subprogram: fpkapq       raise pressure to the kappa power.
       2270 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2271 |!
       2272 |! Abstract: Raise pressure over 1e5 Pa to the kappa power.
       2273 |!   A quadratic interpolation is done between values in a lookup table
       2274 |!   computed in gpkap. see documentation for fpkapx for details.
       2275 |!   Input values outside table range are reset to table extrema.
       2276 |!   The interpolation accuracy ranges from 12 decimal places
       2277 |!   at 100000 Pascals to 7 decimal places at 1000 Pascals.
       2278 |!   On the Cray, fpkap is over 4 times faster than exact calculation.
       2279 |!   This function should be expanded inline in the calling routine.
       2280 |!
       2281 |! Program History Log:
       2282 |!   91-05-07  Iredell             made into inlinable function
       2283 |!   94-12-30  Iredell             standardized kappa,
       2284 |!                                 increased range and accuracy
       2285 |! 1999-03-01  Iredell             f90 module
       2286 |! 1999-03-24  Iredell             table lookup
       2287 |!
       2288 |! Usage:   pkap=fpkapq(p)
       2289 |!
       2290 |!   Input argument list:
       2291 |!     p          Real(krealfp) pressure in Pascals
       2292 |!
       2293 |!   Output argument list:
       2294 |!     fpkapq     Real(krealfp) p over 1e5 Pa to the kappa power
       2295 |!
       2296 |! Attributes:
       2297 |!   Language: Fortran 90.
       2298 |!
       2299 |!$$$
       2300 |    implicit none
       2301 |    real(krealfp) fpkapq
       2302 |    real(krealfp),intent(in):: p
       2303 |    integer jx
       2304 |    real(krealfp) xj,dxj,fj1,fj2,fj3
       2305 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2306 |    xj=min(max(c1xpkap+c2xpkap*p,1._krealfp),real(nxpkap,krealfp))
       2307 |    jx=min(max(nint(xj),2),nxpkap-1)
       2308 |    dxj=xj-jx
       2309 |    fj1=tbpkap(jx-1)
       2310 |    fj2=tbpkap(jx)
       2311 |    fj3=tbpkap(jx+1)
       2312 |    fpkapq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
       2313 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2314 |  end function
       2315 |!-------------------------------------------------------------------------------
       2316 |  function fpkapo(p)
       2317 |!$$$   Subprogram  documentation  block
       2318 |!
       2319 |! Subprogram: fpkapo       raise surface pressure to the kappa power.
       2320 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2321 |!
       2322 |! Abstract: Raise surface pressure over 1e5 Pa to the kappa power
       2323 |!   using a rational weighted chebyshev approximation.
       2324 |!   The numerator is of order 2 and the denominator is of order 4.
       2325 |!   The pressure range is 40000-110000 Pa and kappa is defined in fpkapx.
       2326 |!   The accuracy of this approximation is almost 8 decimal places.
       2327 |!   On the Cray, fpkap is over 10 times faster than exact calculation.
       2328 |!   This function should be expanded inline in the calling routine.
       2329 |!
       2330 |! Program History Log:
       2331 |!   91-05-07  Iredell             made into inlinable function
       2332 |!   94-12-30  Iredell             standardized kappa,
       2333 |!                                 increased range and accuracy
       2334 |! 1999-03-01  Iredell             f90 module
       2335 |!
       2336 |! Usage:  pkap=fpkapo(p)
       2337 |!
       2338 |!   Input argument list:
       2339 |!     p          Real(krealfp) surface pressure in Pascals
       2340 |!                p should be in the range 40000 to 110000
       2341 |!
       2342 |!   Output argument list:
       2343 |!     fpkapo     Real(krealfp) p over 1e5 Pa to the kappa power
       2344 |!
       2345 |! Attributes:
       2346 |!   Language: Fortran 90.
       2347 |!
       2348 |!$$$
       2349 |    implicit none
       2350 |    real(krealfp) fpkapo
       2351 |    real(krealfp),intent(in):: p
       2352 |    integer,parameter:: nnpk=2,ndpk=4
       2353 |    real(krealfp):: cnpk(0:nnpk)=(/3.13198449e-1,5.78544829e-2,&
       2354 |                                         8.35491871e-4/)
       2355 |    real(krealfp):: cdpk(0:ndpk)=(/1.,8.15968401e-2,5.72839518e-4,&
       2356 |                                         -4.86959812e-7,5.24459889e-10/)
       2357 |    integer n
       2358 |    real(krealfp) pkpa,fnpk,fdpk
       2359 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2360 |    pkpa=p*1.e-3_krealfp
       2361 |    fnpk=cnpk(nnpk)
       2362 |    do n=nnpk-1,0,-1
       2363 |      fnpk=pkpa*fnpk+cnpk(n)
       2364 |    enddo
       2365 |    fdpk=cdpk(ndpk)
       2366 |    do n=ndpk-1,0,-1
       2367 |      fdpk=pkpa*fdpk+cdpk(n)
       2368 |    enddo
       2369 |    fpkapo=fnpk/fdpk
       2370 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2371 |  end function
       2372 |!-------------------------------------------------------------------------------
       2373 |  elemental function fpkapx(p)
       2374 |!$$$   Subprogram  documentation  block
       2375 |!
       2376 |! Subprogram: fpkapx       raise pressure to the kappa power.
       2377 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2378 |!
       2379 |! Abstract: raise pressure over 1e5 Pa to the kappa power.
       2380 |!   Kappa is equal to rd/cp where rd and cp are physical constants.
       2381 |!   This function should be expanded inline in the calling routine.
       2382 |!
       2383 |! Program History Log:
       2384 |!   94-12-30  Iredell             made into inlinable function
       2385 |! 1999-03-01  Iredell             f90 module
       2386 |!
       2387 |! Usage:  pkap=fpkapx(p)
       2388 |!
       2389 |!   Input argument list:
       2390 |!     p          Real(krealfp) pressure in Pascals
       2391 |!
       2392 |!   Output argument list:
       2393 |!     fpkapx     Real(krealfp) p over 1e5 Pa to the kappa power
       2394 |!
       2395 |! Attributes:
       2396 |!   Language: Fortran 90.
       2397 |!
       2398 |!$$$
       2399 |    implicit none
       2400 |    real(krealfp) fpkapx
       2401 |    real(krealfp),intent(in):: p
       2402 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2403 |    fpkapx=(p/1.e5_krealfp)**con_rocp
       2404 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2405 |  end function
       2406 |!-------------------------------------------------------------------------------
       2407 |  subroutine grkap
       2408 |!$$$   Subprogram  documentation  block
       2409 |!
       2410 |! Subprogram: grkap        Compute coefficients for p**(1/kappa)
       2411 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2412 |!
       2413 |! Abstract: Computes pressure to the 1/kappa table as a function of pressure
       2414 |!   for the table lookup function frkap.
       2415 |!   Exact pressure to the 1/kappa values are calculated in subprogram frkapx.
       2416 |!   The current implementation computes a table with a length
       2417 |!   of 11001 for pressures ranging up to 110000 Pascals.
       2418 |!
       2419 |! Program History Log:
       2420 |!   94-12-30  Iredell
       2421 |! 1999-03-01  Iredell             f90 module
       2422 |! 1999-03-24  Iredell             table lookup
       2423 |!
       2424 |! Usage:  call grkap
       2425 |!
       2426 |! Subprograms called:
       2427 |!   frkapx     function to compute exact pressure to the 1/kappa
       2428 |!
       2429 |! Attributes:
       2430 |!   Language: Fortran 90.
       2431 |!
       2432 |!$$$
       2433 |    implicit none
       2434 |    integer jx
       2435 |    real(krealfp) xmin,xmax,xinc,x,p
       2436 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2437 |    xmin=0._krealfp
       2438 |    xmax=fpkapx(110000._krealfp)
       2439 |    xinc=(xmax-xmin)/(nxrkap-1)
       2440 |    c1xrkap=1.-xmin/xinc
       2441 |    c2xrkap=1./xinc
       2442 |    do jx=1,nxrkap
       2443 |      x=xmin+(jx-1)*xinc
       2444 |      p=x
       2445 |      tbrkap(jx)=frkapx(p)
       2446 |    enddo
       2447 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2448 |  end subroutine
       2449 |!-------------------------------------------------------------------------------
       2450 |  elemental function frkap(pkap)
       2451 |!$$$     Subprogram Documentation Block
       2452 |!
       2453 |! Subprogram: frkap        raise pressure to the 1/kappa power.
       2454 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2455 |!
       2456 |! Abstract: Raise pressure over 1e5 Pa to the 1/kappa power.
       2457 |!   A linear interpolation is done between values in a lookup table
       2458 |!   computed in grkap. See documentation for frkapx for details.
       2459 |!   Input values outside table range are reset to table extrema.
       2460 |!   The interpolation accuracy is better than 7 decimal places.
       2461 |!   On the IBM, fpkap is about 4 times faster than exact calculation.
       2462 |!   This function should be expanded inline in the calling routine.
       2463 |!
       2464 |! Program History Log:
       2465 |!   91-05-07  Iredell             made into inlinable function
       2466 |!   94-12-30  Iredell             standardized kappa,
       2467 |!                                 increased range and accuracy
       2468 |! 1999-03-01  Iredell             f90 module
       2469 |! 1999-03-24  Iredell             table lookup
       2470 |!
       2471 |! Usage:   p=frkap(pkap)
       2472 |!
       2473 |!   Input argument list:
       2474 |!     pkap       Real(krealfp) p over 1e5 Pa to the kappa power
       2475 |!
       2476 |!   Output argument list:
       2477 |!     frkap      Real(krealfp) pressure in Pascals
       2478 |!
       2479 |! Attributes:
       2480 |!   Language: Fortran 90.
       2481 |!
       2482 |!$$$
       2483 |    implicit none
       2484 |    real(krealfp) frkap
       2485 |    real(krealfp),intent(in):: pkap
       2486 |    integer jx
       2487 |    real(krealfp) xj
       2488 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2489 |    xj=min(max(c1xrkap+c2xrkap*pkap,1._krealfp),real(nxrkap,krealfp))
       2490 |    jx=min(xj,nxrkap-1._krealfp)
       2491 |    frkap=tbrkap(jx)+(xj-jx)*(tbrkap(jx+1)-tbrkap(jx))
       2492 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2493 |  end function
       2494 |!-------------------------------------------------------------------------------
       2495 |  elemental function frkapq(pkap)
       2496 |!$$$     Subprogram Documentation Block
       2497 |!
       2498 |! Subprogram: frkapq       raise pressure to the 1/kappa power.
       2499 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2500 |!
       2501 |! Abstract: Raise pressure over 1e5 Pa to the 1/kappa power.
       2502 |!   A quadratic interpolation is done between values in a lookup table
       2503 |!   computed in grkap. see documentation for frkapx for details.
       2504 |!   Input values outside table range are reset to table extrema.
       2505 |!   The interpolation accuracy is better than 11 decimal places.
       2506 |!   On the IBM, fpkap is almost 4 times faster than exact calculation.
       2507 |!   This function should be expanded inline in the calling routine.
       2508 |!
       2509 |! Program History Log:
       2510 |!   91-05-07  Iredell             made into inlinable function
       2511 |!   94-12-30  Iredell             standardized kappa,
       2512 |!                                 increased range and accuracy
       2513 |! 1999-03-01  Iredell             f90 module
       2514 |! 1999-03-24  Iredell             table lookup
       2515 |!
       2516 |! Usage:   p=frkapq(pkap)
       2517 |!
       2518 |!   Input argument list:
       2519 |!     pkap       Real(krealfp) p over 1e5 Pa to the kappa power
       2520 |!
       2521 |!   Output argument list:
       2522 |!     frkapq     Real(krealfp) pressure in Pascals
       2523 |!
       2524 |! Attributes:
       2525 |!   Language: Fortran 90.
       2526 |!
       2527 |!$$$
       2528 |    implicit none
       2529 |    real(krealfp) frkapq
       2530 |    real(krealfp),intent(in):: pkap
       2531 |    integer jx
       2532 |    real(krealfp) xj,dxj,fj1,fj2,fj3
       2533 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2534 |    xj=min(max(c1xrkap+c2xrkap*pkap,1._krealfp),real(nxrkap,krealfp))
       2535 |    jx=min(max(nint(xj),2),nxrkap-1)
       2536 |    dxj=xj-jx
       2537 |    fj1=tbrkap(jx-1)
       2538 |    fj2=tbrkap(jx)
       2539 |    fj3=tbrkap(jx+1)
       2540 |    frkapq=(((fj3+fj1)/2-fj2)*dxj+(fj3-fj1)/2)*dxj+fj2
       2541 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2542 |  end function
       2543 |!-------------------------------------------------------------------------------
       2544 |  elemental function frkapx(pkap)
       2545 |!$$$   Subprogram  documentation  block
       2546 |!
       2547 |! Subprogram: frkapx       raise pressure to the 1/kappa power.
       2548 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2549 |!
       2550 |! Abstract: raise pressure over 1e5 Pa to the 1/kappa power.
       2551 |!   Kappa is equal to rd/cp where rd and cp are physical constants.
       2552 |!   This function should be expanded inline in the calling routine.
       2553 |!
       2554 |! Program History Log:
       2555 |!   94-12-30  Iredell             made into inlinable function
       2556 |! 1999-03-01  Iredell             f90 module
       2557 |!
       2558 |! Usage:  p=frkapx(pkap)
       2559 |!
       2560 |!   Input argument list:
       2561 |!     pkap       Real(krealfp) p over 1e5 Pa to the kappa power
       2562 |!
       2563 |!   Output argument list:
       2564 |!     frkapx     Real(krealfp) pressure in Pascals
       2565 |!
       2566 |! Attributes:
       2567 |!   Language: Fortran 90.
       2568 |!
       2569 |!$$$
       2570 |    implicit none
       2571 |    real(krealfp) frkapx
       2572 |    real(krealfp),intent(in):: pkap
       2573 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2574 |    frkapx=pkap**(1/con_rocp)*1.e5_krealfp
       2575 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2576 |  end function
       2577 |!-------------------------------------------------------------------------------
       2578 |  subroutine gtlcl
       2579 |!$$$     Subprogram Documentation Block
       2580 |!
       2581 |! Subprogram: gtlcl        Compute equivalent potential temperature table
       2582 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2583 |!
       2584 |! Abstract: Compute lifting condensation level temperature table
       2585 |!   as a function of temperature and dewpoint depression for function ftlcl.
       2586 |!   Lifting condensation level temperature is calculated in subprogram ftlclx
       2587 |!   The current implementation computes a table with a first dimension
       2588 |!   of 151 for temperatures ranging from 180.0 to 330.0 Kelvin
       2589 |!   and a second dimension of 61 for dewpoint depression ranging from
       2590 |!   0 to 60 Kelvin.
       2591 |!
       2592 |! Program History Log:
       2593 |! 1999-03-01  Iredell             f90 module
       2594 |!
       2595 |! Usage:  call gtlcl
       2596 |!
       2597 |! Subprograms called:
       2598 |!   (ftlclx)    inlinable function to compute LCL temperature
       2599 |!
       2600 |! Attributes:
       2601 |!   Language: Fortran 90.
       2602 |!
       2603 |!$$$
       2604 |    implicit none
       2605 |    integer jx,jy
       2606 |    real(krealfp) xmin,xmax,ymin,ymax,xinc,yinc,x,y,tdpd,t
       2607 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2608 |    xmin=180._krealfp
       2609 |    xmax=330._krealfp
       2610 |    ymin=0._krealfp
       2611 |    ymax=60._krealfp
       2612 |    xinc=(xmax-xmin)/(nxtlcl-1)
       2613 |    c1xtlcl=1.-xmin/xinc
       2614 |    c2xtlcl=1./xinc
       2615 |    yinc=(ymax-ymin)/(nytlcl-1)
       2616 |    c1ytlcl=1.-ymin/yinc
       2617 |    c2ytlcl=1./yinc
       2618 |    do jy=1,nytlcl
       2619 |      y=ymin+(jy-1)*yinc
       2620 |      tdpd=y
       2621 |      do jx=1,nxtlcl
       2622 |        x=xmin+(jx-1)*xinc
       2623 |        t=x
       2624 |        tbtlcl(jx,jy)=ftlclx(t,tdpd)
       2625 |      enddo
       2626 |    enddo
       2627 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2628 |  end subroutine
       2629 |!-------------------------------------------------------------------------------
       2630 |  elemental function ftlcl(t,tdpd)
       2631 |!$$$     Subprogram Documentation Block
       2632 |!
       2633 |! Subprogram: ftlcl        Compute LCL temperature
       2634 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2635 |!
       2636 |! Abstract: Compute temperature at the lifting condensation level
       2637 |!   from temperature and dewpoint depression.
       2638 |!   A bilinear interpolation is done between values in a lookup table
       2639 |!   computed in gtlcl. See documentation for ftlclx for details.
       2640 |!   Input values outside table range are reset to table extrema.
       2641 |!   The interpolation accuracy is better than 0.0005 Kelvin.
       2642 |!   On the Cray, ftlcl is ? times faster than exact calculation.
       2643 |!   This function should be expanded inline in the calling routine.
       2644 |!
       2645 |! Program History Log:
       2646 |! 1999-03-01  Iredell             f90 module
       2647 |!
       2648 |! Usage:   tlcl=ftlcl(t,tdpd)
       2649 |!
       2650 |!   Input argument list:
       2651 |!     t          Real(krealfp) LCL temperature in Kelvin
       2652 |!     tdpd       Real(krealfp) dewpoint depression in Kelvin
       2653 |!
       2654 |!   Output argument list:
       2655 |!     ftlcl      Real(krealfp) temperature at the LCL in Kelvin
       2656 |!
       2657 |! Attributes:
       2658 |!   Language: Fortran 90.
       2659 |!
       2660 |!$$$
       2661 |    implicit none
       2662 |    real(krealfp) ftlcl
       2663 |    real(krealfp),intent(in):: t,tdpd
       2664 |    integer jx,jy
       2665 |    real(krealfp) xj,yj,ftx1,ftx2
       2666 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2667 |    xj=min(max(c1xtlcl+c2xtlcl*t,1._krealfp),real(nxtlcl,krealfp))
       2668 |    yj=min(max(c1ytlcl+c2ytlcl*tdpd,1._krealfp),real(nytlcl,krealfp))
       2669 |    jx=min(xj,nxtlcl-1._krealfp)
       2670 |    jy=min(yj,nytlcl-1._krealfp)
       2671 |    ftx1=tbtlcl(jx,jy)+(xj-jx)*(tbtlcl(jx+1,jy)-tbtlcl(jx,jy))
       2672 |    ftx2=tbtlcl(jx,jy+1)+(xj-jx)*(tbtlcl(jx+1,jy+1)-tbtlcl(jx,jy+1))
       2673 |    ftlcl=ftx1+(yj-jy)*(ftx2-ftx1)
       2674 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2675 |  end function
       2676 |!-------------------------------------------------------------------------------
       2677 |  elemental function ftlclq(t,tdpd)
       2678 |!$$$     Subprogram Documentation Block
       2679 |!
       2680 |! Subprogram: ftlclq       Compute LCL temperature
       2681 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2682 |!
       2683 |! Abstract: Compute temperature at the lifting condensation level
       2684 |!   from temperature and dewpoint depression.
       2685 |!   A biquadratic interpolation is done between values in a lookup table
       2686 |!   computed in gtlcl. see documentation for ftlclx for details.
       2687 |!   Input values outside table range are reset to table extrema.
       2688 |!   The interpolation accuracy is better than 0.000003 Kelvin.
       2689 |!   On the Cray, ftlclq is ? times faster than exact calculation.
       2690 |!   This function should be expanded inline in the calling routine.
       2691 |!
       2692 |! Program History Log:
       2693 |! 1999-03-01  Iredell             f90 module
       2694 |!
       2695 |! Usage:   tlcl=ftlclq(t,tdpd)
       2696 |!
       2697 |!   Input argument list:
       2698 |!     t          Real(krealfp) LCL temperature in Kelvin
       2699 |!     tdpd       Real(krealfp) dewpoint depression in Kelvin
       2700 |!
       2701 |!   Output argument list:
       2702 |!     ftlcl      Real(krealfp) temperature at the LCL in Kelvin
       2703 |!
       2704 |! Attributes:
       2705 |!   Language: Fortran 90.
       2706 |!
       2707 |!$$$
       2708 |    implicit none
       2709 |    real(krealfp) ftlclq
       2710 |    real(krealfp),intent(in):: t,tdpd
       2711 |    integer jx,jy
       2712 |    real(krealfp) xj,yj,dxj,dyj
       2713 |    real(krealfp) ft11,ft12,ft13,ft21,ft22,ft23,ft31,ft32,ft33
       2714 |    real(krealfp) ftx1,ftx2,ftx3
       2715 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2716 |    xj=min(max(c1xtlcl+c2xtlcl*t,1._krealfp),real(nxtlcl,krealfp))
       2717 |    yj=min(max(c1ytlcl+c2ytlcl*tdpd,1._krealfp),real(nytlcl,krealfp))
       2718 |    jx=min(max(nint(xj),2),nxtlcl-1)
       2719 |    jy=min(max(nint(yj),2),nytlcl-1)
       2720 |    dxj=xj-jx
       2721 |    dyj=yj-jy
       2722 |    ft11=tbtlcl(jx-1,jy-1)
       2723 |    ft12=tbtlcl(jx-1,jy)
       2724 |    ft13=tbtlcl(jx-1,jy+1)
       2725 |    ft21=tbtlcl(jx,jy-1)
       2726 |    ft22=tbtlcl(jx,jy)
       2727 |    ft23=tbtlcl(jx,jy+1)
       2728 |    ft31=tbtlcl(jx+1,jy-1)
       2729 |    ft32=tbtlcl(jx+1,jy)
       2730 |    ft33=tbtlcl(jx+1,jy+1)
       2731 |    ftx1=(((ft31+ft11)/2-ft21)*dxj+(ft31-ft11)/2)*dxj+ft21
       2732 |    ftx2=(((ft32+ft12)/2-ft22)*dxj+(ft32-ft12)/2)*dxj+ft22
       2733 |    ftx3=(((ft33+ft13)/2-ft23)*dxj+(ft33-ft13)/2)*dxj+ft23
       2734 |    ftlclq=(((ftx3+ftx1)/2-ftx2)*dyj+(ftx3-ftx1)/2)*dyj+ftx2
       2735 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2736 |  end function
       2737 |!-------------------------------------------------------------------------------
       2738 |  function ftlclo(t,tdpd)
       2739 |!$$$   Subprogram  documentation  block
       2740 |!
       2741 |! Subprogram: ftlclo       Compute LCL temperature.
       2742 |!   Author: Phillips         org: w/NMC2X2   Date: 29 dec 82
       2743 |!
       2744 |! Abstract: Compute temperature at the lifting condensation level
       2745 |!   from temperature and dewpoint depression.  the formula used is
       2746 |!   a polynomial taken from Phillips mstadb routine which empirically
       2747 |!   approximates the original exact implicit relationship.
       2748 |!   (This kind of approximation is customary (inman, 1969), but
       2749 |!   the original source for this particular one is not yet known. -MI)
       2750 |!   Its accuracy is about 0.03 Kelvin for a dewpoint depression of 30.
       2751 |!   This function should be expanded inline in the calling routine.
       2752 |!
       2753 |! Program History Log:
       2754 |!   91-05-07  Iredell             made into inlinable function
       2755 |! 1999-03-01  Iredell             f90 module
       2756 |!
       2757 |! Usage:  tlcl=ftlclo(t,tdpd)
       2758 |!
       2759 |!   Input argument list:
       2760 |!     t          Real(krealfp) temperature in Kelvin
       2761 |!     tdpd       Real(krealfp) dewpoint depression in Kelvin
       2762 |!
       2763 |!   Output argument list:
       2764 |!     ftlclo     Real(krealfp) temperature at the LCL in Kelvin
       2765 |!
       2766 |! Attributes:
       2767 |!   Language: Fortran 90.
       2768 |!
       2769 |!$$$
       2770 |    implicit none
       2771 |    real(krealfp) ftlclo
       2772 |    real(krealfp),intent(in):: t,tdpd
       2773 |    real(krealfp),parameter:: clcl1= 0.954442e+0,clcl2= 0.967772e-3,&
       2774 |                                    clcl3=-0.710321e-3,clcl4=-0.270742e-5
       2775 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2776 |    ftlclo=t-tdpd*(clcl1+clcl2*t+tdpd*(clcl3+clcl4*t))
       2777 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2778 |  end function
       2779 |!-------------------------------------------------------------------------------
       2780 |  elemental function ftlclx(t,tdpd)
       2781 |!$$$   Subprogram  documentation  block
       2782 |!
       2783 |! Subprogram: ftlclx       Compute LCL temperature.
       2784 |!   Author: Iredell          org: w/NMC2X2   Date: 25 March 1999
       2785 |!
       2786 |! Abstract: Compute temperature at the lifting condensation level
       2787 |!   from temperature and dewpoint depression.  A parcel lifted
       2788 |!   adiabatically becomes saturated at the lifting condensation level.
       2789 |!   The water model assumes a perfect gas, constant specific heats
       2790 |!   for gas and liquid, and neglects the volume of the liquid.
       2791 |!   The model does account for the variation of the latent heat
       2792 |!   of condensation with temperature.  The ice option is not included.
       2793 |!   The Clausius-Clapeyron equation is integrated from the triple point
       2794 |!   to get the formulas
       2795 |!       pvlcl=con_psat*(trlcl**xa)*exp(xb*(1.-trlcl))
       2796 |!       pvdew=con_psat*(trdew**xa)*exp(xb*(1.-trdew))
       2797 |!   where pvlcl is the saturated parcel vapor pressure at the LCL,
       2798 |!   pvdew is the unsaturated parcel vapor pressure initially,
       2799 |!   trlcl is ttp/tlcl and trdew is ttp/tdew.  The adiabatic lifting
       2800 |!   of the parcel is represented by the following formula
       2801 |!       pvdew=pvlcl*(t/tlcl)**(1/kappa)
       2802 |!   This formula is inverted by iterating Newtonian approximations
       2803 |!   until tlcl is found to within 1.e-6 Kelvin.  Note that the minimum
       2804 |!   returned temperature is 180 Kelvin.
       2805 |!
       2806 |! Program History Log:
       2807 |! 1999-03-25  Iredell
       2808 |!
       2809 |! Usage:  tlcl=ftlclx(t,tdpd)
       2810 |!
       2811 |!   Input argument list:
       2812 |!     t          Real(krealfp) temperature in Kelvin
       2813 |!     tdpd       Real(krealfp) dewpoint depression in Kelvin
       2814 |!
       2815 |!   Output argument list:
       2816 |!     ftlclx     Real(krealfp) temperature at the LCL in Kelvin
       2817 |!
       2818 |! Attributes:
       2819 |!   Language: Fortran 90.
       2820 |!
       2821 |!$$$
       2822 |    implicit none
       2823 |    real(krealfp) ftlclx
       2824 |    real(krealfp),intent(in):: t,tdpd
       2825 |    real(krealfp),parameter:: terrm=1.e-4,tlmin=180.,tlminx=tlmin-5.
       2826 |    real(krealfp) tr,pvdew,tlcl,ta,pvlcl,el,dpvlcl,terr,terrp
       2827 |    integer i
       2828 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2829 |    tr=con_ttp/(t-tdpd)
       2830 |    pvdew=con_psat*(tr**con_xpona)*exp(con_xponb*(1.-tr))
       2831 |    tlcl=t-tdpd
       2832 |    do i=1,100
       2833 |      tr=con_ttp/tlcl
       2834 |      ta=t/tlcl
       2835 |      pvlcl=con_psat*(tr**con_xpona)*exp(con_xponb*(1.-tr))*ta**(1/con_rocp)
       2836 |      el=con_hvap+con_dldt*(tlcl-con_ttp)
       2837 |      dpvlcl=(el/(con_rv*t**2)+1/(con_rocp*tlcl))*pvlcl
       2838 |      terr=(pvlcl-pvdew)/dpvlcl
       2839 |      tlcl=tlcl-terr
       2840 |      if(abs(terr).le.terrm.or.tlcl.lt.tlminx) exit
       2841 |    enddo
       2842 |    ftlclx=max(tlcl,tlmin)
       2843 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2844 |  end function
       2845 |!-------------------------------------------------------------------------------
       2846 |  subroutine gfuncphys
       2847 |!$$$     Subprogram Documentation Block
       2848 |!
       2849 |! Subprogram: gfuncphys    Compute all physics function tables
       2850 |!   Author: N Phillips            w/NMC2X2   Date: 30 dec 82
       2851 |!
       2852 |! Abstract: Compute all physics function tables.  Lookup tables are
       2853 |!   set up for computing saturation vapor pressure, dewpoint temperature,
       2854 |!   equivalent potential temperature, moist adiabatic temperature and humidity,
       2855 |!   pressure to the kappa, and lifting condensation level temperature.
       2856 |!
       2857 |! Program History Log:
       2858 |! 1999-03-01  Iredell             f90 module
       2859 |!
       2860 |! Usage:  call gfuncphys
       2861 |!
       2862 |! Subprograms called:
       2863 |!   gpvsl       compute saturation vapor pressure over liquid table
       2864 |!   gpvsi       compute saturation vapor pressure over ice table
       2865 |!   gpvs        compute saturation vapor pressure table
       2866 |!   gtdpl       compute dewpoint temperature over liquid table
       2867 |!   gtdpi       compute dewpoint temperature over ice table
       2868 |!   gtdp        compute dewpoint temperature table
       2869 |!   gthe        compute equivalent potential temperature table
       2870 |!   gtma        compute moist adiabat tables
       2871 |!   gpkap       compute pressure to the kappa table
       2872 |!   grkap       compute pressure to the 1/kappa table
       2873 |!   gtlcl       compute LCL temperature table
       2874 |!
       2875 |! Attributes:
       2876 |!   Language: Fortran 90.
       2877 |!
       2878 |!$$$
       2879 |    implicit none
       2880 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2881 |    call gpvsl
       2882 |    call gpvsi
       2883 |    call gpvs
       2884 |    call gtdpl
       2885 |    call gtdpi
       2886 |    call gtdp
       2887 |    call gthe
       2888 |    call gtma
       2889 |    call gpkap
       2890 |    call grkap
       2891 |    call gtlcl
       2892 |! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2893 |  end subroutine
       2894 |!-------------------------------------------------------------------------------
       2895 |end module
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
abs                              Pure Intrinsic
                                 0-2840.10
 
abs                              Pure Intrinsic
                                 0-2167.10
 
abs                              Pure Intrinsic
                                 0-1623.10
 
abs                              Pure Intrinsic
                                 0-1348.10
 
abs                              Pure Intrinsic
                                 0-1098.10
 
c1xma                            Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-265.17$  0-1902.5@  0-1965.16  0-2023.16
 
c1xpkap                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-267.17$  0-2210.5@  0-2260.16  0-2306.16
 
c1xpvs                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-255.17$  0-688.5@  0-736.16  0-780.16
 
c1xpvsi                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-253.17$  0-503.5@  0-551.16  0-595.16
 
c1xpvsl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-251.17$  0-321.5@  0-368.16  0-411.16
 
c1xrkap                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-269.17$  0-2440.5@  0-2489.16  0-2534.16
 
c1xtdp                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-261.17$  0-1389.5@  0-1441.16  0-1487.16
 
c1xtdpi                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-259.17$  0-1139.5@  0-1191.16  0-1237.16
 
c1xtdpl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-257.17$  0-893.5@  0-944.16  0-989.16
 
c1xthe                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-263.17$  0-1667.5@  0-1724.12  0-1780.12
 
c1xtlcl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-271.17$  0-2613.5@  0-2667.16  0-2716.16
 
c1yma                            Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-265.29$  0-1905.5@  0-1966.16  0-2024.16
 
c1ythe                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-263.31$  0-1670.5@  0-1725.12  0-1781.12
 
c1ytlcl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-271.33$  0-2616.5@  0-2668.16  0-2717.16
 
c2xma                            Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-265.23$  0-1903.5@  0-1965.22  0-2023.22
 
c2xpkap                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-267.25$  0-2211.5@  0-2260.24  0-2306.24
 
c2xpvs                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-255.24$  0-689.5@  0-736.23  0-780.23
 
c2xpvsi                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-253.25$  0-504.5@  0-551.24  0-595.24
 
c2xpvsl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-251.25$  0-322.5@  0-368.24  0-411.24
 
c2xrkap                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-269.25$  0-2441.5@  0-2489.24  0-2534.24
 
c2xtdp                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-261.24$  0-1390.5@  0-1441.23  0-1487.23
 
c2xtdpi                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-259.25$  0-1140.5@  0-1191.24  0-1237.24
 
c2xtdpl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-257.25$  0-894.5@  0-944.24  0-989.24
 
c2xthe                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-263.24$  0-1668.5@  0-1724.19  0-1780.19
 
c2xtlcl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-271.25$  0-2614.5@  0-2667.24  0-2716.24
 
c2yma                            Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-265.35$  0-1906.5@  0-1966.22  0-2024.22
 
c2ythe                           Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-263.38$  0-1671.5@  0-1725.19  0-1781.19
 
c2ytlcl                          Private, Static, Real(8), Offset: 0, Alignment: double word
                                 0-271.41$  0-2617.5@  0-2668.24  0-2717.24
 
cdpk                             Static, Real(8) (0:4), Offset: 0, Alignment: double word
                                 0-2355.21$  0-2365.10  0-2367.22
 
clcl1                            Parameter, Real(8)
                                 0-2773.31$  0-2776.20
 
clcl2                            Parameter, Real(8)
                                 0-2773.50$  0-2776.26
 
clcl3                            Parameter, Real(8)
                                 0-2774.37$  0-2776.40
 
clcl4                            Parameter, Real(8)
                                 0-2774.56$  0-2776.46
 
cnpk                             Static, Real(8) (0:2), Offset: 0, Alignment: double word
                                 0-2353.21$  0-2361.10  0-2363.22
 
con_cliq                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-458.45  0-835.46  0-1083.45  0-1590.46
 
con_cp                           Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1856.27  0-2162.27
 
con_cpor                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1850.11  0-2156.11
 
con_csol                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-643.45  0-839.46  0-1333.45  0-1594.46
 
con_cv                           Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_cvap                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-458.36  0-643.36  0-835.37  0-839.37  0-1083.36  0-1333.36  0-1590.37  0-1594.37
 
con_dldt                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1855.19  0-2161.19  0-2164.30  0-2836.19
 
con_eps                          Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1856.15  0-2162.15  0-2173.9  0-2173.24
 
con_epsm1                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_fvirt                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_g                            Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_hfus                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-644.45  0-840.46  0-1334.45  0-1595.46
 
con_hvap                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-459.36  0-644.36  0-836.37  0-840.37  0-1084.36  0-1334.36  0-1591.37  0-1595.37
                                 0-1855.10  0-2161.10  0-2836.10
 
con_omega                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_pi                           Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_psat                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-249.35  0-465.12  0-650.12  0-847.13  0-849.13  0-852.11  0-853.11  0-1093.11
                                 0-1343.11  0-1605.13  0-1609.13  0-1614.14  0-1615.14  0-2830.11  0-2835.13
 
con_rd                           Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_rerth                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_rocp                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1664.24  0-1665.24  0-1857.21  0-1899.24  0-1900.24  0-2163.20  0-2403.30  0-2574.21
                                 0-2835.68  0-2837.35
 
con_rog                          Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_rv                           Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-460.43  0-461.43  0-461.56  0-645.43  0-646.43  0-646.56  0-837.45  0-838.45  0-838.59
                                 0-841.45  0-842.45  0-842.59  0-1085.43  0-1086.43  0-1086.56  0-1095.20  0-1335.43  0-1336.43
                                 0-1336.56  0-1345.20  0-1592.45  0-1593.45  0-1593.59  0-1596.45  0-1597.45  0-1597.59  0-1607.22
                                 0-1611.22  0-1619.44  0-2164.50  0-2837.19
 
con_sbc                          Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_solr                         Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_sqrt2                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_sqrt3                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_t0c                          Use associated, Private, Parameter, Real(8)
                                 0-240.7$
 
con_ttp                          Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-461.63  0-464.8  0-646.63  0-649.8  0-833.36  0-834.36  0-838.66  0-842.66  0-845.8
                                 0-1086.63  0-1092.10  0-1094.23  0-1336.63  0-1342.10  0-1344.23  0-1588.36  0-1589.36  0-1593.66
                                 0-1597.66  0-1603.10  0-1606.27  0-1610.27  0-1617.28  0-1618.28  0-1662.10  0-1663.10  0-1851.8
                                 0-1855.31  0-2158.10  0-2161.31  0-2170.8  0-2829.8  0-2833.10  0-2836.34
 
con_xpona                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1852.19  0-2159.21  0-2171.19  0-2830.25  0-2835.27
 
con_xponb                        Use associated, Private, Parameter, Real(8)
                                 0-240.7$  0-1852.34  0-2159.36  0-2171.34  0-2830.40  0-2835.42
 
dldt                             Parameter, Real(8)
                                 0-643.31$  0-645.38  0-646.38
 
dldt                             Parameter, Real(8)
                                 0-458.31$  0-460.38  0-461.38
 
dldt                             Parameter, Real(8)
                                 0-1083.31$  0-1085.38  0-1086.38  0-1094.15
 
dldt                             Parameter, Real(8)
                                 0-1333.31$  0-1335.38  0-1336.38  0-1344.15
 
dldti                            Parameter, Real(8)
                                 0-839.31$  0-841.39  0-842.39
 
dldti                            Parameter, Real(8)
                                 0-1594.31$  0-1596.39  0-1597.39  0-1610.18  0-1618.19
 
dldtl                            Parameter, Real(8)
                                 0-1590.31$  0-1592.39  0-1593.39  0-1606.18  0-1617.19
 
dldtl                            Parameter, Real(8)
                                 0-835.31$  0-837.39  0-838.39
 
dpvlcl                           Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.45$  0-2837.7@  0-2838.26
 
dpvt                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.51$  0-1607.9@  0-1611.9@  0-1619.9@  0-1621.21
 
dpvt                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.31$  0-1345.7@  0-1346.21
 
dpvt                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.31$  0-1095.7@  0-1096.21
 
dthet                            Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.45$  0-2164.7@  0-2165.23
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-409.22$  0-413.5@  0-417.31  0-417.48
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1235.22$  0-1239.5@  0-1243.31  0-1243.48
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-987.22$  0-991.5@  0-995.31  0-995.48
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2304.22$  0-2308.5@  0-2312.31  0-2312.48
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2532.22$  0-2536.5@  0-2540.31  0-2540.48
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2712.25$  0-2720.5@  0-2731.32  0-2731.51  0-2732.32  0-2732.51  0-2733.32  0-2733.51
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1776.25$  0-1785.7@  0-1796.34  0-1796.53  0-1797.34  0-1797.53  0-1798.34  0-1798.53
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2018.25$  0-2027.5@  0-2038.32  0-2038.51  0-2039.32  0-2039.51  0-2040.32  0-2040.51  0-2051.28
                                 0-2051.45  0-2052.28  0-2052.45  0-2053.28  0-2053.45
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-778.22$  0-782.5@  0-786.30  0-786.47
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1485.22$  0-1489.5@  0-1493.30  0-1493.47
 
dxj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-593.22$  0-597.5@  0-601.31  0-601.48
 
dyj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1776.29$  0-1786.7@  0-1799.35  0-1799.54
 
dyj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2018.29$  0-2028.5@  0-2041.31  0-2041.50  0-2054.28  0-2054.45
 
dyj                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2712.29$  0-2721.5@  0-2734.34  0-2734.53
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.30$  0-1855.7@  0-1856.12
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.32$  0-2161.7@  0-2162.12  0-2164.41  0-2164.44
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.28$  0-1094.7@  0-1095.12
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.42$  0-2836.7@  0-2837.15
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.48$  0-1606.9@  0-1607.14  0-1610.9@  0-1611.14
 
el                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.28$  0-1344.7@  0-1345.12
 
eli                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.44$  0-1618.9@  0-1619.33
 
ell                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.40$  0-1617.9@  0-1619.17
 
exp                              Pure Intrinsic
                                 0-2830.36  0-2835.38
 
exp                              Pure Intrinsic
                                 0-2159.32  0-2163.30  0-2171.30
 
exp                              Pure Intrinsic
                                 0-847.35  0-849.35  0-852.33  0-853.33
 
exp                              Pure Intrinsic
                                 0-1852.30  0-1857.31
 
exp                              Pure Intrinsic
                                 0-1343.32
 
exp                              Pure Intrinsic
                                 0-1093.32
 
exp                              Pure Intrinsic
                                 0-650.33
 
exp                              Pure Intrinsic
                                 0-465.33
 
exp                              Pure Intrinsic
                                 0-1605.35  0-1609.35  0-1614.36  0-1615.36
 
expmax                           Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.38$
 
expo                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.33$  0-1856.7@  0-1857.35
 
expo                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.35$  0-2162.7@  0-2163.34  0-2164.24
 
fdpk                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2358.29$  0-2365.5@  0-2367.7@  0-2367.17  0-2369.17
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1485.26$  0-1490.5@  0-1493.18  0-1493.39
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1235.26$  0-1240.5@  0-1243.19  0-1243.40
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2532.26$  0-2537.5@  0-2540.19  0-2540.40
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-987.26$  0-992.5@  0-995.19  0-995.40
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-778.26$  0-783.5@  0-786.18  0-786.39
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2304.26$  0-2309.5@  0-2312.19  0-2312.40
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-593.26$  0-598.5@  0-601.19  0-601.40
 
fj1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-409.26$  0-414.5@  0-417.19  0-417.40
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-778.30$  0-784.5@  0-786.25  0-786.51
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1485.30$  0-1491.5@  0-1493.25  0-1493.51
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1235.30$  0-1241.5@  0-1243.26  0-1243.52
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-987.30$  0-993.5@  0-995.26  0-995.52
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-409.30$  0-415.5@  0-417.26  0-417.52
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-593.30$  0-599.5@  0-601.26  0-601.52
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2304.30$  0-2310.5@  0-2312.26  0-2312.52
 
fj2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2532.30$  0-2538.5@  0-2540.26  0-2540.52
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-593.34$  0-600.5@  0-601.15  0-601.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-987.34$  0-994.5@  0-995.15  0-995.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1235.34$  0-1242.5@  0-1243.15  0-1243.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2532.34$  0-2539.5@  0-2540.15  0-2540.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2304.34$  0-2311.5@  0-2312.15  0-2312.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-409.34$  0-416.5@  0-417.15  0-417.36
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-778.34$  0-785.5@  0-786.14  0-786.35
 
fj3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1485.34$  0-1492.5@  0-1493.14  0-1493.35
 
fnpk                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2358.24$  0-2361.5@  0-2363.7@  0-2363.17  0-2369.12
 
fpkap                            Function Real(8)
                                 0-2255.19$  0-2262.5@
 
fpkap                            Public, Elemental Pure Module Function Real(8)
                                 0-282.16$  0-2220.22$
 
fpkapo                           Function Real(8)
                                 0-2350.19$  0-2369.5@
 
fpkapo                           Public, Module Function Real(8)
                                 0-282.29$  0-2316.12$
 
fpkapq                           Public, Elemental Pure Module Function Real(8)
                                 0-282.22$  0-2266.22$
 
fpkapq                           Function Real(8)
                                 0-2301.19$  0-2312.5@
 
fpkapx                           Function Real(8)
                                 0-2400.19$  0-2403.5@
 
fpkapx                           Public, Elemental Pure Module Function Real(8)
                                 0-282.36$  0-2373.22$  0-2215.18  0-2438.10
 
fpvs                             Function Real(8)
                                 0-731.19$  0-738.5@
 
fpvs                             Public, Elemental Pure Module Function Real(8)
                                 0-276.15$  0-698.22$
 
fpvsi                            Public, Elemental Pure Module Function Real(8)
                                 0-275.16$  0-513.22$
 
fpvsi                            Function Real(8)
                                 0-546.19$  0-553.5@
 
fpvsiq                           Function Real(8)
                                 0-590.19$  0-601.5@
 
fpvsiq                           Public, Elemental Pure Module Function Real(8)
                                 0-275.22$  0-557.22$
 
fpvsix                           Public, Elemental Pure Module Function Real(8)
                                 0-275.29$  0-605.22$  0-508.18
 
fpvsix                           Function Real(8)
                                 0-641.19$  0-650.5@
 
fpvsl                            Public, Elemental Pure Module Function Real(8)
                                 0-274.16$  0-331.22$
 
fpvsl                            Function Real(8)
                                 0-363.19$  0-370.5@
 
fpvslq                           Public, Elemental Pure Module Function Real(8)
                                 0-274.22$  0-374.22$
 
fpvslq                           Function Real(8)
                                 0-406.19$  0-417.5@
 
fpvslx                           Public, Elemental Pure Module Function Real(8)
                                 0-274.29$  0-421.22$  0-326.18
 
fpvslx                           Function Real(8)
                                 0-456.19$  0-465.5@
 
fpvsq                            Public, Elemental Pure Module Function Real(8)
                                 0-276.20$  0-742.22$
 
fpvsq                            Function Real(8)
                                 0-775.19$  0-786.5@
 
fpvsx                            Function Real(8)
                                 0-831.19$  0-847.7@  0-849.7@  0-854.7@
 
fpvsx                            Public, Elemental Pure Module Function Real(8)
                                 0-276.26$  0-790.22$  0-693.17
 
frkap                            Public, Elemental Pure Module Function Real(8)
                                 0-283.16$  0-2450.22$
 
frkap                            Function Real(8)
                                 0-2484.19$  0-2491.5@
 
frkapq                           Function Real(8)
                                 0-2529.19$  0-2540.5@
 
frkapq                           Public, Elemental Pure Module Function Real(8)
                                 0-283.22$  0-2495.22$
 
frkapx                           Function Real(8)
                                 0-2571.19$  0-2574.5@
 
frkapx                           Public, Elemental Pure Module Function Real(8)
                                 0-283.29$  0-2544.22$  0-2445.18
 
ft11                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.19$  0-2722.5@  0-2731.18  0-2731.42
 
ft11                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.19$  0-2029.5@  0-2038.18  0-2038.42
 
ft11                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.19$  0-1787.7@  0-1796.20  0-1796.44
 
ft12                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.24$  0-1788.7@  0-1797.20  0-1797.44
 
ft12                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.24$  0-2030.5@  0-2039.18  0-2039.42
 
ft12                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.24$  0-2723.5@  0-2732.18  0-2732.42
 
ft13                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.29$  0-2724.5@  0-2733.18  0-2733.42
 
ft13                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.29$  0-1789.7@  0-1798.20  0-1798.44
 
ft13                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.29$  0-2031.5@  0-2040.18  0-2040.42
 
ft21                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.34$  0-2725.5@  0-2731.26  0-2731.55
 
ft21                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.34$  0-2032.5@  0-2038.26  0-2038.55
 
ft21                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.34$  0-1790.7@  0-1796.28  0-1796.57
 
ft22                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.39$  0-2726.5@  0-2732.26  0-2732.55
 
ft22                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.39$  0-1791.7@  0-1797.28  0-1797.57
 
ft22                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.39$  0-2033.5@  0-2039.26  0-2039.55
 
ft23                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.44$  0-2727.5@  0-2733.26  0-2733.55
 
ft23                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.44$  0-2034.5@  0-2040.26  0-2040.55
 
ft23                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.44$  0-1792.7@  0-1798.28  0-1798.57
 
ft31                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.49$  0-2035.5@  0-2038.13  0-2038.37
 
ft31                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.49$  0-2728.5@  0-2731.13  0-2731.37
 
ft31                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.49$  0-1793.7@  0-1796.15  0-1796.39
 
ft32                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.54$  0-2036.5@  0-2039.13  0-2039.37
 
ft32                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.54$  0-2729.5@  0-2732.13  0-2732.37
 
ft32                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.54$  0-1794.7@  0-1797.15  0-1797.39
 
ft33                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2019.59$  0-2037.5@  0-2040.13  0-2040.37
 
ft33                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1777.59$  0-1795.7@  0-1798.15  0-1798.39
 
ft33                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2713.59$  0-2730.5@  0-2733.13  0-2733.37
 
ftdp                             Public, Elemental Pure Module Function Real(8)
                                 0-279.15$  0-1401.22$  0-1535.8
 
ftdp                             Function Real(8)
                                 0-1436.19$  0-1443.5@
 
ftdpi                            Public, Elemental Pure Module Function Real(8)
                                 0-278.16$  0-1151.22$  0-1285.8
 
ftdpi                            Function Real(8)
                                 0-1186.19$  0-1193.5@
 
ftdpiq                           Function Real(8)
                                 0-1232.19$  0-1243.5@
 
ftdpiq                           Public, Elemental Pure Module Function Real(8)
                                 0-278.22$  0-1197.22$
 
ftdpix                           Public, Elemental Pure Module Function Real(8)
                                 0-278.29$  0-1247.22$
 
ftdpix                           Function Real(8)
                                 0-1281.19$  0-1286.5@
 
ftdpixg                          Public, Elemental Pure Module Function Real(8)
                                 0-278.36$  0-1290.22$  0-1145.9  0-1286.12
 
ftdpixg                          Function Real(8)
                                 0-1330.19$  0-1350.5@
 
ftdpl                            Function Real(8)
                                 0-939.19$  0-946.5@
 
ftdpl                            Public, Elemental Pure Module Function Real(8)
                                 0-277.16$  0-905.22$  0-1036.8
 
ftdplq                           Function Real(8)
                                 0-984.19$  0-995.5@
 
ftdplq                           Public, Elemental Pure Module Function Real(8)
                                 0-277.22$  0-950.22$
 
ftdplx                           Function Real(8)
                                 0-1032.19$  0-1037.5@
 
ftdplx                           Public, Elemental Pure Module Function Real(8)
                                 0-277.29$  0-999.22$
 
ftdplxg                          Function Real(8)
                                 0-1080.19$  0-1100.5@
 
ftdplxg                          Public, Elemental Pure Module Function Real(8)
                                 0-277.36$  0-1041.22$  0-899.9  0-1037.12
 
ftdpq                            Public, Elemental Pure Module Function Real(8)
                                 0-279.20$  0-1447.22$
 
ftdpq                            Function Real(8)
                                 0-1482.19$  0-1493.5@
 
ftdpx                            Public, Elemental Pure Module Function Real(8)
                                 0-279.26$  0-1497.22$
 
ftdpx                            Function Real(8)
                                 0-1531.19$  0-1536.5@
 
ftdpxg                           Function Real(8)
                                 0-1585.19$  0-1625.5@
 
ftdpxg                           Public, Elemental Pure Module Function Real(8)
                                 0-279.32$  0-1540.22$  0-1395.9  0-1536.11
 
fthe                             Public, Elemental Pure Module Function Real(8)
                                 0-280.15$  0-1684.22$
 
fthe                             Function Real(8)
                                 0-1719.19$  0-1731.7@  0-1733.7@
 
ftheq                            Function Real(8)
                                 0-1773.19$  0-1799.7@  0-1801.7@
 
ftheq                            Public, Elemental Pure Module Function Real(8)
                                 0-280.20$  0-1738.22$
 
fthex                            Function Real(8)
                                 0-1846.19$  0-1857.7@  0-1859.7@
 
fthex                            Public, Module Function Real(8)
                                 0-280.26$  0-1807.22$  0-1678.22
 
ftlcl                            Function Real(8)
                                 0-2662.19$  0-2673.5@
 
ftlcl                            Public, Elemental Pure Module Function Real(8)
                                 0-284.16$  0-2630.22$
 
ftlclo                           Public, Module Function Real(8)
                                 0-284.29$  0-2738.12$
 
ftlclo                           Function Real(8)
                                 0-2771.19$  0-2776.5@
 
ftlclq                           Function Real(8)
                                 0-2709.19$  0-2734.5@
 
ftlclq                           Public, Elemental Pure Module Function Real(8)
                                 0-284.22$  0-2677.22$
 
ftlclx                           Function Real(8)
                                 0-2823.19$  0-2842.5@
 
ftlclx                           Public, Elemental Pure Module Function Real(8)
                                 0-284.36$  0-2780.22$  0-2624.23
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2020.19$  0-2038.5@  0-2041.17  0-2041.41
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.25$  0-1969.5@  0-1971.9  0-1971.28
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1778.19$  0-1796.7@  0-1799.21  0-1799.45
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1722.25$  0-1729.7@  0-1731.12  0-1731.31
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2665.25$  0-2671.5@  0-2673.11  0-2673.30
 
ftx1                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2714.19$  0-2731.5@  0-2734.20  0-2734.44
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2020.24$  0-2039.5@  0-2041.25  0-2041.54
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.30$  0-1970.5@  0-1971.23
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2665.30$  0-2672.5@  0-2673.25
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1778.24$  0-1797.7@  0-1799.29  0-1799.58
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2714.24$  0-2732.5@  0-2734.28  0-2734.57
 
ftx2                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1722.30$  0-1730.7@  0-1731.26
 
ftx3                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2020.29$  0-2040.5@  0-2041.12  0-2041.36
 
ftx3                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1778.29$  0-1798.7@  0-1799.16  0-1799.40
 
ftx3                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2714.29$  0-2733.5@  0-2734.15  0-2734.39
 
funcphys                         Nonintrinsic Module
                                 0-2.8$
 
gfuncphys                        Public, Module Subroutine
                                 0-2846.14$  0-285.10$
 
gpkap                            Public, Module Subroutine
                                 0-2177.14$  0-282.10$  0-2889.10
 
gpvs                             Public, Module Subroutine
                                 0-654.14$  0-276.10$  0-2883.10
 
gpvsi                            Public, Module Subroutine
                                 0-469.14$  0-275.10$  0-2882.10
 
gpvsl                            Public, Module Subroutine
                                 0-288.14$  0-274.10$  0-2881.10
 
grkap                            Public, Module Subroutine
                                 0-2407.14$  0-283.10$  0-2890.10
 
gtdp                             Public, Module Subroutine
                                 0-1354.14$  0-279.10$  0-2886.10
 
gtdpi                            Public, Module Subroutine
                                 0-1104.14$  0-278.10$  0-2885.10
 
gtdpl                            Public, Module Subroutine
                                 0-859.14$  0-277.10$  0-2884.10
 
gthe                             Public, Module Subroutine
                                 0-1629.14$  0-280.10$  0-2887.10
 
gtlcl                            Public, Module Subroutine
                                 0-2578.14$  0-284.10$  0-2891.10
 
gtma                             Public, Module Subroutine
                                 0-1864.14$  0-281.10$  0-2888.10
 
heat                             Parameter, Real(8)
                                 0-1334.31$  0-1336.50  0-1344.10
 
heat                             Parameter, Real(8)
                                 0-644.31$  0-646.50
 
heat                             Parameter, Real(8)
                                 0-459.31$  0-461.50
 
heat                             Parameter, Real(8)
                                 0-1084.31$  0-1086.50  0-1094.10
 
heati                            Parameter, Real(8)
                                 0-1595.31$  0-1597.52  0-1610.12  0-1618.13
 
heati                            Parameter, Real(8)
                                 0-840.31$  0-842.52
 
heatl                            Parameter, Real(8)
                                 0-1591.31$  0-1593.52  0-1606.12  0-1617.13
 
heatl                            Parameter, Real(8)
                                 0-836.31$  0-838.52
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2153.13$  0-2157.8@
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1599.13$  0-1602.8@
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2827.13$  0-2832.8@
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1088.13$  0-1091.8@
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1338.13$  0-1341.8@
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1234.13$  0-1238.5@  0-1239.12  0-1240.16  0-1241.16  0-1242.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1962.13$  0-1967.5@  0-1969.16  0-1969.27  0-1969.38  0-1969.53  0-1970.16  0-1970.29  0-1970.40
                                 0-1970.57  0-1972.15  0-1972.26  0-1972.37  0-1972.52  0-1973.15  0-1973.28  0-1973.39  0-1973.56
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2303.13$  0-2307.5@  0-2308.12  0-2309.16  0-2310.16  0-2311.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1188.13$  0-1192.5@  0-1193.18  0-1193.26  0-1193.38  0-1193.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-941.13$  0-945.5@  0-946.18  0-946.26  0-946.38  0-946.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-497.13$  0-505.8@  0-506.15  0-508.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2486.13$  0-2490.5@  0-2491.18  0-2491.26  0-2491.38  0-2491.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2531.13$  0-2535.5@  0-2536.12  0-2537.16  0-2538.16  0-2539.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2257.13$  0-2261.5@  0-2262.18  0-2262.26  0-2262.38  0-2262.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-986.13$  0-990.5@  0-991.12  0-992.16  0-993.16  0-994.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1721.13$  0-1727.7@  0-1729.18  0-1729.29  0-1729.40  0-1729.55  0-1730.18  0-1730.31  0-1730.42
                                 0-1730.59
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1894.13$  0-1911.10@  0-1912.17  0-1915.15  0-1916.15
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2434.13$  0-2442.8@  0-2443.15  0-2445.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2204.13$  0-2212.8@  0-2213.15  0-2215.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1659.13$  0-1675.10@  0-1676.17  0-1678.15
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2605.13$  0-2621.10@  0-2622.17  0-2624.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-408.13$  0-412.5@  0-413.12  0-414.16  0-415.16  0-416.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2664.13$  0-2669.5@  0-2671.17  0-2671.28  0-2671.40  0-2671.56  0-2672.17  0-2672.30  0-2672.42
                                 0-2672.60
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2711.13$  0-2718.5@  0-2720.12  0-2722.17  0-2723.17  0-2724.17  0-2725.17  0-2726.17  0-2727.17
                                 0-2728.17  0-2729.17  0-2730.17
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1383.13$  0-1392.8@  0-1393.15  0-1396.13
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-315.13$  0-323.8@  0-324.15  0-326.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-777.13$  0-781.5@  0-782.12  0-783.15  0-784.15  0-785.15
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-592.13$  0-596.5@  0-597.12  0-598.16  0-599.16  0-600.16
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-365.13$  0-369.5@  0-370.18  0-370.26  0-370.38  0-370.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-682.13$  0-690.8@  0-691.15  0-693.13
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1133.13$  0-1142.8@  0-1143.15  0-1146.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-548.13$  0-552.5@  0-553.18  0-553.26  0-553.38  0-553.51
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2017.13$  0-2025.5@  0-2027.12  0-2029.16  0-2030.16  0-2031.16  0-2032.16  0-2033.16  0-2034.16
                                 0-2035.16  0-2036.16  0-2037.16  0-2042.15  0-2043.15  0-2044.15  0-2045.15  0-2046.15  0-2047.15
                                 0-2048.15  0-2049.15  0-2050.15
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1438.13$  0-1442.5@  0-1443.16  0-1443.24  0-1443.35  0-1443.47
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-887.13$  0-896.8@  0-897.15  0-900.14
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1775.13$  0-1783.7@  0-1785.14  0-1787.18  0-1788.18  0-1789.18  0-1790.18  0-1791.18  0-1792.18
                                 0-1793.18  0-1794.18  0-1795.18
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-733.13$  0-737.5@  0-738.16  0-738.24  0-738.35  0-738.47
 
jx                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1484.13$  0-1488.5@  0-1489.12  0-1490.15  0-1491.15  0-1492.15
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1962.16$  0-1968.5@  0-1969.19  0-1969.43  0-1969.56  0-1970.19  0-1970.45  0-1970.60  0-1971.18
                                 0-1972.18  0-1972.42  0-1972.55  0-1973.18  0-1973.44  0-1973.59  0-1974.17
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1775.16$  0-1784.7@  0-1786.14  0-1787.23  0-1788.23  0-1789.23  0-1790.21  0-1791.21  0-1792.21
                                 0-1793.23  0-1794.23  0-1795.23
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2664.16$  0-2670.5@  0-2671.20  0-2671.45  0-2671.59  0-2672.20  0-2672.47  0-2672.63  0-2673.20
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2017.16$  0-2026.5@  0-2028.12  0-2029.21  0-2030.21  0-2031.21  0-2032.19  0-2033.19  0-2034.19
                                 0-2035.21  0-2036.21  0-2037.21  0-2042.20  0-2043.20  0-2044.20  0-2045.18  0-2046.18  0-2047.18
                                 0-2048.20  0-2049.20  0-2050.20
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2711.16$  0-2719.5@  0-2721.12  0-2722.22  0-2723.22  0-2724.22  0-2725.20  0-2726.20  0-2727.20
                                 0-2728.22  0-2729.22  0-2730.22
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1721.16$  0-1728.7@  0-1729.21  0-1729.45  0-1729.58  0-1730.21  0-1730.47  0-1730.62  0-1731.21
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1894.16$  0-1907.8@  0-1908.15  0-1915.18  0-1916.18
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1659.16$  0-1672.8@  0-1673.15  0-1678.18
 
jy                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2605.16$  0-2618.8@  0-2619.15  0-2624.19
 
kind_phys                        Use associated, Private, Parameter, Integer(4)
                                 0-239.20$  0-240.7$  0-246.38
 
krealfp                          Public, Parameter, Integer(4)
                                 0-246.30$  0-246.30$  0-249.8  0-251.8  0-253.8  0-255.8  0-257.8  0-259.8  0-261.8  0-263.8
                                 0-265.8  0-267.8  0-269.8  0-271.8  0-316.10  0-318.16  0-319.16  0-363.10  0-364.10  0-366.10
                                 0-368.37  0-368.58  0-369.25  0-406.10  0-407.10  0-409.10  0-411.37  0-411.58  0-456.10  0-457.10
                                 0-458.10  0-459.10  0-460.10  0-461.10  0-462.10  0-498.10  0-500.16  0-501.16  0-546.10  0-547.10
                                 0-549.10  0-551.37  0-551.58  0-552.25  0-590.10  0-591.10  0-593.10  0-595.37  0-595.58  0-641.10
                                 0-642.10  0-643.10  0-644.10  0-645.10  0-646.10  0-647.10  0-683.10  0-685.16  0-686.16  0-731.10
                                 0-732.10  0-734.10  0-736.35  0-736.55  0-737.24  0-775.10  0-776.10  0-778.10  0-780.35  0-780.55
                                 0-831.10  0-832.10  0-833.10  0-834.10  0-835.10  0-836.10  0-837.10  0-838.10  0-839.10  0-840.10
                                 0-841.10  0-842.10  0-843.10  0-888.10  0-939.10  0-940.10  0-942.10  0-944.38  0-944.59  0-945.25
                                 0-984.10  0-985.10  0-987.10  0-989.38  0-989.59  0-1032.10  0-1033.10  0-1034.10  0-1080.10
                                 0-1081.10  0-1082.10  0-1083.10  0-1084.10  0-1085.10  0-1086.10  0-1087.10  0-1134.10  0-1186.10
                                 0-1187.10  0-1189.10  0-1191.38  0-1191.59  0-1192.25  0-1232.10  0-1233.10  0-1235.10  0-1237.38
                                 0-1237.59  0-1281.10  0-1282.10  0-1283.10  0-1330.10  0-1331.10  0-1332.10  0-1333.10  0-1334.10
                                 0-1335.10  0-1336.10  0-1337.10  0-1384.10  0-1436.10  0-1437.10  0-1439.10  0-1441.36  0-1441.56
                                 0-1442.24  0-1482.10  0-1483.10  0-1485.10  0-1487.36  0-1487.56  0-1531.10  0-1532.10  0-1533.10
                                 0-1585.10  0-1586.10  0-1587.10  0-1588.10  0-1589.10  0-1590.10  0-1591.10  0-1592.10  0-1593.10
                                 0-1594.10  0-1595.10  0-1596.10  0-1597.10  0-1598.10  0-1660.10  0-1662.22  0-1663.22  0-1664.15
                                 0-1665.15  0-1719.10  0-1720.10  0-1722.10  0-1724.39  0-1725.40  0-1727.26  0-1728.26  0-1773.10
                                 0-1774.10  0-1776.10  0-1777.10  0-1778.10  0-1780.39  0-1781.40  0-1846.10  0-1847.10  0-1848.10
                                 0-1895.10  0-1897.15  0-1898.15  0-1899.15  0-1900.15  0-1960.10  0-1961.10  0-1963.10  0-1965.35
                                 0-1965.54  0-1966.34  0-1966.53  0-1967.23  0-1968.23  0-2015.10  0-2016.10  0-2018.10  0-2019.10
                                 0-2020.10  0-2021.10  0-2023.35  0-2023.54  0-2024.34  0-2024.53  0-2095.10  0-2096.10  0-2097.10
                                 0-2149.10  0-2150.10  0-2151.10  0-2152.10  0-2205.10  0-2207.13  0-2208.18  0-2255.10  0-2256.10
                                 0-2258.10  0-2260.37  0-2260.58  0-2261.25  0-2301.10  0-2302.10  0-2304.10  0-2306.37  0-2306.58
                                 0-2350.10  0-2351.10  0-2353.10  0-2355.10  0-2358.10  0-2360.18  0-2400.10  0-2401.10  0-2403.20
                                 0-2435.10  0-2437.13  0-2438.25  0-2484.10  0-2485.10  0-2487.10  0-2489.40  0-2489.61  0-2490.25
                                 0-2529.10  0-2530.10  0-2532.10  0-2534.40  0-2534.61  0-2571.10  0-2572.10  0-2574.36  0-2606.10
                                 0-2608.15  0-2609.15  0-2610.13  0-2611.14  0-2662.10  0-2663.10  0-2665.10  0-2667.37  0-2667.58
                                 0-2668.40  0-2668.61  0-2669.25  0-2670.25  0-2709.10  0-2710.10  0-2712.10  0-2713.10  0-2714.10
                                 0-2716.37  0-2716.58  0-2717.40  0-2717.61  0-2771.10  0-2772.10  0-2773.10  0-2823.10  0-2824.10
                                 0-2825.10  0-2826.10
 
machine                          Use associated, Nonintrinsic Module
                                 0-239.7$  0-239.7  0-240.7$
 
max                              Pure Intrinsic
                                 0-551.12
 
max                              Pure Intrinsic
                                 0-780.12  0-781.12
 
max                              Pure Intrinsic
                                 0-411.12  0-412.12
 
max                              Pure Intrinsic
                                 0-2667.12  0-2668.12
 
max                              Pure Intrinsic
                                 0-595.12  0-596.12
 
max                              Pure Intrinsic
                                 0-736.12
 
max                              Pure Intrinsic
                                 0-368.12
 
max                              Pure Intrinsic
                                 0-944.12
 
max                              Pure Intrinsic
                                 0-2306.12  0-2307.12
 
max                              Pure Intrinsic
                                 0-2489.12
 
max                              Pure Intrinsic
                                 0-989.12  0-990.12
 
max                              Pure Intrinsic
                                 0-2716.12  0-2717.12  0-2718.12  0-2719.12
 
max                              Pure Intrinsic
                                 0-2023.12  0-2024.12  0-2025.12  0-2026.12
 
max                              Pure Intrinsic
                                 0-2260.12
 
max                              Pure Intrinsic
                                 0-1965.12  0-1966.12
 
max                              Pure Intrinsic
                                 0-1783.14  0-1784.14
 
max                              Pure Intrinsic
                                 0-1487.12  0-1488.12
 
max                              Pure Intrinsic
                                 0-1237.12  0-1238.12
 
max                              Pure Intrinsic
                                 0-1191.12
 
max                              Pure Intrinsic
                                 0-1441.12
 
max                              Pure Intrinsic
                                 0-2534.12  0-2535.12
 
max                              Pure Intrinsic
                                 0-2842.12
 
min                              Pure Intrinsic
                                 0-2023.8  0-2024.8  0-2025.8  0-2026.8
 
min                              Pure Intrinsic
                                 0-1965.8  0-1966.8  0-1967.8  0-1968.8
 
min                              Pure Intrinsic
                                 0-1237.8  0-1238.8
 
min                              Pure Intrinsic
                                 0-2489.8  0-2490.8
 
min                              Pure Intrinsic
                                 0-1191.8  0-1192.8
 
min                              Pure Intrinsic
                                 0-1780.8  0-1781.8  0-1783.10  0-1784.10
 
min                              Pure Intrinsic
                                 0-368.8  0-369.8
 
min                              Pure Intrinsic
                                 0-595.8  0-596.8
 
min                              Pure Intrinsic
                                 0-2260.8  0-2261.8
 
min                              Pure Intrinsic
                                 0-2306.8  0-2307.8
 
min                              Pure Intrinsic
                                 0-1441.8  0-1442.8
 
min                              Pure Intrinsic
                                 0-989.8  0-990.8
 
min                              Pure Intrinsic
                                 0-2667.8  0-2668.8  0-2669.8  0-2670.8
 
min                              Pure Intrinsic
                                 0-1724.8  0-1725.8  0-1727.10  0-1728.10
 
min                              Pure Intrinsic
                                 0-1487.8  0-1488.8
 
min                              Pure Intrinsic
                                 0-551.8  0-552.8
 
min                              Pure Intrinsic
                                 0-736.8  0-737.8
 
min                              Pure Intrinsic
                                 0-944.8  0-945.8
 
min                              Pure Intrinsic
                                 0-780.8  0-781.8
 
min                              Pure Intrinsic
                                 0-2534.8  0-2535.8
 
min                              Pure Intrinsic
                                 0-411.8  0-412.8
 
min                              Pure Intrinsic
                                 0-2716.8  0-2717.8  0-2718.8  0-2719.8
 
n                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2357.13$  0-2362.8@  0-2363.27  0-2366.8@  0-2367.27
 
ndpk                             Parameter, Integer(4)
                                 0-2352.32$  0-2355.28&  0-2365.15  0-2366.10
 
nint                             Pure Intrinsic
                                 0-2307.16
 
nint                             Pure Intrinsic
                                 0-2025.16  0-2026.16
 
nint                             Pure Intrinsic
                                 0-412.16
 
nint                             Pure Intrinsic
                                 0-2718.16  0-2719.16
 
nint                             Pure Intrinsic
                                 0-781.16
 
nint                             Pure Intrinsic
                                 0-596.16
 
nint                             Pure Intrinsic
                                 0-990.16
 
nint                             Pure Intrinsic
                                 0-1238.16
 
nint                             Pure Intrinsic
                                 0-2535.16
 
nint                             Pure Intrinsic
                                 0-1783.18  0-1784.18
 
nint                             Pure Intrinsic
                                 0-1488.16
 
nnpk                             Parameter, Integer(4)
                                 0-2352.25$  0-2353.28&  0-2361.15  0-2362.10
 
nxma                             Private, Parameter, Integer(4)
                                 0-264.23$  0-265.47  0-265.64  0-1901.23  0-1911.15  0-1965.49  0-1967.15  0-2023.49  0-2025.28
 
nxpkap                           Private, Parameter, Integer(4)
                                 0-266.23$  0-267.40  0-2209.23  0-2212.13  0-2260.51  0-2261.15  0-2306.51  0-2307.28
 
nxpvs                            Private, Parameter, Integer(4)
                                 0-254.23$  0-255.37  0-687.23  0-690.13  0-736.49  0-737.15  0-780.49  0-781.28
 
nxpvsi                           Private, Parameter, Integer(4)
                                 0-252.23$  0-253.40  0-502.23  0-505.13  0-551.51  0-552.15  0-595.51  0-596.28
 
nxpvsl                           Private, Parameter, Integer(4)
                                 0-250.23$  0-251.40  0-320.23  0-323.13  0-368.51  0-369.15  0-411.51  0-412.28
 
nxrkap                           Private, Parameter, Integer(4)
                                 0-268.23$  0-269.40  0-2439.23  0-2442.13  0-2489.54  0-2490.15  0-2534.54  0-2535.28
 
nxtdp                            Private, Parameter, Integer(4)
                                 0-260.23$  0-261.37  0-1388.23  0-1392.13  0-1441.50  0-1442.15  0-1487.50  0-1488.28
 
nxtdpi                           Private, Parameter, Integer(4)
                                 0-258.23$  0-259.40  0-1138.23  0-1142.13  0-1191.52  0-1192.15  0-1237.52  0-1238.28
 
nxtdpl                           Private, Parameter, Integer(4)
                                 0-256.23$  0-257.40  0-892.23  0-896.13  0-944.52  0-945.15  0-989.52  0-990.28
 
nxthe                            Private, Parameter, Integer(4)
                                 0-262.23$  0-263.51  0-1666.23  0-1675.15  0-1724.33  0-1727.17  0-1780.33  0-1783.30
 
nxtlcl                           Private, Parameter, Integer(4)
                                 0-270.23$  0-271.56  0-2612.23  0-2621.15  0-2667.51  0-2669.15  0-2716.51  0-2718.28
 
nyma                             Private, Parameter, Integer(4)
                                 0-264.32$  0-265.52  0-265.69  0-1904.23  0-1907.13  0-1966.48  0-1968.15  0-2024.48  0-2026.28
 
nythe                            Private, Parameter, Integer(4)
                                 0-262.33$  0-263.57  0-1669.23  0-1672.13  0-1725.34  0-1728.17  0-1781.34  0-1784.30
 
nytlcl                           Private, Parameter, Integer(4)
                                 0-270.34$  0-271.63  0-2615.23  0-2618.13  0-2668.54  0-2670.15  0-2717.54  0-2719.28
 
p                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2205.36$  0-2214.7@  0-2215.25
 
p                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.19$  0-1850.5@  0-1853.8
 
p                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2435.36$  0-2444.7@  0-2445.25
 
p                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2401.32$  0-2373.29  0-2403.13
 
p                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.21$  0-2156.5@  0-2160.10  0-2164.47  0-2172.8
 
p                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2256.32$  0-2220.28  0-2260.32
 
p                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2302.32$  0-2266.29  0-2306.32
 
p                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2351.32$  0-2316.19  0-2360.10
 
pd                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.29$  0-2160.7@  0-2162.36  0-2163.14  0-2164.59  0-2172.5@  0-2173.21
 
pd                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.27$  0-1853.5@  0-1854.8  0-1856.36  0-1857.15
 
physcons                         Use associated, Nonintrinsic Module
                                 0-240.7$  0-240.7
 
pk                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.53$  0-1674.7@  0-1678.30
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2095.36$  0-2058.34  0-2099.19  0-2100.24
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2149.39$  0-2104.38  0-2156.7
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1774.34$  0-1738.30  0-1781.26
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2015.36$  0-1978.34  0-2024.28
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1847.34$  0-1807.30  0-1850.7
 
pk                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.53$  0-1909.7@  0-1914.28
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1960.36$  0-1923.33  0-1966.28
 
pk                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1720.34$  0-1684.29  0-1725.26
 
pkap                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2485.32$  0-2450.28  0-2489.32
 
pkap                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2572.32$  0-2544.29  0-2574.12
 
pkap                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2530.32$  0-2495.29  0-2534.32
 
pkpa                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2358.19$  0-2360.5@  0-2363.12  0-2367.12
 
psatb                            Private, Parameter, Real(8)
                                 0-249.29$  0-1852.8  0-2159.10  0-2171.8
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1437.32$  0-1401.27  0-1441.30
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1233.32$  0-1197.29  0-1237.32
 
pv                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.38$  0-1144.7@  0-1145.19
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1331.35$  0-1290.33  0-1346.17
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1187.32$  0-1151.28  0-1191.32
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1033.32$  0-999.29  0-1036.14  0-1037.23
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-940.32$  0-905.28  0-944.32
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1532.32$  0-1497.28  0-1535.13  0-1536.21
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1282.32$  0-1247.29  0-1285.14  0-1286.23
 
pv                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.38$  0-898.7@  0-899.19
 
pv                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.26$  0-2159.7@  0-2160.12  0-2162.23  0-2171.5@  0-2172.10  0-2173.17  0-2173.32
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1483.32$  0-1447.28  0-1487.30
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1081.35$  0-1041.33  0-1096.17
 
pv                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.38$  0-1394.7@  0-1395.18
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-985.32$  0-950.29  0-989.32
 
pv                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1586.35$  0-1540.32  0-1621.17
 
pv                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.24$  0-1852.5@  0-1853.10  0-1854.14  0-1856.23
 
pvdew                            Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.22$  0-2830.5@  0-2838.19
 
pvi                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-843.28$  0-853.7@  0-854.26
 
pvl                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-843.24$  0-852.7@  0-854.15
 
pvlcl                            Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.36$  0-2835.7@  0-2837.51  0-2838.13
 
pvt                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.24$  0-1343.7@  0-1345.15  0-1346.13
 
pvt                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.24$  0-1093.7@  0-1095.15  0-1096.13
 
pvt                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.36$  0-1605.9@  0-1607.17  0-1609.9@  0-1611.17  0-1616.9@  0-1621.13
 
pvti                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.31$  0-1615.9@  0-1616.27  0-1619.37
 
pvtl                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.26$  0-1614.9@  0-1616.15  0-1619.21
 
q                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.62$  0-1914.33  0-1916.22
 
q11                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.19$  0-2042.5@  0-2051.16  0-2051.37
 
q12                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.23$  0-2043.5@  0-2052.16  0-2052.37
 
q13                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.27$  0-2044.5@  0-2053.16  0-2053.37
 
q21                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.31$  0-2045.5@  0-2051.23  0-2051.49
 
q22                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.35$  0-2046.5@  0-2052.23  0-2052.49
 
q23                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.39$  0-2047.5@  0-2053.23  0-2053.49
 
q31                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.43$  0-2048.5@  0-2051.12  0-2051.33
 
q32                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.47$  0-2049.5@  0-2052.12  0-2052.33
 
q33                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.51$  0-2050.5@  0-2053.12  0-2053.33
 
qg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2097.22$  0-2099.25
 
qma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-1961.37$  0-1923.40  0-1974.5@
 
qma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2150.37$  0-2104.45  0-2173.5@
 
qma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2016.37$  0-1978.41  0-2054.5@
 
qma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2096.37$  0-2058.41  0-2100.31
 
qx1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.35$  0-1972.5@  0-1974.9  0-1974.26
 
qx1                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.55$  0-2051.5@  0-2054.16  0-2054.37
 
qx2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.59$  0-2052.5@  0-2054.23  0-2054.49
 
qx2                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.39$  0-1973.5@  0-1974.22
 
qx3                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2021.63$  0-2053.5@  0-2054.12  0-2054.33
 
real                             Pure Intrinsic
                                 0-2716.46  0-2717.49
 
real                             Pure Intrinsic
                                 0-1487.45
 
real                             Pure Intrinsic
                                 0-1237.47
 
real                             Pure Intrinsic
                                 0-1441.45
 
real                             Pure Intrinsic
                                 0-989.47
 
real                             Pure Intrinsic
                                 0-2260.46
 
real                             Pure Intrinsic
                                 0-944.47
 
real                             Pure Intrinsic
                                 0-2306.46
 
real                             Pure Intrinsic
                                 0-1780.28  0-1781.29
 
real                             Pure Intrinsic
                                 0-2667.46  0-2668.49
 
real                             Pure Intrinsic
                                 0-1965.44  0-1966.43
 
real                             Pure Intrinsic
                                 0-780.44
 
real                             Pure Intrinsic
                                 0-1724.28  0-1725.29
 
real                             Pure Intrinsic
                                 0-2489.49
 
real                             Pure Intrinsic
                                 0-2023.44  0-2024.43
 
real                             Pure Intrinsic
                                 0-1191.47
 
real                             Pure Intrinsic
                                 0-2534.49
 
real                             Pure Intrinsic
                                 0-736.44
 
real                             Pure Intrinsic
                                 0-551.46
 
real                             Pure Intrinsic
                                 0-368.46
 
real                             Pure Intrinsic
                                 0-411.46
 
real                             Pure Intrinsic
                                 0-595.46
 
stma                             Public, Elemental Pure Module Subroutine
                                 0-1923.24$  0-281.15$  0-2099.10
 
stmaq                            Public, Elemental Pure Module Subroutine
                                 0-1978.24$  0-281.20$
 
stmax                            Public, Elemental Pure Module Subroutine
                                 0-2058.24$  0-281.26$
 
stmaxg                           Public, Elemental Pure Module Subroutine
                                 0-2104.24$  0-281.32$  0-1914.14  0-2100.10
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-732.32$  0-698.27  0-736.30
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-547.32$  0-513.28  0-551.32
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.19$  0-2155.5@  0-2158.18  0-2161.29  0-2162.34  0-2163.12  0-2164.18  0-2164.39  0-2164.57
                                 0-2166.7@  0-2166.9  0-2169.9  0-2170.16
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.34$  0-1391.5@  0-1395.7@  0-1395.16  0-1396.17
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-498.36$  0-507.7@  0-508.25
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-776.32$  0-742.28  0-780.30
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.34$  0-895.5@  0-899.7@  0-899.17  0-900.18
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-591.32$  0-557.29  0-595.32
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-683.36$  0-692.7@  0-693.23
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.19$  0-1340.5@  0-1342.18  0-1344.21  0-1345.27  0-1347.7@  0-1347.9  0-1350.13
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-642.32$  0-605.29  0-649.16
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.60$  0-1914.31  0-1915.22  0-1917.12
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-832.32$  0-790.28  0-845.16  0-846.8  0-848.12  0-851.10
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.19$  0-1090.5@  0-1092.18  0-1094.21  0-1095.27  0-1097.7@  0-1097.9  0-1100.13
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1847.32$  0-1807.28  0-1851.16  0-1855.29  0-1856.34  0-1857.13
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2772.32$  0-2738.19  0-2776.12  0-2776.32  0-2776.52
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-457.32$  0-421.29  0-464.16
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-364.32$  0-331.28  0-368.32
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1774.32$  0-1738.28  0-1780.26
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2663.32$  0-2630.28  0-2667.32
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-316.36$  0-325.7@  0-326.25
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.34$  0-1141.5@  0-1145.7@  0-1145.17  0-1146.18
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-407.32$  0-374.29  0-411.32
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2824.32$  0-2780.29  0-2829.17  0-2831.10  0-2834.10  0-2837.26
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.19$  0-1601.5@  0-1603.18  0-1604.10  0-1606.25  0-1607.29  0-1608.14  0-1610.25  0-1611.29
                                 0-1613.12  0-1617.26  0-1618.26  0-1619.51  0-1622.7@  0-1622.9  0-1625.12
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2710.32$  0-2677.29  0-2716.32
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.56$  0-1677.9@  0-1678.28
 
t                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.58$  0-2623.9@  0-2624.30
 
t                                Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1720.32$  0-1684.27  0-1724.26
 
ta                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.33$  0-2834.7@  0-2835.61
 
tbpkap                           Private, Static, Real(8) (1:11001), Offset: 0, Alignment: double word
                                 0-267.33$  0-2215.7@  0-2262.11  0-2262.31  0-2262.44  0-2309.9  0-2310.9  0-2311.9
 
tbpvs                            Private, Static, Real(8) (1:7501), Offset: 0, Alignment: double word
                                 0-255.31$  0-693.7@  0-738.10  0-738.29  0-738.41  0-783.9  0-784.9  0-785.9
 
tbpvsi                           Private, Static, Real(8) (1:7501), Offset: 0, Alignment: double word
                                 0-253.33$  0-508.7@  0-553.11  0-553.31  0-553.44  0-598.9  0-599.9  0-600.9
 
tbpvsl                           Private, Static, Real(8) (1:7501), Offset: 0, Alignment: double word
                                 0-251.33$  0-326.7@  0-370.11  0-370.31  0-370.44  0-414.9  0-415.9  0-416.9
 
tbqma                            Private, Static, Real(8) (1:151, 1:121), Offset: 0, Alignment: double word
                                 0-265.58$  0-1916.9@  0-1972.9  0-1972.31  0-1972.46  0-1973.9  0-1973.33  0-1973.50  0-2042.9
                                 0-2043.9  0-2044.9  0-2045.9  0-2046.9  0-2047.9  0-2048.9  0-2049.9  0-2050.9
 
tbrkap                           Private, Static, Real(8) (1:11001), Offset: 0, Alignment: double word
                                 0-269.33$  0-2445.7@  0-2491.11  0-2491.31  0-2491.44  0-2537.9  0-2538.9  0-2539.9
 
tbtdp                            Private, Static, Real(8) (1:5001), Offset: 0, Alignment: double word
                                 0-261.31$  0-1396.7@  0-1443.10  0-1443.29  0-1443.41  0-1490.9  0-1491.9  0-1492.9
 
tbtdpi                           Private, Static, Real(8) (1:5001), Offset: 0, Alignment: double word
                                 0-259.33$  0-1146.7@  0-1193.11  0-1193.31  0-1193.44  0-1240.9  0-1241.9  0-1242.9
 
tbtdpl                           Private, Static, Real(8) (1:5001), Offset: 0, Alignment: double word
                                 0-257.33$  0-900.7@  0-946.11  0-946.31  0-946.44  0-992.9  0-993.9  0-994.9
 
tbthe                            Private, Static, Real(8) (1:241, 1:151), Offset: 0, Alignment: double word
                                 0-263.45$  0-1678.9@  0-1729.12  0-1729.34  0-1729.49  0-1730.12  0-1730.36  0-1730.53  0-1787.12
                                 0-1788.12  0-1789.12  0-1790.12  0-1791.12  0-1792.12  0-1793.12  0-1794.12  0-1795.12
 
tbtlcl                           Private, Static, Real(8) (1:151, 1:61), Offset: 0, Alignment: double word
                                 0-271.49$  0-2624.9@  0-2671.10  0-2671.33  0-2671.49  0-2672.10  0-2672.35  0-2672.53  0-2722.10
                                 0-2723.10  0-2724.10  0-2725.10  0-2726.10  0-2727.10  0-2728.10  0-2729.10  0-2730.10
 
tbtma                            Private, Static, Real(8) (1:151, 1:121), Offset: 0, Alignment: double word
                                 0-265.41$  0-1915.9@  0-1969.10  0-1969.32  0-1969.47  0-1970.10  0-1970.34  0-1970.51  0-2029.10
                                 0-2030.10  0-2031.10  0-2032.10  0-2033.10  0-2034.10  0-2035.10  0-2036.10  0-2037.10
 
tdpd                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2663.34$  0-2630.30  0-2668.32
 
tdpd                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2824.34$  0-2780.31  0-2829.19  0-2831.12
 
tdpd                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2772.34$  0-2738.21  0-2776.14  0-2776.34
 
tdpd                             Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2710.34$  0-2677.31  0-2717.32
 
tdpd                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.53$  0-2620.7@  0-2624.32
 
terr                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.36$  0-1096.7@  0-1097.11  0-1098.14
 
terr                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.36$  0-1346.7@  0-1347.11  0-1348.14
 
terr                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.56$  0-1621.7@  0-1622.11  0-1623.14
 
terr                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.51$  0-2165.7@  0-2166.11  0-2167.14
 
terr                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.52$  0-2838.7@  0-2839.17  0-2840.14
 
terrm                            Parameter, Real(8)
                                 0-1332.31$  0-1348.23
 
terrm                            Parameter, Real(8)
                                 0-1082.31$  0-1098.23
 
terrm                            Parameter, Real(8)
                                 0-2151.31$  0-2167.23
 
terrm                            Parameter, Real(8)
                                 0-1587.31$  0-1623.23
 
terrm                            Parameter, Real(8)
                                 0-2825.31$  0-2840.23
 
terrp                            Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.57$
 
tg                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1586.32$  0-1540.29  0-1601.7
 
tg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.64$  0-1910.7@  0-1914.21  0-1917.9@
 
tg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1283.19$  0-1285.5@  0-1286.20
 
tg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1533.19$  0-1535.5@  0-1536.18
 
tg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1034.19$  0-1036.5@  0-1037.20
 
tg                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2097.19$  0-2099.22  0-2100.17
 
tg                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1081.32$  0-1041.30  0-1090.7
 
tg                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2149.32$  0-2104.31  0-2155.7
 
tg                               Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1331.32$  0-1290.30  0-1340.7
 
the                              Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.56$  0-1913.9@  0-1914.24
 
the                              Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-1960.32$  0-1923.29  0-1965.28
 
the                              Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2015.32$  0-1978.30  0-2023.28
 
the                              Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2149.35$  0-2104.34  0-2165.18
 
the                              Reference argument, Intent (IN), Real(8), Offset: 0, Alignment: double word
                                 0-2095.32$  0-2058.30  0-2099.15  0-2100.20
 
thet                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.40$  0-2163.7@  0-2164.13  0-2165.13
 
tice                             Parameter, Real(8)
                                 0-1589.31$  0-1608.19  0-1613.14  0-1613.26
 
tice                             Parameter, Real(8)
                                 0-834.31$  0-848.17  0-851.12  0-851.24
 
tlcl                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.28$  0-2831.5@  0-2833.18  0-2834.12  0-2836.29  0-2837.44  0-2839.7@  0-2839.12  0-2840.32
                                 0-2842.16
 
tliq                             Parameter, Real(8)
                                 0-833.31$  0-846.13  0-851.19
 
tliq                             Parameter, Real(8)
                                 0-1588.31$  0-1604.15  0-1613.21
 
tlmin                            Parameter, Real(8)
                                 0-2825.43$  0-2825.61  0-2842.21
 
tlminx                           Parameter, Real(8)
                                 0-2825.54$  0-2840.40
 
tma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-1961.33$  0-1923.36  0-1971.5@
 
tma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2016.33$  0-1978.37  0-2041.5@
 
tma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2096.33$  0-2058.37  0-2100.27
 
tma                              Reference argument, Intent (OUT), Real(8), Offset: 0, Alignment: double word
                                 0-2150.33$  0-2104.41  0-2169.5@
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-843.19$  0-845.5@  0-847.23  0-847.50  0-849.23  0-849.50  0-852.21  0-852.48  0-853.21  0-853.48
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1337.21$  0-1342.7@  0-1343.21  0-1343.46
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.21$  0-1603.7@  0-1605.23  0-1605.50  0-1609.23  0-1609.50  0-1614.24  0-1614.51  0-1615.24
                                 0-1615.51
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-647.19$  0-649.5@  0-650.22  0-650.47
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2826.19$  0-2829.5@  0-2830.21  0-2830.54  0-2833.7@  0-2835.23  0-2835.56
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1848.21$  0-1851.5@  0-1852.15  0-1852.48
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-462.19$  0-464.5@  0-465.22  0-465.47
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2152.23$  0-2158.7@  0-2159.17  0-2159.50  0-2170.5@  0-2171.15  0-2171.48
 
tr                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1087.21$  0-1092.7@  0-1093.21  0-1093.46
 
w                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1598.24$  0-1613.9@  0-1616.13  0-1616.24  0-1619.15  0-1619.30
 
w                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-843.22$  0-851.7@  0-854.13  0-854.23
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.36$  0-897.7@  0-898.10
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-316.34$  0-324.7@  0-325.9
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.49$  0-1912.9@  0-1913.13
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.36$  0-1143.7@  0-1144.10
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.49$  0-2622.9@  0-2623.11
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.49$  0-1676.9@  0-1677.11
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2205.34$  0-2213.7@  0-2214.9
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2435.34$  0-2443.7@  0-2444.9
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-683.34$  0-691.7@  0-692.9
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.36$  0-1393.7@  0-1394.10
 
x                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-498.34$  0-506.7@  0-507.9
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2435.29$  0-2439.5@  0-2440.21  0-2441.16  0-2443.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-316.29$  0-320.5@  0-321.21  0-322.16  0-324.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.39$  0-2612.5@  0-2613.21  0-2614.16  0-2622.23
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.39$  0-1666.5@  0-1667.20  0-1668.15  0-1676.23
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-498.29$  0-502.5@  0-503.21  0-504.16  0-506.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.29$  0-1138.5@  0-1139.21  0-1140.16  0-1143.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-683.29$  0-687.5@  0-688.20  0-689.15  0-691.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.29$  0-892.5@  0-893.21  0-894.16  0-897.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2205.29$  0-2209.5@  0-2210.21  0-2211.16  0-2213.21
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.39$  0-1901.5@  0-1902.19  0-1903.14  0-1912.23
 
xinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.29$  0-1388.5@  0-1389.20  0-1390.15  0-1393.21
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.19$  0-1965.5@  0-1967.12  0-1969.24  0-1970.26  0-1972.23  0-1973.25
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-734.19$  0-736.5@  0-737.12  0-738.21
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2665.19$  0-2667.5@  0-2669.12  0-2671.25  0-2672.27
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-778.19$  0-780.5@  0-781.21  0-782.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2304.19$  0-2306.5@  0-2307.21  0-2308.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2258.19$  0-2260.5@  0-2261.12  0-2262.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1722.19$  0-1724.5@  0-1726.8  0-1727.14  0-1729.26  0-1730.28
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-409.19$  0-411.5@  0-412.21  0-413.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1776.19$  0-1780.5@  0-1782.8  0-1783.23  0-1785.11
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1485.19$  0-1487.5@  0-1488.21  0-1489.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-549.19$  0-551.5@  0-552.12  0-553.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-987.19$  0-989.5@  0-990.21  0-991.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-366.19$  0-368.5@  0-369.12  0-370.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2532.19$  0-2534.5@  0-2535.21  0-2536.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1439.19$  0-1441.5@  0-1442.12  0-1443.21
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1235.19$  0-1237.5@  0-1238.21  0-1239.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2018.19$  0-2023.5@  0-2025.21  0-2027.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1189.19$  0-1191.5@  0-1192.12  0-1193.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-942.19$  0-944.5@  0-945.12  0-946.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2487.19$  0-2489.5@  0-2490.12  0-2491.23
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2712.19$  0-2716.5@  0-2718.21  0-2720.9
 
xj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-593.19$  0-595.5@  0-596.21  0-597.9
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.24$  0-1898.5@  0-1901.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.24$  0-1387.5@  0-1388.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.24$  0-1663.5@  0-1666.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2435.24$  0-2438.5@  0-2439.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2205.24$  0-2208.5@  0-2209.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-683.24$  0-686.5@  0-687.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.24$  0-891.5@  0-892.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.24$  0-2609.5@  0-2612.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-498.24$  0-501.5@  0-502.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.24$  0-1137.5@  0-1138.11
 
xmax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-316.24$  0-319.5@  0-320.11
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-888.19$  0-890.5@  0-892.16  0-893.16  0-897.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1384.19$  0-1386.5@  0-1388.16  0-1389.15  0-1393.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-498.19$  0-500.5@  0-502.16  0-503.16  0-506.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.19$  0-2608.5@  0-2612.16  0-2613.16  0-2622.11
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-683.19$  0-685.5@  0-687.16  0-688.15  0-691.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.19$  0-1897.5@  0-1901.16  0-1902.14  0-1910.10  0-1912.11
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2205.19$  0-2207.5@  0-2209.16  0-2210.16  0-2213.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2435.19$  0-2437.5@  0-2439.16  0-2440.16  0-2443.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1134.19$  0-1136.5@  0-1138.16  0-1139.16  0-1143.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-316.19$  0-318.5@  0-320.16  0-321.16  0-324.9
 
xmin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.19$  0-1662.5@  0-1666.16  0-1667.15  0-1676.11
 
xpona                            Parameter, Real(8)
                                 0-645.31$  0-650.26
 
xpona                            Parameter, Real(8)
                                 0-1335.31$  0-1343.25
 
xpona                            Parameter, Real(8)
                                 0-460.31$  0-465.26
 
xpona                            Parameter, Real(8)
                                 0-1085.31$  0-1093.25
 
xponai                           Parameter, Real(8)
                                 0-841.31$  0-849.27  0-853.25
 
xponai                           Parameter, Real(8)
                                 0-1596.31$  0-1609.27  0-1615.28
 
xponal                           Parameter, Real(8)
                                 0-837.31$  0-847.27  0-852.25
 
xponal                           Parameter, Real(8)
                                 0-1592.31$  0-1605.27  0-1614.28
 
xponb                            Parameter, Real(8)
                                 0-1336.31$  0-1343.36
 
xponb                            Parameter, Real(8)
                                 0-646.31$  0-650.37
 
xponb                            Parameter, Real(8)
                                 0-1086.31$  0-1093.36
 
xponb                            Parameter, Real(8)
                                 0-461.31$  0-465.37
 
xponbi                           Parameter, Real(8)
                                 0-842.31$  0-849.39  0-853.37
 
xponbi                           Parameter, Real(8)
                                 0-1597.31$  0-1609.39  0-1615.40
 
xponbl                           Parameter, Real(8)
                                 0-1593.31$  0-1605.39  0-1614.40
 
xponbl                           Parameter, Real(8)
                                 0-838.31$  0-847.39  0-852.37
 
y                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.51$  0-2619.7@  0-2620.12
 
y                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.51$  0-1673.7@  0-1674.10
 
y                                Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.51$  0-1908.7@  0-1909.10  0-1910.15
 
yinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.44$  0-2615.5@  0-2616.21  0-2617.16  0-2619.21
 
yinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.44$  0-1669.5@  0-1670.20  0-1671.15  0-1673.21
 
yinc                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.44$  0-1904.5@  0-1905.19  0-1906.14  0-1908.21
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1722.22$  0-1725.5@  0-1726.21  0-1728.14  0-1731.18
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2018.22$  0-2024.5@  0-2026.21  0-2028.9
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1963.22$  0-1966.5@  0-1968.12  0-1971.15  0-1974.14
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1776.22$  0-1781.5@  0-1782.21  0-1784.23  0-1786.11
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2665.22$  0-2668.5@  0-2670.12  0-2673.17
 
yj                               Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2712.22$  0-2717.5@  0-2719.21  0-2721.9
 
ymax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.34$  0-2611.5@  0-2615.11
 
ymax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.34$  0-1665.5@  0-1669.11
 
ymax                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.34$  0-1900.5@  0-1904.11
 
ymin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-2606.29$  0-2610.5@  0-2615.16  0-2616.16  0-2619.9
 
ymin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1895.29$  0-1899.5@  0-1904.16  0-1905.14  0-1908.9
 
ymin                             Automatic, Real(8), Offset: 0, Alignment: double word
                                 0-1660.29$  0-1664.5@  0-1669.16  0-1670.15  0-1673.9
 
** funcphys   === End of Compilation 1 ===
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    ../lsms/noah.20071219/funcphys.F
                                      03/09/11   11:03:54
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................    2896
1501-510  Compilation successful for file funcphys.F.
1501-543  Object file created.
