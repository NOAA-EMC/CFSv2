subroutine lis_open_file_dbg(unit, file, form, status, access, recl)!, script, time_offset)

   implicit none

!INPUT PARAMETERS:
   integer,          intent(in) :: unit
   character(len=40), intent(in) :: file
   character(len=11), intent(in)   :: form
   character(len=3), intent(in)   :: status
   character(len=6), intent(in)   :: access
   integer,          intent(in)   :: recl
!   character(len=*), optional   :: script
!   character(len=*), optional   :: time_offset

!LOCAL VARIABLES:
   integer                      :: ios
   character(len=11)            :: form_use
   character(len=7)             :: status_use
   character(len=10)            :: access_use
   character(len=15)            :: script_use
   character(len=4)             :: cunit
!EOP
!<debug print>
print*,'DBG: lis_open_file_dbg -- unit ',unit
print*,'DBG: lis_open_file_dbg -- file "',file,'"'
print*,'DBG: lis_open_file_dbg -- form "',form,'"'
print*,'DBG: lis_open_file_dbg -- status "',status,'"'
print*,'DBG: lis_open_file_dbg -- access "',access,'"'
print*,'DBG: lis_open_file_dbg -- recl ',recl
!</debug print>
form_use = trim(adjustl(form))
status_use = trim(adjustl(status))
access_use = trim(adjustl(access))
   ! If optional values are not assigned by caller, then set default values.
#if 0
   if ( .not. PRESENT(form) ) then
      form_use ='unformatted'
   elseif ( trim(adjustl(form)) == 'unformatted' .or. &
            trim(adjustl(form)) == 'formatted'          ) then
      form_use = trim(adjustl(form))
   endif

   if ( .not. PRESENT(status) ) then
      status_use = 'old'
   elseif ( trim(adjustl(status)) == 'old'     .or. &
            trim(adjustl(status)) == 'new'     .or. &
            trim(adjustl(status)) == 'replace' .or. &
            trim(adjustl(status)) == 'unknown'        ) then
      status_use = trim(adjustl(status))
   endif
   if ( .not. PRESENT(access) ) then
!      if(lis%d%domain.eq.8) then 
      if(lis%d%gridDesc(9) .eq. 0.01) then 
         access_use = 'direct'
      else
         access_use = 'sequential'
      endif
   elseif ( trim(adjustl(access)) == 'sequential' .or. &
            trim(adjustl(access)) == 'direct'            ) then
      access_use = trim(adjustl(access))
   endif
#endif
!   if ( .not. PRESENT(recl) ) then
!      recl = 4
!   endif
#if 0
   if ( .not. PRESENT(script) ) then
      script_use = 'none'
   else
      script_use = trim(adjustl(script))
   endif

   ! If script exists, retrieve data through GrADS-DODS server
   ! (if necessary)
   if ( use_opendap_server ) then
      if ( script_use /= 'none' ) then
         if(.not.PRESENT(time_offset)) then 
         call retrieve_data(file, script_use)
         else
            call retrieve_data(file, script_use, time_offset)
         endif
      endif
   endif
#endif
   ! Open the file
   call lis_log_msg('MSG: lis_open_file -- Opening '//trim(file))
   if ( access_use == 'sequential' ) then
      open(unit=unit, file=file, form=form_use, status=status_use, &
           access=access_use, IOSTAT=ios)
   else
!<debug print>
print*,'DBG: lis_open_file_dbg -- unit ',unit
print*,'DBG: lis_open_file_dbg -- file "',file,'"'
print*,'DBG: lis_open_file_dbg -- form_use "',form_use,'"'
print*,'DBG: lis_open_file_dbg -- status_use "',status_use,'"'
print*,'DBG: lis_open_file_dbg -- access_use "',access_use,'"'
print*,'DBG: lis_open_file_dbg -- recl ',recl
!</debug print>
      open(unit=unit, file=trim(file), form=trim(form_use), status=trim(status_use), &
           access=trim(access_use), recl=recl, IOSTAT=ios)
   endif

   ! Check the status of the open call
   write(cunit,'(i4)') unit
   if ( ios /= 0 ) then
      call lis_log_msg('ERR: lis_open_file -- Cannot open file '&
                       //trim(file)//' on unit '//adjustl(cunit))
      call endrun
   else
      call lis_log_msg('MSG: lis_open_file -- Successfully opened '&
                       //trim(file)//' on unit '//adjustl(cunit))
   endif
 
   return

end subroutine lis_open_file_dbg
