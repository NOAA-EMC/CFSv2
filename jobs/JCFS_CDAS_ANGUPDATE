#!/bin/ksh
set -xa
#
# Specify whether the run is production or development
#
export RUN_ENVIR=${RUN_ENVIR:-nco}

#####################################################################################
# Run config file to get input parameters
# This config file should define the following variables
# DATA_IN: Location of working directory, default to /tmpnwprd1
# DEV_ECF: If the job is to be running using ECF, default to YES
# SENDDBN: Set to NO for developers, default to YES
# COMIN:   Directory for input files, default to $COMROOT/$NET/${envir}
# COMOUT:  Directory for output file, default to $COMROOT/$NET/${envir}
# gespath: Directory for the guess or restart files, default to /nwges/${envir}
#####################################################################################

###############################################################
# This block can be modified for different test environment
###############################################################
if [[ $RUN_ENVIR = nco && $envir != prod ]]; then
  export SENDDBN=${SENDDBN:-NO}
fi

#
####################################
# Specify NET and RUN Name and model
####################################
export NET=cfs
export RUN=cdas1

####################################
# set up job name and  environment
####################################
export job=${job:-$RUN}
export envir=${envir:-prod}
export host=${host:-`hostname | cut -c1`}

###############################################

date
export PS4='$SECONDS + '
date

# #### 04/27/2010 #############################
# SETUP CDAS ANALYSIS PROCESSING VARIABLES
# #############################################

####################################
# obtain unique process id (pid) and make temp directory
####################################
export pid=${pid:-$$}
export DATA=$DATAROOT/${job}.${pid}
mkdir -p $DATA
cd $DATA

####################################
# Determine Job Output Name on System
####################################
export cyc=${cyc:-00}
export outid="LL$job"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile
export cycle=t${cyc}z

####################################
# SENDECF  - Flag Events on ECF
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# RERUN    - Rerun fcst from beginning (default no)
# VERBOSE  - Specify Verbose Output in exglobal_fcst.sh.ecf
####################################
export SAVEGES=${SAVEGES:-YES}
export SENDECF=${SENDECF:-YES}
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-YES}
export RERUN=${RERUN:-NO}
export VERBOSE=${VERBOSE:-YES}

export RUN_GETGES=${RUN_GETGES:-YES}

####################################
# Specify Execution Areas
####################################
export EXECcfs=${EXECcfs:-$HOMEcfs/exec}
export PARMcfs=${PARMcfs:-$HOMEcfs/parm}
export FIXcfs=${FIXcfs:-$HOMEcfs/fix/cfs_fix_cdas}
export USHcfs=${USHcfs:-$HOMEcfs/ush}

export HOMEGLOBAL=${HOMEGLOBAL:-$HOMEcfs/global_shared_cfs} 
export EXECGLOBAL=${EXECGLOBAL:-$HOMEGLOBAL/exec}
export PARMGLOBAL=${PARMGLOBAL:-$HOMEGLOBAL/parm}
export USHGLOBAL=${USHGLOBAL:-$HOMEGLOBAL/ush}
export FIXGLOBAL=${FIXGLOBAL:-$HOMEcfs/fix/cfs_fix_fix_am}

err_chk=err_chk
startmsg=startmsg
ERRSCRIPT=${ERRSCRIPT:-$err_chk}
LOGSCRIPT=${LOGSCRIPT:-$startmsg}
export FILESTYLE='C'

##############################
# Run setpdy and initialize PDY variables
##############################

setpdy.sh
. ./PDY

##############################################
# Define COM directories
##############################################
export COM_IN=${COM_IN:-$COMROOT/${NET}/${envir}}
export COM_OUT=${COM_OUT:-$COMROOT/${NET}/${envir}}

export COMIN=$COM_IN/cdas.${PDY}
export COMOUT=$COM_OUT/cdas.${PDY}
mkdir -m 775 -p $COMOUT

##############################################
# Define GES directories
##############################################
export gespath=$GESROOT/$envir
export GESdir=$gespath/cdas.$PDY
mkdir -m 775 -p $GESdir

####################################
# Specify Special Vars
####################################
#
# Forecast Model Horizontal Resolution
#
export JCAP_ges=${JCAP:-574}
#
# Forecast Model Vertical Resolution
#
export LEVS_ges=${LEVS:-64}
#
# Analysis valid time
#
export CDATE=${CDATE:-${PDY}${cyc}}

####################################
# Fix Files
#
export SATANGL=${SATANGL:-${FIXcfs}/global_satangbias.txt}

####################################
# Input Fields
#
export PREINP=${PREINP:-${RUN}.${cycle}.}
export RADSTAT=${RADSTAT:-${COMIN}/${PREINP}radstat}

############################################################################ 
#
# Output File Names
#
export SATANGO=${SATANGO:-$DATA/${RUN}.${cycle}.satang}

msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"

####################################
# Check if this is a restart
#
# Define Previous Guess File Names
####################################
if [ $RUN_GETGES = YES ] ; then
  gesenvir=${envir}
  export GETGESSH=$HOMEcfs/ush/global_getges.sh
  $GETGESSH -t sfcges -r ${JCAP_ges}$LEVS_ges -v $PDY$cyc -e $gesenvir -n cfs-cdas bges
  err1=$?
  $GETGESSH -t satang -r ${JCAP_ges}$LEVS_ges -v $PDY$cyc -e $gesenvir -n cfs-cdas gsatang
else                         
  export SFCGES=$DATA/bges               
  export GSATANG=$DATA/gsatang
fi
export SFCGES=${SFCGES:-$DATA/bges}
export GSATANG=${GSATANG:-$DATA/gsatang}

if [ $err1 -eq 0 ] ; then
   msg="Angupdate Start/Guess Fields Found"
   postmsg "$jlogfile" "$msg"
else
   msg="Angupdate Cannot Start/Guess Fields Not Available"
   postmsg "$jlogfile" "$msg"
   export pgm=$job
   export err=911
   err_chk
fi

############################
# Make use of updated angle dependent bias file, if it exists.
if [[ -s $GSATANG ]]; then
   export SATANGL=$GSATANG
fi

# Make use of increment from GFS early cycle, if it exists
if [[ -s $GESFIL ]]; then
   export GINCIN=$GESFIL
fi


############################
# WCOSS envrionment settings
export MP_COREFILE_FORMAT=lite
export MP_EUIDEVELOP=min
export MP_EUIDEVICE=sn_all
export MP_MPILIB=mpich2
export MP_EUILIB=us

export MP_LABELIO=yes
export MP_SHARED_MEMORY=yes

##env

#############################################################
# Execute the script
${ANGUPDATESH:-$HOMEcfs/scripts/excfs_cdas_angupdate.sh.ecf}
#############################################################

##########
# NOTES: 1) SATANGO is used in the following analysis cycle
##########

if [ $SAVEGES = YES ] ; then
   cp $SATANGO $GESdir/${RUN}.${cycle}.satang
fi
if [ $SENDCOM = YES ] ; then
   cp $SATANGO $COMOUT/${RUN}.${cycle}.satang
fi

if [ $SENDDBN = YES ] ; then
   $DBNROOT/bin/dbn_alert MODEL CDAS1_MSC_satang $job $COMOUT/${RUN}.${cycle}.satang
fi

cat $pgmout


msg="ENDED NORMALLY."
postmsg "$jlogfile" "$msg"

##############################
# Remove the Temporary working directory
##############################
cd $DATAROOT
if [ ${KEEPDATA:-NO} = NO ] ; then rm -rf $DATA ; fi

date

#if [[ $SENDECF = YES || $DEV_ECF = YES ]] ; then
#  ecflow_client --complete
#else
#  export CSTEP=angu
#  ${PEND:-""}
#fi

